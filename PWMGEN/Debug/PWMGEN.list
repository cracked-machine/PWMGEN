
PWMGEN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080033c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000190  20000004  080033cc  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000194  080033cc  00020194  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d2f1  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023ab  00000000  00000000  0002d31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006ff1  00000000  00000000  0002f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b68  00000000  00000000  000366c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ab0  00000000  00000000  00037228  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000502e  00000000  00000000  00037cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003295  00000000  00000000  0003cd06  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003ff9b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d88  00000000  00000000  00040018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800334c 	.word	0x0800334c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	0800334c 	.word	0x0800334c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f000 fe4d 	bl	8000ec8 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fda7 	bl	8000d88 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fa8a 	bl	800075c <__aeabi_dsub>
 8000248:	f000 fd9e 	bl	8000d88 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_dmul>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	4645      	mov	r5, r8
 8000262:	46de      	mov	lr, fp
 8000264:	464e      	mov	r6, r9
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	030c      	lsls	r4, r1, #12
 800026a:	4698      	mov	r8, r3
 800026c:	004e      	lsls	r6, r1, #1
 800026e:	0b23      	lsrs	r3, r4, #12
 8000270:	b087      	sub	sp, #28
 8000272:	0007      	movs	r7, r0
 8000274:	4692      	mov	sl, r2
 8000276:	469b      	mov	fp, r3
 8000278:	0d76      	lsrs	r6, r6, #21
 800027a:	0fcd      	lsrs	r5, r1, #31
 800027c:	2e00      	cmp	r6, #0
 800027e:	d06b      	beq.n	8000358 <__aeabi_dmul+0xfc>
 8000280:	4b6d      	ldr	r3, [pc, #436]	; (8000438 <__aeabi_dmul+0x1dc>)
 8000282:	429e      	cmp	r6, r3
 8000284:	d035      	beq.n	80002f2 <__aeabi_dmul+0x96>
 8000286:	2480      	movs	r4, #128	; 0x80
 8000288:	465b      	mov	r3, fp
 800028a:	0f42      	lsrs	r2, r0, #29
 800028c:	0424      	lsls	r4, r4, #16
 800028e:	00db      	lsls	r3, r3, #3
 8000290:	4314      	orrs	r4, r2
 8000292:	431c      	orrs	r4, r3
 8000294:	00c3      	lsls	r3, r0, #3
 8000296:	4699      	mov	r9, r3
 8000298:	4b68      	ldr	r3, [pc, #416]	; (800043c <__aeabi_dmul+0x1e0>)
 800029a:	46a3      	mov	fp, r4
 800029c:	469c      	mov	ip, r3
 800029e:	2300      	movs	r3, #0
 80002a0:	2700      	movs	r7, #0
 80002a2:	4466      	add	r6, ip
 80002a4:	9302      	str	r3, [sp, #8]
 80002a6:	4643      	mov	r3, r8
 80002a8:	031c      	lsls	r4, r3, #12
 80002aa:	005a      	lsls	r2, r3, #1
 80002ac:	0fdb      	lsrs	r3, r3, #31
 80002ae:	4650      	mov	r0, sl
 80002b0:	0b24      	lsrs	r4, r4, #12
 80002b2:	0d52      	lsrs	r2, r2, #21
 80002b4:	4698      	mov	r8, r3
 80002b6:	d100      	bne.n	80002ba <__aeabi_dmul+0x5e>
 80002b8:	e076      	b.n	80003a8 <__aeabi_dmul+0x14c>
 80002ba:	4b5f      	ldr	r3, [pc, #380]	; (8000438 <__aeabi_dmul+0x1dc>)
 80002bc:	429a      	cmp	r2, r3
 80002be:	d06d      	beq.n	800039c <__aeabi_dmul+0x140>
 80002c0:	2380      	movs	r3, #128	; 0x80
 80002c2:	0f41      	lsrs	r1, r0, #29
 80002c4:	041b      	lsls	r3, r3, #16
 80002c6:	430b      	orrs	r3, r1
 80002c8:	495c      	ldr	r1, [pc, #368]	; (800043c <__aeabi_dmul+0x1e0>)
 80002ca:	00e4      	lsls	r4, r4, #3
 80002cc:	468c      	mov	ip, r1
 80002ce:	431c      	orrs	r4, r3
 80002d0:	00c3      	lsls	r3, r0, #3
 80002d2:	2000      	movs	r0, #0
 80002d4:	4462      	add	r2, ip
 80002d6:	4641      	mov	r1, r8
 80002d8:	18b6      	adds	r6, r6, r2
 80002da:	4069      	eors	r1, r5
 80002dc:	1c72      	adds	r2, r6, #1
 80002de:	9101      	str	r1, [sp, #4]
 80002e0:	4694      	mov	ip, r2
 80002e2:	4307      	orrs	r7, r0
 80002e4:	2f0f      	cmp	r7, #15
 80002e6:	d900      	bls.n	80002ea <__aeabi_dmul+0x8e>
 80002e8:	e0b0      	b.n	800044c <__aeabi_dmul+0x1f0>
 80002ea:	4a55      	ldr	r2, [pc, #340]	; (8000440 <__aeabi_dmul+0x1e4>)
 80002ec:	00bf      	lsls	r7, r7, #2
 80002ee:	59d2      	ldr	r2, [r2, r7]
 80002f0:	4697      	mov	pc, r2
 80002f2:	465b      	mov	r3, fp
 80002f4:	4303      	orrs	r3, r0
 80002f6:	4699      	mov	r9, r3
 80002f8:	d000      	beq.n	80002fc <__aeabi_dmul+0xa0>
 80002fa:	e087      	b.n	800040c <__aeabi_dmul+0x1b0>
 80002fc:	2300      	movs	r3, #0
 80002fe:	469b      	mov	fp, r3
 8000300:	3302      	adds	r3, #2
 8000302:	2708      	movs	r7, #8
 8000304:	9302      	str	r3, [sp, #8]
 8000306:	e7ce      	b.n	80002a6 <__aeabi_dmul+0x4a>
 8000308:	4642      	mov	r2, r8
 800030a:	9201      	str	r2, [sp, #4]
 800030c:	2802      	cmp	r0, #2
 800030e:	d067      	beq.n	80003e0 <__aeabi_dmul+0x184>
 8000310:	2803      	cmp	r0, #3
 8000312:	d100      	bne.n	8000316 <__aeabi_dmul+0xba>
 8000314:	e20e      	b.n	8000734 <__aeabi_dmul+0x4d8>
 8000316:	2801      	cmp	r0, #1
 8000318:	d000      	beq.n	800031c <__aeabi_dmul+0xc0>
 800031a:	e162      	b.n	80005e2 <__aeabi_dmul+0x386>
 800031c:	2300      	movs	r3, #0
 800031e:	2400      	movs	r4, #0
 8000320:	2200      	movs	r2, #0
 8000322:	4699      	mov	r9, r3
 8000324:	9901      	ldr	r1, [sp, #4]
 8000326:	4001      	ands	r1, r0
 8000328:	b2cd      	uxtb	r5, r1
 800032a:	2100      	movs	r1, #0
 800032c:	0312      	lsls	r2, r2, #12
 800032e:	0d0b      	lsrs	r3, r1, #20
 8000330:	0b12      	lsrs	r2, r2, #12
 8000332:	051b      	lsls	r3, r3, #20
 8000334:	4313      	orrs	r3, r2
 8000336:	4a43      	ldr	r2, [pc, #268]	; (8000444 <__aeabi_dmul+0x1e8>)
 8000338:	0524      	lsls	r4, r4, #20
 800033a:	4013      	ands	r3, r2
 800033c:	431c      	orrs	r4, r3
 800033e:	0064      	lsls	r4, r4, #1
 8000340:	07ed      	lsls	r5, r5, #31
 8000342:	0864      	lsrs	r4, r4, #1
 8000344:	432c      	orrs	r4, r5
 8000346:	4648      	mov	r0, r9
 8000348:	0021      	movs	r1, r4
 800034a:	b007      	add	sp, #28
 800034c:	bc3c      	pop	{r2, r3, r4, r5}
 800034e:	4690      	mov	r8, r2
 8000350:	4699      	mov	r9, r3
 8000352:	46a2      	mov	sl, r4
 8000354:	46ab      	mov	fp, r5
 8000356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000358:	4303      	orrs	r3, r0
 800035a:	4699      	mov	r9, r3
 800035c:	d04f      	beq.n	80003fe <__aeabi_dmul+0x1a2>
 800035e:	465b      	mov	r3, fp
 8000360:	2b00      	cmp	r3, #0
 8000362:	d100      	bne.n	8000366 <__aeabi_dmul+0x10a>
 8000364:	e189      	b.n	800067a <__aeabi_dmul+0x41e>
 8000366:	4658      	mov	r0, fp
 8000368:	f000 fdb8 	bl	8000edc <__clzsi2>
 800036c:	0003      	movs	r3, r0
 800036e:	3b0b      	subs	r3, #11
 8000370:	2b1c      	cmp	r3, #28
 8000372:	dd00      	ble.n	8000376 <__aeabi_dmul+0x11a>
 8000374:	e17a      	b.n	800066c <__aeabi_dmul+0x410>
 8000376:	221d      	movs	r2, #29
 8000378:	1ad3      	subs	r3, r2, r3
 800037a:	003a      	movs	r2, r7
 800037c:	0001      	movs	r1, r0
 800037e:	465c      	mov	r4, fp
 8000380:	40da      	lsrs	r2, r3
 8000382:	3908      	subs	r1, #8
 8000384:	408c      	lsls	r4, r1
 8000386:	0013      	movs	r3, r2
 8000388:	408f      	lsls	r7, r1
 800038a:	4323      	orrs	r3, r4
 800038c:	469b      	mov	fp, r3
 800038e:	46b9      	mov	r9, r7
 8000390:	2300      	movs	r3, #0
 8000392:	4e2d      	ldr	r6, [pc, #180]	; (8000448 <__aeabi_dmul+0x1ec>)
 8000394:	2700      	movs	r7, #0
 8000396:	1a36      	subs	r6, r6, r0
 8000398:	9302      	str	r3, [sp, #8]
 800039a:	e784      	b.n	80002a6 <__aeabi_dmul+0x4a>
 800039c:	4653      	mov	r3, sl
 800039e:	4323      	orrs	r3, r4
 80003a0:	d12a      	bne.n	80003f8 <__aeabi_dmul+0x19c>
 80003a2:	2400      	movs	r4, #0
 80003a4:	2002      	movs	r0, #2
 80003a6:	e796      	b.n	80002d6 <__aeabi_dmul+0x7a>
 80003a8:	4653      	mov	r3, sl
 80003aa:	4323      	orrs	r3, r4
 80003ac:	d020      	beq.n	80003f0 <__aeabi_dmul+0x194>
 80003ae:	2c00      	cmp	r4, #0
 80003b0:	d100      	bne.n	80003b4 <__aeabi_dmul+0x158>
 80003b2:	e157      	b.n	8000664 <__aeabi_dmul+0x408>
 80003b4:	0020      	movs	r0, r4
 80003b6:	f000 fd91 	bl	8000edc <__clzsi2>
 80003ba:	0003      	movs	r3, r0
 80003bc:	3b0b      	subs	r3, #11
 80003be:	2b1c      	cmp	r3, #28
 80003c0:	dd00      	ble.n	80003c4 <__aeabi_dmul+0x168>
 80003c2:	e149      	b.n	8000658 <__aeabi_dmul+0x3fc>
 80003c4:	211d      	movs	r1, #29
 80003c6:	1acb      	subs	r3, r1, r3
 80003c8:	4651      	mov	r1, sl
 80003ca:	0002      	movs	r2, r0
 80003cc:	40d9      	lsrs	r1, r3
 80003ce:	4653      	mov	r3, sl
 80003d0:	3a08      	subs	r2, #8
 80003d2:	4094      	lsls	r4, r2
 80003d4:	4093      	lsls	r3, r2
 80003d6:	430c      	orrs	r4, r1
 80003d8:	4a1b      	ldr	r2, [pc, #108]	; (8000448 <__aeabi_dmul+0x1ec>)
 80003da:	1a12      	subs	r2, r2, r0
 80003dc:	2000      	movs	r0, #0
 80003de:	e77a      	b.n	80002d6 <__aeabi_dmul+0x7a>
 80003e0:	2501      	movs	r5, #1
 80003e2:	9b01      	ldr	r3, [sp, #4]
 80003e4:	4c14      	ldr	r4, [pc, #80]	; (8000438 <__aeabi_dmul+0x1dc>)
 80003e6:	401d      	ands	r5, r3
 80003e8:	2300      	movs	r3, #0
 80003ea:	2200      	movs	r2, #0
 80003ec:	4699      	mov	r9, r3
 80003ee:	e79c      	b.n	800032a <__aeabi_dmul+0xce>
 80003f0:	2400      	movs	r4, #0
 80003f2:	2200      	movs	r2, #0
 80003f4:	2001      	movs	r0, #1
 80003f6:	e76e      	b.n	80002d6 <__aeabi_dmul+0x7a>
 80003f8:	4653      	mov	r3, sl
 80003fa:	2003      	movs	r0, #3
 80003fc:	e76b      	b.n	80002d6 <__aeabi_dmul+0x7a>
 80003fe:	2300      	movs	r3, #0
 8000400:	469b      	mov	fp, r3
 8000402:	3301      	adds	r3, #1
 8000404:	2704      	movs	r7, #4
 8000406:	2600      	movs	r6, #0
 8000408:	9302      	str	r3, [sp, #8]
 800040a:	e74c      	b.n	80002a6 <__aeabi_dmul+0x4a>
 800040c:	2303      	movs	r3, #3
 800040e:	4681      	mov	r9, r0
 8000410:	270c      	movs	r7, #12
 8000412:	9302      	str	r3, [sp, #8]
 8000414:	e747      	b.n	80002a6 <__aeabi_dmul+0x4a>
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	2300      	movs	r3, #0
 800041a:	2500      	movs	r5, #0
 800041c:	0312      	lsls	r2, r2, #12
 800041e:	4699      	mov	r9, r3
 8000420:	4c05      	ldr	r4, [pc, #20]	; (8000438 <__aeabi_dmul+0x1dc>)
 8000422:	e782      	b.n	800032a <__aeabi_dmul+0xce>
 8000424:	465c      	mov	r4, fp
 8000426:	464b      	mov	r3, r9
 8000428:	9802      	ldr	r0, [sp, #8]
 800042a:	e76f      	b.n	800030c <__aeabi_dmul+0xb0>
 800042c:	465c      	mov	r4, fp
 800042e:	464b      	mov	r3, r9
 8000430:	9501      	str	r5, [sp, #4]
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	e76a      	b.n	800030c <__aeabi_dmul+0xb0>
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	000007ff 	.word	0x000007ff
 800043c:	fffffc01 	.word	0xfffffc01
 8000440:	08003364 	.word	0x08003364
 8000444:	800fffff 	.word	0x800fffff
 8000448:	fffffc0d 	.word	0xfffffc0d
 800044c:	464a      	mov	r2, r9
 800044e:	4649      	mov	r1, r9
 8000450:	0c17      	lsrs	r7, r2, #16
 8000452:	0c1a      	lsrs	r2, r3, #16
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	0408      	lsls	r0, r1, #16
 800045a:	0019      	movs	r1, r3
 800045c:	0c00      	lsrs	r0, r0, #16
 800045e:	4341      	muls	r1, r0
 8000460:	0015      	movs	r5, r2
 8000462:	4688      	mov	r8, r1
 8000464:	0019      	movs	r1, r3
 8000466:	437d      	muls	r5, r7
 8000468:	4379      	muls	r1, r7
 800046a:	9503      	str	r5, [sp, #12]
 800046c:	4689      	mov	r9, r1
 800046e:	0029      	movs	r1, r5
 8000470:	0015      	movs	r5, r2
 8000472:	4345      	muls	r5, r0
 8000474:	444d      	add	r5, r9
 8000476:	9502      	str	r5, [sp, #8]
 8000478:	4645      	mov	r5, r8
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	46aa      	mov	sl, r5
 800047e:	9d02      	ldr	r5, [sp, #8]
 8000480:	4455      	add	r5, sl
 8000482:	45a9      	cmp	r9, r5
 8000484:	d906      	bls.n	8000494 <__aeabi_dmul+0x238>
 8000486:	468a      	mov	sl, r1
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	0249      	lsls	r1, r1, #9
 800048c:	4689      	mov	r9, r1
 800048e:	44ca      	add	sl, r9
 8000490:	4651      	mov	r1, sl
 8000492:	9103      	str	r1, [sp, #12]
 8000494:	0c29      	lsrs	r1, r5, #16
 8000496:	9104      	str	r1, [sp, #16]
 8000498:	4641      	mov	r1, r8
 800049a:	0409      	lsls	r1, r1, #16
 800049c:	042d      	lsls	r5, r5, #16
 800049e:	0c09      	lsrs	r1, r1, #16
 80004a0:	4688      	mov	r8, r1
 80004a2:	0029      	movs	r1, r5
 80004a4:	0c25      	lsrs	r5, r4, #16
 80004a6:	0424      	lsls	r4, r4, #16
 80004a8:	4441      	add	r1, r8
 80004aa:	0c24      	lsrs	r4, r4, #16
 80004ac:	9105      	str	r1, [sp, #20]
 80004ae:	0021      	movs	r1, r4
 80004b0:	4341      	muls	r1, r0
 80004b2:	4688      	mov	r8, r1
 80004b4:	0021      	movs	r1, r4
 80004b6:	4379      	muls	r1, r7
 80004b8:	468a      	mov	sl, r1
 80004ba:	4368      	muls	r0, r5
 80004bc:	4641      	mov	r1, r8
 80004be:	4450      	add	r0, sl
 80004c0:	4681      	mov	r9, r0
 80004c2:	0c08      	lsrs	r0, r1, #16
 80004c4:	4448      	add	r0, r9
 80004c6:	436f      	muls	r7, r5
 80004c8:	4582      	cmp	sl, r0
 80004ca:	d903      	bls.n	80004d4 <__aeabi_dmul+0x278>
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	0249      	lsls	r1, r1, #9
 80004d0:	4689      	mov	r9, r1
 80004d2:	444f      	add	r7, r9
 80004d4:	0c01      	lsrs	r1, r0, #16
 80004d6:	4689      	mov	r9, r1
 80004d8:	0039      	movs	r1, r7
 80004da:	4449      	add	r1, r9
 80004dc:	9102      	str	r1, [sp, #8]
 80004de:	4641      	mov	r1, r8
 80004e0:	040f      	lsls	r7, r1, #16
 80004e2:	9904      	ldr	r1, [sp, #16]
 80004e4:	0c3f      	lsrs	r7, r7, #16
 80004e6:	4688      	mov	r8, r1
 80004e8:	0400      	lsls	r0, r0, #16
 80004ea:	19c0      	adds	r0, r0, r7
 80004ec:	4480      	add	r8, r0
 80004ee:	4641      	mov	r1, r8
 80004f0:	9104      	str	r1, [sp, #16]
 80004f2:	4659      	mov	r1, fp
 80004f4:	0c0f      	lsrs	r7, r1, #16
 80004f6:	0409      	lsls	r1, r1, #16
 80004f8:	0c09      	lsrs	r1, r1, #16
 80004fa:	4688      	mov	r8, r1
 80004fc:	4359      	muls	r1, r3
 80004fe:	468a      	mov	sl, r1
 8000500:	0039      	movs	r1, r7
 8000502:	4351      	muls	r1, r2
 8000504:	4689      	mov	r9, r1
 8000506:	4641      	mov	r1, r8
 8000508:	434a      	muls	r2, r1
 800050a:	4651      	mov	r1, sl
 800050c:	0c09      	lsrs	r1, r1, #16
 800050e:	468b      	mov	fp, r1
 8000510:	437b      	muls	r3, r7
 8000512:	18d2      	adds	r2, r2, r3
 8000514:	445a      	add	r2, fp
 8000516:	4293      	cmp	r3, r2
 8000518:	d903      	bls.n	8000522 <__aeabi_dmul+0x2c6>
 800051a:	2380      	movs	r3, #128	; 0x80
 800051c:	025b      	lsls	r3, r3, #9
 800051e:	469b      	mov	fp, r3
 8000520:	44d9      	add	r9, fp
 8000522:	4651      	mov	r1, sl
 8000524:	0409      	lsls	r1, r1, #16
 8000526:	0c09      	lsrs	r1, r1, #16
 8000528:	468a      	mov	sl, r1
 800052a:	4641      	mov	r1, r8
 800052c:	4361      	muls	r1, r4
 800052e:	437c      	muls	r4, r7
 8000530:	0c13      	lsrs	r3, r2, #16
 8000532:	0412      	lsls	r2, r2, #16
 8000534:	444b      	add	r3, r9
 8000536:	4452      	add	r2, sl
 8000538:	46a1      	mov	r9, r4
 800053a:	468a      	mov	sl, r1
 800053c:	003c      	movs	r4, r7
 800053e:	4641      	mov	r1, r8
 8000540:	436c      	muls	r4, r5
 8000542:	434d      	muls	r5, r1
 8000544:	4651      	mov	r1, sl
 8000546:	444d      	add	r5, r9
 8000548:	0c0f      	lsrs	r7, r1, #16
 800054a:	197d      	adds	r5, r7, r5
 800054c:	45a9      	cmp	r9, r5
 800054e:	d903      	bls.n	8000558 <__aeabi_dmul+0x2fc>
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	0249      	lsls	r1, r1, #9
 8000554:	4688      	mov	r8, r1
 8000556:	4444      	add	r4, r8
 8000558:	9f04      	ldr	r7, [sp, #16]
 800055a:	9903      	ldr	r1, [sp, #12]
 800055c:	46b8      	mov	r8, r7
 800055e:	4441      	add	r1, r8
 8000560:	468b      	mov	fp, r1
 8000562:	4583      	cmp	fp, r0
 8000564:	4180      	sbcs	r0, r0
 8000566:	4241      	negs	r1, r0
 8000568:	4688      	mov	r8, r1
 800056a:	4651      	mov	r1, sl
 800056c:	0408      	lsls	r0, r1, #16
 800056e:	042f      	lsls	r7, r5, #16
 8000570:	0c00      	lsrs	r0, r0, #16
 8000572:	183f      	adds	r7, r7, r0
 8000574:	4658      	mov	r0, fp
 8000576:	9902      	ldr	r1, [sp, #8]
 8000578:	1810      	adds	r0, r2, r0
 800057a:	4689      	mov	r9, r1
 800057c:	4290      	cmp	r0, r2
 800057e:	4192      	sbcs	r2, r2
 8000580:	444f      	add	r7, r9
 8000582:	46ba      	mov	sl, r7
 8000584:	4252      	negs	r2, r2
 8000586:	4699      	mov	r9, r3
 8000588:	4693      	mov	fp, r2
 800058a:	44c2      	add	sl, r8
 800058c:	44d1      	add	r9, sl
 800058e:	44cb      	add	fp, r9
 8000590:	428f      	cmp	r7, r1
 8000592:	41bf      	sbcs	r7, r7
 8000594:	45c2      	cmp	sl, r8
 8000596:	4189      	sbcs	r1, r1
 8000598:	4599      	cmp	r9, r3
 800059a:	419b      	sbcs	r3, r3
 800059c:	4593      	cmp	fp, r2
 800059e:	4192      	sbcs	r2, r2
 80005a0:	427f      	negs	r7, r7
 80005a2:	4249      	negs	r1, r1
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	4252      	negs	r2, r2
 80005a8:	430f      	orrs	r7, r1
 80005aa:	425b      	negs	r3, r3
 80005ac:	4313      	orrs	r3, r2
 80005ae:	197f      	adds	r7, r7, r5
 80005b0:	18ff      	adds	r7, r7, r3
 80005b2:	465b      	mov	r3, fp
 80005b4:	193c      	adds	r4, r7, r4
 80005b6:	0ddb      	lsrs	r3, r3, #23
 80005b8:	9a05      	ldr	r2, [sp, #20]
 80005ba:	0264      	lsls	r4, r4, #9
 80005bc:	431c      	orrs	r4, r3
 80005be:	0243      	lsls	r3, r0, #9
 80005c0:	4313      	orrs	r3, r2
 80005c2:	1e5d      	subs	r5, r3, #1
 80005c4:	41ab      	sbcs	r3, r5
 80005c6:	465a      	mov	r2, fp
 80005c8:	0dc0      	lsrs	r0, r0, #23
 80005ca:	4303      	orrs	r3, r0
 80005cc:	0252      	lsls	r2, r2, #9
 80005ce:	4313      	orrs	r3, r2
 80005d0:	01e2      	lsls	r2, r4, #7
 80005d2:	d556      	bpl.n	8000682 <__aeabi_dmul+0x426>
 80005d4:	2001      	movs	r0, #1
 80005d6:	085a      	lsrs	r2, r3, #1
 80005d8:	4003      	ands	r3, r0
 80005da:	4313      	orrs	r3, r2
 80005dc:	07e2      	lsls	r2, r4, #31
 80005de:	4313      	orrs	r3, r2
 80005e0:	0864      	lsrs	r4, r4, #1
 80005e2:	485a      	ldr	r0, [pc, #360]	; (800074c <__aeabi_dmul+0x4f0>)
 80005e4:	4460      	add	r0, ip
 80005e6:	2800      	cmp	r0, #0
 80005e8:	dd4d      	ble.n	8000686 <__aeabi_dmul+0x42a>
 80005ea:	075a      	lsls	r2, r3, #29
 80005ec:	d009      	beq.n	8000602 <__aeabi_dmul+0x3a6>
 80005ee:	220f      	movs	r2, #15
 80005f0:	401a      	ands	r2, r3
 80005f2:	2a04      	cmp	r2, #4
 80005f4:	d005      	beq.n	8000602 <__aeabi_dmul+0x3a6>
 80005f6:	1d1a      	adds	r2, r3, #4
 80005f8:	429a      	cmp	r2, r3
 80005fa:	419b      	sbcs	r3, r3
 80005fc:	425b      	negs	r3, r3
 80005fe:	18e4      	adds	r4, r4, r3
 8000600:	0013      	movs	r3, r2
 8000602:	01e2      	lsls	r2, r4, #7
 8000604:	d504      	bpl.n	8000610 <__aeabi_dmul+0x3b4>
 8000606:	2080      	movs	r0, #128	; 0x80
 8000608:	4a51      	ldr	r2, [pc, #324]	; (8000750 <__aeabi_dmul+0x4f4>)
 800060a:	00c0      	lsls	r0, r0, #3
 800060c:	4014      	ands	r4, r2
 800060e:	4460      	add	r0, ip
 8000610:	4a50      	ldr	r2, [pc, #320]	; (8000754 <__aeabi_dmul+0x4f8>)
 8000612:	4290      	cmp	r0, r2
 8000614:	dd00      	ble.n	8000618 <__aeabi_dmul+0x3bc>
 8000616:	e6e3      	b.n	80003e0 <__aeabi_dmul+0x184>
 8000618:	2501      	movs	r5, #1
 800061a:	08db      	lsrs	r3, r3, #3
 800061c:	0762      	lsls	r2, r4, #29
 800061e:	431a      	orrs	r2, r3
 8000620:	0264      	lsls	r4, r4, #9
 8000622:	9b01      	ldr	r3, [sp, #4]
 8000624:	4691      	mov	r9, r2
 8000626:	0b22      	lsrs	r2, r4, #12
 8000628:	0544      	lsls	r4, r0, #21
 800062a:	0d64      	lsrs	r4, r4, #21
 800062c:	401d      	ands	r5, r3
 800062e:	e67c      	b.n	800032a <__aeabi_dmul+0xce>
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	4659      	mov	r1, fp
 8000634:	0312      	lsls	r2, r2, #12
 8000636:	4211      	tst	r1, r2
 8000638:	d008      	beq.n	800064c <__aeabi_dmul+0x3f0>
 800063a:	4214      	tst	r4, r2
 800063c:	d106      	bne.n	800064c <__aeabi_dmul+0x3f0>
 800063e:	4322      	orrs	r2, r4
 8000640:	0312      	lsls	r2, r2, #12
 8000642:	0b12      	lsrs	r2, r2, #12
 8000644:	4645      	mov	r5, r8
 8000646:	4699      	mov	r9, r3
 8000648:	4c43      	ldr	r4, [pc, #268]	; (8000758 <__aeabi_dmul+0x4fc>)
 800064a:	e66e      	b.n	800032a <__aeabi_dmul+0xce>
 800064c:	465b      	mov	r3, fp
 800064e:	431a      	orrs	r2, r3
 8000650:	0312      	lsls	r2, r2, #12
 8000652:	0b12      	lsrs	r2, r2, #12
 8000654:	4c40      	ldr	r4, [pc, #256]	; (8000758 <__aeabi_dmul+0x4fc>)
 8000656:	e668      	b.n	800032a <__aeabi_dmul+0xce>
 8000658:	0003      	movs	r3, r0
 800065a:	4654      	mov	r4, sl
 800065c:	3b28      	subs	r3, #40	; 0x28
 800065e:	409c      	lsls	r4, r3
 8000660:	2300      	movs	r3, #0
 8000662:	e6b9      	b.n	80003d8 <__aeabi_dmul+0x17c>
 8000664:	f000 fc3a 	bl	8000edc <__clzsi2>
 8000668:	3020      	adds	r0, #32
 800066a:	e6a6      	b.n	80003ba <__aeabi_dmul+0x15e>
 800066c:	0003      	movs	r3, r0
 800066e:	3b28      	subs	r3, #40	; 0x28
 8000670:	409f      	lsls	r7, r3
 8000672:	2300      	movs	r3, #0
 8000674:	46bb      	mov	fp, r7
 8000676:	4699      	mov	r9, r3
 8000678:	e68a      	b.n	8000390 <__aeabi_dmul+0x134>
 800067a:	f000 fc2f 	bl	8000edc <__clzsi2>
 800067e:	3020      	adds	r0, #32
 8000680:	e674      	b.n	800036c <__aeabi_dmul+0x110>
 8000682:	46b4      	mov	ip, r6
 8000684:	e7ad      	b.n	80005e2 <__aeabi_dmul+0x386>
 8000686:	2501      	movs	r5, #1
 8000688:	1a2a      	subs	r2, r5, r0
 800068a:	2a38      	cmp	r2, #56	; 0x38
 800068c:	dd06      	ble.n	800069c <__aeabi_dmul+0x440>
 800068e:	9b01      	ldr	r3, [sp, #4]
 8000690:	2400      	movs	r4, #0
 8000692:	401d      	ands	r5, r3
 8000694:	2300      	movs	r3, #0
 8000696:	2200      	movs	r2, #0
 8000698:	4699      	mov	r9, r3
 800069a:	e646      	b.n	800032a <__aeabi_dmul+0xce>
 800069c:	2a1f      	cmp	r2, #31
 800069e:	dc21      	bgt.n	80006e4 <__aeabi_dmul+0x488>
 80006a0:	2520      	movs	r5, #32
 80006a2:	0020      	movs	r0, r4
 80006a4:	1aad      	subs	r5, r5, r2
 80006a6:	001e      	movs	r6, r3
 80006a8:	40ab      	lsls	r3, r5
 80006aa:	40a8      	lsls	r0, r5
 80006ac:	40d6      	lsrs	r6, r2
 80006ae:	1e5d      	subs	r5, r3, #1
 80006b0:	41ab      	sbcs	r3, r5
 80006b2:	4330      	orrs	r0, r6
 80006b4:	4318      	orrs	r0, r3
 80006b6:	40d4      	lsrs	r4, r2
 80006b8:	0743      	lsls	r3, r0, #29
 80006ba:	d009      	beq.n	80006d0 <__aeabi_dmul+0x474>
 80006bc:	230f      	movs	r3, #15
 80006be:	4003      	ands	r3, r0
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d005      	beq.n	80006d0 <__aeabi_dmul+0x474>
 80006c4:	0003      	movs	r3, r0
 80006c6:	1d18      	adds	r0, r3, #4
 80006c8:	4298      	cmp	r0, r3
 80006ca:	419b      	sbcs	r3, r3
 80006cc:	425b      	negs	r3, r3
 80006ce:	18e4      	adds	r4, r4, r3
 80006d0:	0223      	lsls	r3, r4, #8
 80006d2:	d521      	bpl.n	8000718 <__aeabi_dmul+0x4bc>
 80006d4:	2501      	movs	r5, #1
 80006d6:	9b01      	ldr	r3, [sp, #4]
 80006d8:	2401      	movs	r4, #1
 80006da:	401d      	ands	r5, r3
 80006dc:	2300      	movs	r3, #0
 80006de:	2200      	movs	r2, #0
 80006e0:	4699      	mov	r9, r3
 80006e2:	e622      	b.n	800032a <__aeabi_dmul+0xce>
 80006e4:	251f      	movs	r5, #31
 80006e6:	0021      	movs	r1, r4
 80006e8:	426d      	negs	r5, r5
 80006ea:	1a28      	subs	r0, r5, r0
 80006ec:	40c1      	lsrs	r1, r0
 80006ee:	0008      	movs	r0, r1
 80006f0:	2a20      	cmp	r2, #32
 80006f2:	d01d      	beq.n	8000730 <__aeabi_dmul+0x4d4>
 80006f4:	355f      	adds	r5, #95	; 0x5f
 80006f6:	1aaa      	subs	r2, r5, r2
 80006f8:	4094      	lsls	r4, r2
 80006fa:	4323      	orrs	r3, r4
 80006fc:	1e5c      	subs	r4, r3, #1
 80006fe:	41a3      	sbcs	r3, r4
 8000700:	2507      	movs	r5, #7
 8000702:	4303      	orrs	r3, r0
 8000704:	401d      	ands	r5, r3
 8000706:	2200      	movs	r2, #0
 8000708:	2d00      	cmp	r5, #0
 800070a:	d009      	beq.n	8000720 <__aeabi_dmul+0x4c4>
 800070c:	220f      	movs	r2, #15
 800070e:	2400      	movs	r4, #0
 8000710:	401a      	ands	r2, r3
 8000712:	0018      	movs	r0, r3
 8000714:	2a04      	cmp	r2, #4
 8000716:	d1d6      	bne.n	80006c6 <__aeabi_dmul+0x46a>
 8000718:	0003      	movs	r3, r0
 800071a:	0765      	lsls	r5, r4, #29
 800071c:	0264      	lsls	r4, r4, #9
 800071e:	0b22      	lsrs	r2, r4, #12
 8000720:	08db      	lsrs	r3, r3, #3
 8000722:	432b      	orrs	r3, r5
 8000724:	2501      	movs	r5, #1
 8000726:	4699      	mov	r9, r3
 8000728:	9b01      	ldr	r3, [sp, #4]
 800072a:	2400      	movs	r4, #0
 800072c:	401d      	ands	r5, r3
 800072e:	e5fc      	b.n	800032a <__aeabi_dmul+0xce>
 8000730:	2400      	movs	r4, #0
 8000732:	e7e2      	b.n	80006fa <__aeabi_dmul+0x49e>
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	2501      	movs	r5, #1
 8000738:	0312      	lsls	r2, r2, #12
 800073a:	4322      	orrs	r2, r4
 800073c:	9901      	ldr	r1, [sp, #4]
 800073e:	0312      	lsls	r2, r2, #12
 8000740:	0b12      	lsrs	r2, r2, #12
 8000742:	400d      	ands	r5, r1
 8000744:	4699      	mov	r9, r3
 8000746:	4c04      	ldr	r4, [pc, #16]	; (8000758 <__aeabi_dmul+0x4fc>)
 8000748:	e5ef      	b.n	800032a <__aeabi_dmul+0xce>
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	000003ff 	.word	0x000003ff
 8000750:	feffffff 	.word	0xfeffffff
 8000754:	000007fe 	.word	0x000007fe
 8000758:	000007ff 	.word	0x000007ff

0800075c <__aeabi_dsub>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	4646      	mov	r6, r8
 8000760:	46d6      	mov	lr, sl
 8000762:	464f      	mov	r7, r9
 8000764:	030c      	lsls	r4, r1, #12
 8000766:	b5c0      	push	{r6, r7, lr}
 8000768:	0fcd      	lsrs	r5, r1, #31
 800076a:	004e      	lsls	r6, r1, #1
 800076c:	0a61      	lsrs	r1, r4, #9
 800076e:	0f44      	lsrs	r4, r0, #29
 8000770:	430c      	orrs	r4, r1
 8000772:	00c1      	lsls	r1, r0, #3
 8000774:	0058      	lsls	r0, r3, #1
 8000776:	0d40      	lsrs	r0, r0, #21
 8000778:	4684      	mov	ip, r0
 800077a:	468a      	mov	sl, r1
 800077c:	000f      	movs	r7, r1
 800077e:	0319      	lsls	r1, r3, #12
 8000780:	0f50      	lsrs	r0, r2, #29
 8000782:	0a49      	lsrs	r1, r1, #9
 8000784:	4301      	orrs	r1, r0
 8000786:	48c6      	ldr	r0, [pc, #792]	; (8000aa0 <__aeabi_dsub+0x344>)
 8000788:	0d76      	lsrs	r6, r6, #21
 800078a:	46a8      	mov	r8, r5
 800078c:	0fdb      	lsrs	r3, r3, #31
 800078e:	00d2      	lsls	r2, r2, #3
 8000790:	4584      	cmp	ip, r0
 8000792:	d100      	bne.n	8000796 <__aeabi_dsub+0x3a>
 8000794:	e0d8      	b.n	8000948 <__aeabi_dsub+0x1ec>
 8000796:	2001      	movs	r0, #1
 8000798:	4043      	eors	r3, r0
 800079a:	42ab      	cmp	r3, r5
 800079c:	d100      	bne.n	80007a0 <__aeabi_dsub+0x44>
 800079e:	e0a6      	b.n	80008ee <__aeabi_dsub+0x192>
 80007a0:	4660      	mov	r0, ip
 80007a2:	1a35      	subs	r5, r6, r0
 80007a4:	2d00      	cmp	r5, #0
 80007a6:	dc00      	bgt.n	80007aa <__aeabi_dsub+0x4e>
 80007a8:	e105      	b.n	80009b6 <__aeabi_dsub+0x25a>
 80007aa:	2800      	cmp	r0, #0
 80007ac:	d110      	bne.n	80007d0 <__aeabi_dsub+0x74>
 80007ae:	000b      	movs	r3, r1
 80007b0:	4313      	orrs	r3, r2
 80007b2:	d100      	bne.n	80007b6 <__aeabi_dsub+0x5a>
 80007b4:	e0d7      	b.n	8000966 <__aeabi_dsub+0x20a>
 80007b6:	1e6b      	subs	r3, r5, #1
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d000      	beq.n	80007be <__aeabi_dsub+0x62>
 80007bc:	e14b      	b.n	8000a56 <__aeabi_dsub+0x2fa>
 80007be:	4653      	mov	r3, sl
 80007c0:	1a9f      	subs	r7, r3, r2
 80007c2:	45ba      	cmp	sl, r7
 80007c4:	4180      	sbcs	r0, r0
 80007c6:	1a64      	subs	r4, r4, r1
 80007c8:	4240      	negs	r0, r0
 80007ca:	1a24      	subs	r4, r4, r0
 80007cc:	2601      	movs	r6, #1
 80007ce:	e01e      	b.n	800080e <__aeabi_dsub+0xb2>
 80007d0:	4bb3      	ldr	r3, [pc, #716]	; (8000aa0 <__aeabi_dsub+0x344>)
 80007d2:	429e      	cmp	r6, r3
 80007d4:	d048      	beq.n	8000868 <__aeabi_dsub+0x10c>
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	041b      	lsls	r3, r3, #16
 80007da:	4319      	orrs	r1, r3
 80007dc:	2d38      	cmp	r5, #56	; 0x38
 80007de:	dd00      	ble.n	80007e2 <__aeabi_dsub+0x86>
 80007e0:	e119      	b.n	8000a16 <__aeabi_dsub+0x2ba>
 80007e2:	2d1f      	cmp	r5, #31
 80007e4:	dd00      	ble.n	80007e8 <__aeabi_dsub+0x8c>
 80007e6:	e14c      	b.n	8000a82 <__aeabi_dsub+0x326>
 80007e8:	2320      	movs	r3, #32
 80007ea:	000f      	movs	r7, r1
 80007ec:	1b5b      	subs	r3, r3, r5
 80007ee:	0010      	movs	r0, r2
 80007f0:	409a      	lsls	r2, r3
 80007f2:	409f      	lsls	r7, r3
 80007f4:	40e8      	lsrs	r0, r5
 80007f6:	1e53      	subs	r3, r2, #1
 80007f8:	419a      	sbcs	r2, r3
 80007fa:	40e9      	lsrs	r1, r5
 80007fc:	4307      	orrs	r7, r0
 80007fe:	4317      	orrs	r7, r2
 8000800:	4653      	mov	r3, sl
 8000802:	1bdf      	subs	r7, r3, r7
 8000804:	1a61      	subs	r1, r4, r1
 8000806:	45ba      	cmp	sl, r7
 8000808:	41a4      	sbcs	r4, r4
 800080a:	4264      	negs	r4, r4
 800080c:	1b0c      	subs	r4, r1, r4
 800080e:	0223      	lsls	r3, r4, #8
 8000810:	d400      	bmi.n	8000814 <__aeabi_dsub+0xb8>
 8000812:	e0c5      	b.n	80009a0 <__aeabi_dsub+0x244>
 8000814:	0264      	lsls	r4, r4, #9
 8000816:	0a65      	lsrs	r5, r4, #9
 8000818:	2d00      	cmp	r5, #0
 800081a:	d100      	bne.n	800081e <__aeabi_dsub+0xc2>
 800081c:	e0f6      	b.n	8000a0c <__aeabi_dsub+0x2b0>
 800081e:	0028      	movs	r0, r5
 8000820:	f000 fb5c 	bl	8000edc <__clzsi2>
 8000824:	0003      	movs	r3, r0
 8000826:	3b08      	subs	r3, #8
 8000828:	2b1f      	cmp	r3, #31
 800082a:	dd00      	ble.n	800082e <__aeabi_dsub+0xd2>
 800082c:	e0e9      	b.n	8000a02 <__aeabi_dsub+0x2a6>
 800082e:	2220      	movs	r2, #32
 8000830:	003c      	movs	r4, r7
 8000832:	1ad2      	subs	r2, r2, r3
 8000834:	409d      	lsls	r5, r3
 8000836:	40d4      	lsrs	r4, r2
 8000838:	409f      	lsls	r7, r3
 800083a:	4325      	orrs	r5, r4
 800083c:	429e      	cmp	r6, r3
 800083e:	dd00      	ble.n	8000842 <__aeabi_dsub+0xe6>
 8000840:	e0db      	b.n	80009fa <__aeabi_dsub+0x29e>
 8000842:	1b9e      	subs	r6, r3, r6
 8000844:	1c73      	adds	r3, r6, #1
 8000846:	2b1f      	cmp	r3, #31
 8000848:	dd00      	ble.n	800084c <__aeabi_dsub+0xf0>
 800084a:	e10a      	b.n	8000a62 <__aeabi_dsub+0x306>
 800084c:	2220      	movs	r2, #32
 800084e:	0038      	movs	r0, r7
 8000850:	1ad2      	subs	r2, r2, r3
 8000852:	0029      	movs	r1, r5
 8000854:	4097      	lsls	r7, r2
 8000856:	002c      	movs	r4, r5
 8000858:	4091      	lsls	r1, r2
 800085a:	40d8      	lsrs	r0, r3
 800085c:	1e7a      	subs	r2, r7, #1
 800085e:	4197      	sbcs	r7, r2
 8000860:	40dc      	lsrs	r4, r3
 8000862:	2600      	movs	r6, #0
 8000864:	4301      	orrs	r1, r0
 8000866:	430f      	orrs	r7, r1
 8000868:	077b      	lsls	r3, r7, #29
 800086a:	d009      	beq.n	8000880 <__aeabi_dsub+0x124>
 800086c:	230f      	movs	r3, #15
 800086e:	403b      	ands	r3, r7
 8000870:	2b04      	cmp	r3, #4
 8000872:	d005      	beq.n	8000880 <__aeabi_dsub+0x124>
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	42bb      	cmp	r3, r7
 8000878:	41bf      	sbcs	r7, r7
 800087a:	427f      	negs	r7, r7
 800087c:	19e4      	adds	r4, r4, r7
 800087e:	001f      	movs	r7, r3
 8000880:	0223      	lsls	r3, r4, #8
 8000882:	d525      	bpl.n	80008d0 <__aeabi_dsub+0x174>
 8000884:	4b86      	ldr	r3, [pc, #536]	; (8000aa0 <__aeabi_dsub+0x344>)
 8000886:	3601      	adds	r6, #1
 8000888:	429e      	cmp	r6, r3
 800088a:	d100      	bne.n	800088e <__aeabi_dsub+0x132>
 800088c:	e0af      	b.n	80009ee <__aeabi_dsub+0x292>
 800088e:	4b85      	ldr	r3, [pc, #532]	; (8000aa4 <__aeabi_dsub+0x348>)
 8000890:	2501      	movs	r5, #1
 8000892:	401c      	ands	r4, r3
 8000894:	4643      	mov	r3, r8
 8000896:	0762      	lsls	r2, r4, #29
 8000898:	08ff      	lsrs	r7, r7, #3
 800089a:	0264      	lsls	r4, r4, #9
 800089c:	0576      	lsls	r6, r6, #21
 800089e:	4317      	orrs	r7, r2
 80008a0:	0b24      	lsrs	r4, r4, #12
 80008a2:	0d76      	lsrs	r6, r6, #21
 80008a4:	401d      	ands	r5, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	0324      	lsls	r4, r4, #12
 80008aa:	0b23      	lsrs	r3, r4, #12
 80008ac:	0d0c      	lsrs	r4, r1, #20
 80008ae:	4a7e      	ldr	r2, [pc, #504]	; (8000aa8 <__aeabi_dsub+0x34c>)
 80008b0:	0524      	lsls	r4, r4, #20
 80008b2:	431c      	orrs	r4, r3
 80008b4:	4014      	ands	r4, r2
 80008b6:	0533      	lsls	r3, r6, #20
 80008b8:	4323      	orrs	r3, r4
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	07ed      	lsls	r5, r5, #31
 80008be:	085b      	lsrs	r3, r3, #1
 80008c0:	432b      	orrs	r3, r5
 80008c2:	0038      	movs	r0, r7
 80008c4:	0019      	movs	r1, r3
 80008c6:	bc1c      	pop	{r2, r3, r4}
 80008c8:	4690      	mov	r8, r2
 80008ca:	4699      	mov	r9, r3
 80008cc:	46a2      	mov	sl, r4
 80008ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d0:	2501      	movs	r5, #1
 80008d2:	4643      	mov	r3, r8
 80008d4:	0762      	lsls	r2, r4, #29
 80008d6:	08ff      	lsrs	r7, r7, #3
 80008d8:	4317      	orrs	r7, r2
 80008da:	08e4      	lsrs	r4, r4, #3
 80008dc:	401d      	ands	r5, r3
 80008de:	4b70      	ldr	r3, [pc, #448]	; (8000aa0 <__aeabi_dsub+0x344>)
 80008e0:	429e      	cmp	r6, r3
 80008e2:	d036      	beq.n	8000952 <__aeabi_dsub+0x1f6>
 80008e4:	0324      	lsls	r4, r4, #12
 80008e6:	0576      	lsls	r6, r6, #21
 80008e8:	0b24      	lsrs	r4, r4, #12
 80008ea:	0d76      	lsrs	r6, r6, #21
 80008ec:	e7db      	b.n	80008a6 <__aeabi_dsub+0x14a>
 80008ee:	4663      	mov	r3, ip
 80008f0:	1af3      	subs	r3, r6, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	dc00      	bgt.n	80008f8 <__aeabi_dsub+0x19c>
 80008f6:	e094      	b.n	8000a22 <__aeabi_dsub+0x2c6>
 80008f8:	4660      	mov	r0, ip
 80008fa:	2800      	cmp	r0, #0
 80008fc:	d035      	beq.n	800096a <__aeabi_dsub+0x20e>
 80008fe:	4868      	ldr	r0, [pc, #416]	; (8000aa0 <__aeabi_dsub+0x344>)
 8000900:	4286      	cmp	r6, r0
 8000902:	d0b1      	beq.n	8000868 <__aeabi_dsub+0x10c>
 8000904:	2780      	movs	r7, #128	; 0x80
 8000906:	043f      	lsls	r7, r7, #16
 8000908:	4339      	orrs	r1, r7
 800090a:	2b38      	cmp	r3, #56	; 0x38
 800090c:	dc00      	bgt.n	8000910 <__aeabi_dsub+0x1b4>
 800090e:	e0fd      	b.n	8000b0c <__aeabi_dsub+0x3b0>
 8000910:	430a      	orrs	r2, r1
 8000912:	0017      	movs	r7, r2
 8000914:	2100      	movs	r1, #0
 8000916:	1e7a      	subs	r2, r7, #1
 8000918:	4197      	sbcs	r7, r2
 800091a:	4457      	add	r7, sl
 800091c:	4557      	cmp	r7, sl
 800091e:	4180      	sbcs	r0, r0
 8000920:	1909      	adds	r1, r1, r4
 8000922:	4244      	negs	r4, r0
 8000924:	190c      	adds	r4, r1, r4
 8000926:	0223      	lsls	r3, r4, #8
 8000928:	d53a      	bpl.n	80009a0 <__aeabi_dsub+0x244>
 800092a:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <__aeabi_dsub+0x344>)
 800092c:	3601      	adds	r6, #1
 800092e:	429e      	cmp	r6, r3
 8000930:	d100      	bne.n	8000934 <__aeabi_dsub+0x1d8>
 8000932:	e14b      	b.n	8000bcc <__aeabi_dsub+0x470>
 8000934:	2201      	movs	r2, #1
 8000936:	4b5b      	ldr	r3, [pc, #364]	; (8000aa4 <__aeabi_dsub+0x348>)
 8000938:	401c      	ands	r4, r3
 800093a:	087b      	lsrs	r3, r7, #1
 800093c:	4017      	ands	r7, r2
 800093e:	431f      	orrs	r7, r3
 8000940:	07e2      	lsls	r2, r4, #31
 8000942:	4317      	orrs	r7, r2
 8000944:	0864      	lsrs	r4, r4, #1
 8000946:	e78f      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000948:	0008      	movs	r0, r1
 800094a:	4310      	orrs	r0, r2
 800094c:	d000      	beq.n	8000950 <__aeabi_dsub+0x1f4>
 800094e:	e724      	b.n	800079a <__aeabi_dsub+0x3e>
 8000950:	e721      	b.n	8000796 <__aeabi_dsub+0x3a>
 8000952:	0023      	movs	r3, r4
 8000954:	433b      	orrs	r3, r7
 8000956:	d100      	bne.n	800095a <__aeabi_dsub+0x1fe>
 8000958:	e1b9      	b.n	8000cce <__aeabi_dsub+0x572>
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	0312      	lsls	r2, r2, #12
 800095e:	4314      	orrs	r4, r2
 8000960:	0324      	lsls	r4, r4, #12
 8000962:	0b24      	lsrs	r4, r4, #12
 8000964:	e79f      	b.n	80008a6 <__aeabi_dsub+0x14a>
 8000966:	002e      	movs	r6, r5
 8000968:	e77e      	b.n	8000868 <__aeabi_dsub+0x10c>
 800096a:	0008      	movs	r0, r1
 800096c:	4310      	orrs	r0, r2
 800096e:	d100      	bne.n	8000972 <__aeabi_dsub+0x216>
 8000970:	e0ca      	b.n	8000b08 <__aeabi_dsub+0x3ac>
 8000972:	1e58      	subs	r0, r3, #1
 8000974:	4684      	mov	ip, r0
 8000976:	2800      	cmp	r0, #0
 8000978:	d000      	beq.n	800097c <__aeabi_dsub+0x220>
 800097a:	e0e7      	b.n	8000b4c <__aeabi_dsub+0x3f0>
 800097c:	4452      	add	r2, sl
 800097e:	4552      	cmp	r2, sl
 8000980:	4180      	sbcs	r0, r0
 8000982:	1864      	adds	r4, r4, r1
 8000984:	4240      	negs	r0, r0
 8000986:	1824      	adds	r4, r4, r0
 8000988:	0017      	movs	r7, r2
 800098a:	2601      	movs	r6, #1
 800098c:	0223      	lsls	r3, r4, #8
 800098e:	d507      	bpl.n	80009a0 <__aeabi_dsub+0x244>
 8000990:	2602      	movs	r6, #2
 8000992:	e7cf      	b.n	8000934 <__aeabi_dsub+0x1d8>
 8000994:	4664      	mov	r4, ip
 8000996:	432c      	orrs	r4, r5
 8000998:	d100      	bne.n	800099c <__aeabi_dsub+0x240>
 800099a:	e1b3      	b.n	8000d04 <__aeabi_dsub+0x5a8>
 800099c:	002c      	movs	r4, r5
 800099e:	4667      	mov	r7, ip
 80009a0:	077b      	lsls	r3, r7, #29
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dsub+0x24a>
 80009a4:	e762      	b.n	800086c <__aeabi_dsub+0x110>
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	08ff      	lsrs	r7, r7, #3
 80009aa:	431f      	orrs	r7, r3
 80009ac:	2501      	movs	r5, #1
 80009ae:	4643      	mov	r3, r8
 80009b0:	08e4      	lsrs	r4, r4, #3
 80009b2:	401d      	ands	r5, r3
 80009b4:	e793      	b.n	80008de <__aeabi_dsub+0x182>
 80009b6:	2d00      	cmp	r5, #0
 80009b8:	d178      	bne.n	8000aac <__aeabi_dsub+0x350>
 80009ba:	1c75      	adds	r5, r6, #1
 80009bc:	056d      	lsls	r5, r5, #21
 80009be:	0d6d      	lsrs	r5, r5, #21
 80009c0:	2d01      	cmp	r5, #1
 80009c2:	dc00      	bgt.n	80009c6 <__aeabi_dsub+0x26a>
 80009c4:	e0f2      	b.n	8000bac <__aeabi_dsub+0x450>
 80009c6:	4650      	mov	r0, sl
 80009c8:	1a80      	subs	r0, r0, r2
 80009ca:	4582      	cmp	sl, r0
 80009cc:	41bf      	sbcs	r7, r7
 80009ce:	1a65      	subs	r5, r4, r1
 80009d0:	427f      	negs	r7, r7
 80009d2:	1bed      	subs	r5, r5, r7
 80009d4:	4684      	mov	ip, r0
 80009d6:	0228      	lsls	r0, r5, #8
 80009d8:	d400      	bmi.n	80009dc <__aeabi_dsub+0x280>
 80009da:	e08c      	b.n	8000af6 <__aeabi_dsub+0x39a>
 80009dc:	4650      	mov	r0, sl
 80009de:	1a17      	subs	r7, r2, r0
 80009e0:	42ba      	cmp	r2, r7
 80009e2:	4192      	sbcs	r2, r2
 80009e4:	1b0c      	subs	r4, r1, r4
 80009e6:	4255      	negs	r5, r2
 80009e8:	1b65      	subs	r5, r4, r5
 80009ea:	4698      	mov	r8, r3
 80009ec:	e714      	b.n	8000818 <__aeabi_dsub+0xbc>
 80009ee:	2501      	movs	r5, #1
 80009f0:	4643      	mov	r3, r8
 80009f2:	2400      	movs	r4, #0
 80009f4:	401d      	ands	r5, r3
 80009f6:	2700      	movs	r7, #0
 80009f8:	e755      	b.n	80008a6 <__aeabi_dsub+0x14a>
 80009fa:	4c2a      	ldr	r4, [pc, #168]	; (8000aa4 <__aeabi_dsub+0x348>)
 80009fc:	1af6      	subs	r6, r6, r3
 80009fe:	402c      	ands	r4, r5
 8000a00:	e732      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000a02:	003d      	movs	r5, r7
 8000a04:	3828      	subs	r0, #40	; 0x28
 8000a06:	4085      	lsls	r5, r0
 8000a08:	2700      	movs	r7, #0
 8000a0a:	e717      	b.n	800083c <__aeabi_dsub+0xe0>
 8000a0c:	0038      	movs	r0, r7
 8000a0e:	f000 fa65 	bl	8000edc <__clzsi2>
 8000a12:	3020      	adds	r0, #32
 8000a14:	e706      	b.n	8000824 <__aeabi_dsub+0xc8>
 8000a16:	430a      	orrs	r2, r1
 8000a18:	0017      	movs	r7, r2
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	1e7a      	subs	r2, r7, #1
 8000a1e:	4197      	sbcs	r7, r2
 8000a20:	e6ee      	b.n	8000800 <__aeabi_dsub+0xa4>
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d000      	beq.n	8000a28 <__aeabi_dsub+0x2cc>
 8000a26:	e0e5      	b.n	8000bf4 <__aeabi_dsub+0x498>
 8000a28:	1c73      	adds	r3, r6, #1
 8000a2a:	469c      	mov	ip, r3
 8000a2c:	055b      	lsls	r3, r3, #21
 8000a2e:	0d5b      	lsrs	r3, r3, #21
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	dc00      	bgt.n	8000a36 <__aeabi_dsub+0x2da>
 8000a34:	e09f      	b.n	8000b76 <__aeabi_dsub+0x41a>
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <__aeabi_dsub+0x344>)
 8000a38:	459c      	cmp	ip, r3
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dsub+0x2e2>
 8000a3c:	e0c5      	b.n	8000bca <__aeabi_dsub+0x46e>
 8000a3e:	4452      	add	r2, sl
 8000a40:	4552      	cmp	r2, sl
 8000a42:	4180      	sbcs	r0, r0
 8000a44:	1864      	adds	r4, r4, r1
 8000a46:	4240      	negs	r0, r0
 8000a48:	1824      	adds	r4, r4, r0
 8000a4a:	07e7      	lsls	r7, r4, #31
 8000a4c:	0852      	lsrs	r2, r2, #1
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	0864      	lsrs	r4, r4, #1
 8000a52:	4666      	mov	r6, ip
 8000a54:	e708      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000a56:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <__aeabi_dsub+0x344>)
 8000a58:	4285      	cmp	r5, r0
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dsub+0x302>
 8000a5c:	e085      	b.n	8000b6a <__aeabi_dsub+0x40e>
 8000a5e:	001d      	movs	r5, r3
 8000a60:	e6bc      	b.n	80007dc <__aeabi_dsub+0x80>
 8000a62:	0029      	movs	r1, r5
 8000a64:	3e1f      	subs	r6, #31
 8000a66:	40f1      	lsrs	r1, r6
 8000a68:	2b20      	cmp	r3, #32
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_dsub+0x312>
 8000a6c:	e07f      	b.n	8000b6e <__aeabi_dsub+0x412>
 8000a6e:	2240      	movs	r2, #64	; 0x40
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	409d      	lsls	r5, r3
 8000a74:	432f      	orrs	r7, r5
 8000a76:	1e7d      	subs	r5, r7, #1
 8000a78:	41af      	sbcs	r7, r5
 8000a7a:	2400      	movs	r4, #0
 8000a7c:	430f      	orrs	r7, r1
 8000a7e:	2600      	movs	r6, #0
 8000a80:	e78e      	b.n	80009a0 <__aeabi_dsub+0x244>
 8000a82:	002b      	movs	r3, r5
 8000a84:	000f      	movs	r7, r1
 8000a86:	3b20      	subs	r3, #32
 8000a88:	40df      	lsrs	r7, r3
 8000a8a:	2d20      	cmp	r5, #32
 8000a8c:	d071      	beq.n	8000b72 <__aeabi_dsub+0x416>
 8000a8e:	2340      	movs	r3, #64	; 0x40
 8000a90:	1b5d      	subs	r5, r3, r5
 8000a92:	40a9      	lsls	r1, r5
 8000a94:	430a      	orrs	r2, r1
 8000a96:	1e51      	subs	r1, r2, #1
 8000a98:	418a      	sbcs	r2, r1
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4317      	orrs	r7, r2
 8000a9e:	e6af      	b.n	8000800 <__aeabi_dsub+0xa4>
 8000aa0:	000007ff 	.word	0x000007ff
 8000aa4:	ff7fffff 	.word	0xff7fffff
 8000aa8:	800fffff 	.word	0x800fffff
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d03e      	beq.n	8000b2e <__aeabi_dsub+0x3d2>
 8000ab0:	4eb3      	ldr	r6, [pc, #716]	; (8000d80 <__aeabi_dsub+0x624>)
 8000ab2:	45b4      	cmp	ip, r6
 8000ab4:	d045      	beq.n	8000b42 <__aeabi_dsub+0x3e6>
 8000ab6:	2680      	movs	r6, #128	; 0x80
 8000ab8:	0436      	lsls	r6, r6, #16
 8000aba:	426d      	negs	r5, r5
 8000abc:	4334      	orrs	r4, r6
 8000abe:	2d38      	cmp	r5, #56	; 0x38
 8000ac0:	dd00      	ble.n	8000ac4 <__aeabi_dsub+0x368>
 8000ac2:	e0a8      	b.n	8000c16 <__aeabi_dsub+0x4ba>
 8000ac4:	2d1f      	cmp	r5, #31
 8000ac6:	dd00      	ble.n	8000aca <__aeabi_dsub+0x36e>
 8000ac8:	e11f      	b.n	8000d0a <__aeabi_dsub+0x5ae>
 8000aca:	2620      	movs	r6, #32
 8000acc:	0027      	movs	r7, r4
 8000ace:	4650      	mov	r0, sl
 8000ad0:	1b76      	subs	r6, r6, r5
 8000ad2:	40b7      	lsls	r7, r6
 8000ad4:	40e8      	lsrs	r0, r5
 8000ad6:	4307      	orrs	r7, r0
 8000ad8:	4650      	mov	r0, sl
 8000ada:	40b0      	lsls	r0, r6
 8000adc:	1e46      	subs	r6, r0, #1
 8000ade:	41b0      	sbcs	r0, r6
 8000ae0:	40ec      	lsrs	r4, r5
 8000ae2:	4338      	orrs	r0, r7
 8000ae4:	1a17      	subs	r7, r2, r0
 8000ae6:	42ba      	cmp	r2, r7
 8000ae8:	4192      	sbcs	r2, r2
 8000aea:	1b0c      	subs	r4, r1, r4
 8000aec:	4252      	negs	r2, r2
 8000aee:	1aa4      	subs	r4, r4, r2
 8000af0:	4666      	mov	r6, ip
 8000af2:	4698      	mov	r8, r3
 8000af4:	e68b      	b.n	800080e <__aeabi_dsub+0xb2>
 8000af6:	4664      	mov	r4, ip
 8000af8:	4667      	mov	r7, ip
 8000afa:	432c      	orrs	r4, r5
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dsub+0x3a4>
 8000afe:	e68b      	b.n	8000818 <__aeabi_dsub+0xbc>
 8000b00:	2500      	movs	r5, #0
 8000b02:	2600      	movs	r6, #0
 8000b04:	2700      	movs	r7, #0
 8000b06:	e6ea      	b.n	80008de <__aeabi_dsub+0x182>
 8000b08:	001e      	movs	r6, r3
 8000b0a:	e6ad      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000b0c:	2b1f      	cmp	r3, #31
 8000b0e:	dc60      	bgt.n	8000bd2 <__aeabi_dsub+0x476>
 8000b10:	2720      	movs	r7, #32
 8000b12:	1af8      	subs	r0, r7, r3
 8000b14:	000f      	movs	r7, r1
 8000b16:	4684      	mov	ip, r0
 8000b18:	4087      	lsls	r7, r0
 8000b1a:	0010      	movs	r0, r2
 8000b1c:	40d8      	lsrs	r0, r3
 8000b1e:	4307      	orrs	r7, r0
 8000b20:	4660      	mov	r0, ip
 8000b22:	4082      	lsls	r2, r0
 8000b24:	1e50      	subs	r0, r2, #1
 8000b26:	4182      	sbcs	r2, r0
 8000b28:	40d9      	lsrs	r1, r3
 8000b2a:	4317      	orrs	r7, r2
 8000b2c:	e6f5      	b.n	800091a <__aeabi_dsub+0x1be>
 8000b2e:	0026      	movs	r6, r4
 8000b30:	4650      	mov	r0, sl
 8000b32:	4306      	orrs	r6, r0
 8000b34:	d005      	beq.n	8000b42 <__aeabi_dsub+0x3e6>
 8000b36:	43ed      	mvns	r5, r5
 8000b38:	2d00      	cmp	r5, #0
 8000b3a:	d0d3      	beq.n	8000ae4 <__aeabi_dsub+0x388>
 8000b3c:	4e90      	ldr	r6, [pc, #576]	; (8000d80 <__aeabi_dsub+0x624>)
 8000b3e:	45b4      	cmp	ip, r6
 8000b40:	d1bd      	bne.n	8000abe <__aeabi_dsub+0x362>
 8000b42:	000c      	movs	r4, r1
 8000b44:	0017      	movs	r7, r2
 8000b46:	4666      	mov	r6, ip
 8000b48:	4698      	mov	r8, r3
 8000b4a:	e68d      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000b4c:	488c      	ldr	r0, [pc, #560]	; (8000d80 <__aeabi_dsub+0x624>)
 8000b4e:	4283      	cmp	r3, r0
 8000b50:	d00b      	beq.n	8000b6a <__aeabi_dsub+0x40e>
 8000b52:	4663      	mov	r3, ip
 8000b54:	e6d9      	b.n	800090a <__aeabi_dsub+0x1ae>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d000      	beq.n	8000b5c <__aeabi_dsub+0x400>
 8000b5a:	e096      	b.n	8000c8a <__aeabi_dsub+0x52e>
 8000b5c:	0008      	movs	r0, r1
 8000b5e:	4310      	orrs	r0, r2
 8000b60:	d100      	bne.n	8000b64 <__aeabi_dsub+0x408>
 8000b62:	e0e2      	b.n	8000d2a <__aeabi_dsub+0x5ce>
 8000b64:	000c      	movs	r4, r1
 8000b66:	0017      	movs	r7, r2
 8000b68:	4698      	mov	r8, r3
 8000b6a:	4e85      	ldr	r6, [pc, #532]	; (8000d80 <__aeabi_dsub+0x624>)
 8000b6c:	e67c      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000b6e:	2500      	movs	r5, #0
 8000b70:	e780      	b.n	8000a74 <__aeabi_dsub+0x318>
 8000b72:	2100      	movs	r1, #0
 8000b74:	e78e      	b.n	8000a94 <__aeabi_dsub+0x338>
 8000b76:	0023      	movs	r3, r4
 8000b78:	4650      	mov	r0, sl
 8000b7a:	4303      	orrs	r3, r0
 8000b7c:	2e00      	cmp	r6, #0
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_dsub+0x426>
 8000b80:	e0a8      	b.n	8000cd4 <__aeabi_dsub+0x578>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_dsub+0x42c>
 8000b86:	e0de      	b.n	8000d46 <__aeabi_dsub+0x5ea>
 8000b88:	000b      	movs	r3, r1
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dsub+0x434>
 8000b8e:	e66b      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000b90:	4452      	add	r2, sl
 8000b92:	4552      	cmp	r2, sl
 8000b94:	4180      	sbcs	r0, r0
 8000b96:	1864      	adds	r4, r4, r1
 8000b98:	4240      	negs	r0, r0
 8000b9a:	1824      	adds	r4, r4, r0
 8000b9c:	0017      	movs	r7, r2
 8000b9e:	0223      	lsls	r3, r4, #8
 8000ba0:	d400      	bmi.n	8000ba4 <__aeabi_dsub+0x448>
 8000ba2:	e6fd      	b.n	80009a0 <__aeabi_dsub+0x244>
 8000ba4:	4b77      	ldr	r3, [pc, #476]	; (8000d84 <__aeabi_dsub+0x628>)
 8000ba6:	4666      	mov	r6, ip
 8000ba8:	401c      	ands	r4, r3
 8000baa:	e65d      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000bac:	0025      	movs	r5, r4
 8000bae:	4650      	mov	r0, sl
 8000bb0:	4305      	orrs	r5, r0
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d1cf      	bne.n	8000b56 <__aeabi_dsub+0x3fa>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	d14f      	bne.n	8000c5a <__aeabi_dsub+0x4fe>
 8000bba:	000c      	movs	r4, r1
 8000bbc:	4314      	orrs	r4, r2
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dsub+0x466>
 8000bc0:	e0a0      	b.n	8000d04 <__aeabi_dsub+0x5a8>
 8000bc2:	000c      	movs	r4, r1
 8000bc4:	0017      	movs	r7, r2
 8000bc6:	4698      	mov	r8, r3
 8000bc8:	e64e      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000bca:	4666      	mov	r6, ip
 8000bcc:	2400      	movs	r4, #0
 8000bce:	2700      	movs	r7, #0
 8000bd0:	e685      	b.n	80008de <__aeabi_dsub+0x182>
 8000bd2:	001f      	movs	r7, r3
 8000bd4:	0008      	movs	r0, r1
 8000bd6:	3f20      	subs	r7, #32
 8000bd8:	40f8      	lsrs	r0, r7
 8000bda:	0007      	movs	r7, r0
 8000bdc:	2b20      	cmp	r3, #32
 8000bde:	d100      	bne.n	8000be2 <__aeabi_dsub+0x486>
 8000be0:	e08e      	b.n	8000d00 <__aeabi_dsub+0x5a4>
 8000be2:	2040      	movs	r0, #64	; 0x40
 8000be4:	1ac3      	subs	r3, r0, r3
 8000be6:	4099      	lsls	r1, r3
 8000be8:	430a      	orrs	r2, r1
 8000bea:	1e51      	subs	r1, r2, #1
 8000bec:	418a      	sbcs	r2, r1
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4317      	orrs	r7, r2
 8000bf2:	e692      	b.n	800091a <__aeabi_dsub+0x1be>
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d114      	bne.n	8000c22 <__aeabi_dsub+0x4c6>
 8000bf8:	0026      	movs	r6, r4
 8000bfa:	4650      	mov	r0, sl
 8000bfc:	4306      	orrs	r6, r0
 8000bfe:	d062      	beq.n	8000cc6 <__aeabi_dsub+0x56a>
 8000c00:	43db      	mvns	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d15c      	bne.n	8000cc0 <__aeabi_dsub+0x564>
 8000c06:	1887      	adds	r7, r0, r2
 8000c08:	4297      	cmp	r7, r2
 8000c0a:	4192      	sbcs	r2, r2
 8000c0c:	1864      	adds	r4, r4, r1
 8000c0e:	4252      	negs	r2, r2
 8000c10:	18a4      	adds	r4, r4, r2
 8000c12:	4666      	mov	r6, ip
 8000c14:	e687      	b.n	8000926 <__aeabi_dsub+0x1ca>
 8000c16:	4650      	mov	r0, sl
 8000c18:	4320      	orrs	r0, r4
 8000c1a:	1e44      	subs	r4, r0, #1
 8000c1c:	41a0      	sbcs	r0, r4
 8000c1e:	2400      	movs	r4, #0
 8000c20:	e760      	b.n	8000ae4 <__aeabi_dsub+0x388>
 8000c22:	4e57      	ldr	r6, [pc, #348]	; (8000d80 <__aeabi_dsub+0x624>)
 8000c24:	45b4      	cmp	ip, r6
 8000c26:	d04e      	beq.n	8000cc6 <__aeabi_dsub+0x56a>
 8000c28:	2680      	movs	r6, #128	; 0x80
 8000c2a:	0436      	lsls	r6, r6, #16
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	4334      	orrs	r4, r6
 8000c30:	2b38      	cmp	r3, #56	; 0x38
 8000c32:	dd00      	ble.n	8000c36 <__aeabi_dsub+0x4da>
 8000c34:	e07f      	b.n	8000d36 <__aeabi_dsub+0x5da>
 8000c36:	2b1f      	cmp	r3, #31
 8000c38:	dd00      	ble.n	8000c3c <__aeabi_dsub+0x4e0>
 8000c3a:	e08b      	b.n	8000d54 <__aeabi_dsub+0x5f8>
 8000c3c:	2620      	movs	r6, #32
 8000c3e:	0027      	movs	r7, r4
 8000c40:	4650      	mov	r0, sl
 8000c42:	1af6      	subs	r6, r6, r3
 8000c44:	40b7      	lsls	r7, r6
 8000c46:	40d8      	lsrs	r0, r3
 8000c48:	4307      	orrs	r7, r0
 8000c4a:	4650      	mov	r0, sl
 8000c4c:	40b0      	lsls	r0, r6
 8000c4e:	1e46      	subs	r6, r0, #1
 8000c50:	41b0      	sbcs	r0, r6
 8000c52:	4307      	orrs	r7, r0
 8000c54:	40dc      	lsrs	r4, r3
 8000c56:	18bf      	adds	r7, r7, r2
 8000c58:	e7d6      	b.n	8000c08 <__aeabi_dsub+0x4ac>
 8000c5a:	000d      	movs	r5, r1
 8000c5c:	4315      	orrs	r5, r2
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dsub+0x506>
 8000c60:	e602      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000c62:	4650      	mov	r0, sl
 8000c64:	1a80      	subs	r0, r0, r2
 8000c66:	4582      	cmp	sl, r0
 8000c68:	41bf      	sbcs	r7, r7
 8000c6a:	1a65      	subs	r5, r4, r1
 8000c6c:	427f      	negs	r7, r7
 8000c6e:	1bed      	subs	r5, r5, r7
 8000c70:	4684      	mov	ip, r0
 8000c72:	0228      	lsls	r0, r5, #8
 8000c74:	d400      	bmi.n	8000c78 <__aeabi_dsub+0x51c>
 8000c76:	e68d      	b.n	8000994 <__aeabi_dsub+0x238>
 8000c78:	4650      	mov	r0, sl
 8000c7a:	1a17      	subs	r7, r2, r0
 8000c7c:	42ba      	cmp	r2, r7
 8000c7e:	4192      	sbcs	r2, r2
 8000c80:	1b0c      	subs	r4, r1, r4
 8000c82:	4252      	negs	r2, r2
 8000c84:	1aa4      	subs	r4, r4, r2
 8000c86:	4698      	mov	r8, r3
 8000c88:	e5ee      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000c8a:	000d      	movs	r5, r1
 8000c8c:	4315      	orrs	r5, r2
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_dsub+0x536>
 8000c90:	e76b      	b.n	8000b6a <__aeabi_dsub+0x40e>
 8000c92:	4650      	mov	r0, sl
 8000c94:	0767      	lsls	r7, r4, #29
 8000c96:	08c0      	lsrs	r0, r0, #3
 8000c98:	4307      	orrs	r7, r0
 8000c9a:	2080      	movs	r0, #128	; 0x80
 8000c9c:	08e4      	lsrs	r4, r4, #3
 8000c9e:	0300      	lsls	r0, r0, #12
 8000ca0:	4204      	tst	r4, r0
 8000ca2:	d007      	beq.n	8000cb4 <__aeabi_dsub+0x558>
 8000ca4:	08cd      	lsrs	r5, r1, #3
 8000ca6:	4205      	tst	r5, r0
 8000ca8:	d104      	bne.n	8000cb4 <__aeabi_dsub+0x558>
 8000caa:	002c      	movs	r4, r5
 8000cac:	4698      	mov	r8, r3
 8000cae:	08d7      	lsrs	r7, r2, #3
 8000cb0:	0749      	lsls	r1, r1, #29
 8000cb2:	430f      	orrs	r7, r1
 8000cb4:	0f7b      	lsrs	r3, r7, #29
 8000cb6:	00e4      	lsls	r4, r4, #3
 8000cb8:	431c      	orrs	r4, r3
 8000cba:	00ff      	lsls	r7, r7, #3
 8000cbc:	4e30      	ldr	r6, [pc, #192]	; (8000d80 <__aeabi_dsub+0x624>)
 8000cbe:	e5d3      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000cc0:	4e2f      	ldr	r6, [pc, #188]	; (8000d80 <__aeabi_dsub+0x624>)
 8000cc2:	45b4      	cmp	ip, r6
 8000cc4:	d1b4      	bne.n	8000c30 <__aeabi_dsub+0x4d4>
 8000cc6:	000c      	movs	r4, r1
 8000cc8:	0017      	movs	r7, r2
 8000cca:	4666      	mov	r6, ip
 8000ccc:	e5cc      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000cce:	2700      	movs	r7, #0
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	e5e8      	b.n	80008a6 <__aeabi_dsub+0x14a>
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d039      	beq.n	8000d4c <__aeabi_dsub+0x5f0>
 8000cd8:	000b      	movs	r3, r1
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dsub+0x584>
 8000cde:	e744      	b.n	8000b6a <__aeabi_dsub+0x40e>
 8000ce0:	08c0      	lsrs	r0, r0, #3
 8000ce2:	0767      	lsls	r7, r4, #29
 8000ce4:	4307      	orrs	r7, r0
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	08e4      	lsrs	r4, r4, #3
 8000cea:	0300      	lsls	r0, r0, #12
 8000cec:	4204      	tst	r4, r0
 8000cee:	d0e1      	beq.n	8000cb4 <__aeabi_dsub+0x558>
 8000cf0:	08cb      	lsrs	r3, r1, #3
 8000cf2:	4203      	tst	r3, r0
 8000cf4:	d1de      	bne.n	8000cb4 <__aeabi_dsub+0x558>
 8000cf6:	08d7      	lsrs	r7, r2, #3
 8000cf8:	0749      	lsls	r1, r1, #29
 8000cfa:	430f      	orrs	r7, r1
 8000cfc:	001c      	movs	r4, r3
 8000cfe:	e7d9      	b.n	8000cb4 <__aeabi_dsub+0x558>
 8000d00:	2100      	movs	r1, #0
 8000d02:	e771      	b.n	8000be8 <__aeabi_dsub+0x48c>
 8000d04:	2500      	movs	r5, #0
 8000d06:	2700      	movs	r7, #0
 8000d08:	e5e9      	b.n	80008de <__aeabi_dsub+0x182>
 8000d0a:	002e      	movs	r6, r5
 8000d0c:	0027      	movs	r7, r4
 8000d0e:	3e20      	subs	r6, #32
 8000d10:	40f7      	lsrs	r7, r6
 8000d12:	2d20      	cmp	r5, #32
 8000d14:	d02f      	beq.n	8000d76 <__aeabi_dsub+0x61a>
 8000d16:	2640      	movs	r6, #64	; 0x40
 8000d18:	1b75      	subs	r5, r6, r5
 8000d1a:	40ac      	lsls	r4, r5
 8000d1c:	4650      	mov	r0, sl
 8000d1e:	4320      	orrs	r0, r4
 8000d20:	1e44      	subs	r4, r0, #1
 8000d22:	41a0      	sbcs	r0, r4
 8000d24:	2400      	movs	r4, #0
 8000d26:	4338      	orrs	r0, r7
 8000d28:	e6dc      	b.n	8000ae4 <__aeabi_dsub+0x388>
 8000d2a:	2480      	movs	r4, #128	; 0x80
 8000d2c:	2500      	movs	r5, #0
 8000d2e:	0324      	lsls	r4, r4, #12
 8000d30:	4e13      	ldr	r6, [pc, #76]	; (8000d80 <__aeabi_dsub+0x624>)
 8000d32:	2700      	movs	r7, #0
 8000d34:	e5d3      	b.n	80008de <__aeabi_dsub+0x182>
 8000d36:	4650      	mov	r0, sl
 8000d38:	4320      	orrs	r0, r4
 8000d3a:	0007      	movs	r7, r0
 8000d3c:	1e78      	subs	r0, r7, #1
 8000d3e:	4187      	sbcs	r7, r0
 8000d40:	2400      	movs	r4, #0
 8000d42:	18bf      	adds	r7, r7, r2
 8000d44:	e760      	b.n	8000c08 <__aeabi_dsub+0x4ac>
 8000d46:	000c      	movs	r4, r1
 8000d48:	0017      	movs	r7, r2
 8000d4a:	e58d      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000d4c:	000c      	movs	r4, r1
 8000d4e:	0017      	movs	r7, r2
 8000d50:	4e0b      	ldr	r6, [pc, #44]	; (8000d80 <__aeabi_dsub+0x624>)
 8000d52:	e589      	b.n	8000868 <__aeabi_dsub+0x10c>
 8000d54:	001e      	movs	r6, r3
 8000d56:	0027      	movs	r7, r4
 8000d58:	3e20      	subs	r6, #32
 8000d5a:	40f7      	lsrs	r7, r6
 8000d5c:	2b20      	cmp	r3, #32
 8000d5e:	d00c      	beq.n	8000d7a <__aeabi_dsub+0x61e>
 8000d60:	2640      	movs	r6, #64	; 0x40
 8000d62:	1af3      	subs	r3, r6, r3
 8000d64:	409c      	lsls	r4, r3
 8000d66:	4650      	mov	r0, sl
 8000d68:	4320      	orrs	r0, r4
 8000d6a:	1e44      	subs	r4, r0, #1
 8000d6c:	41a0      	sbcs	r0, r4
 8000d6e:	4307      	orrs	r7, r0
 8000d70:	2400      	movs	r4, #0
 8000d72:	18bf      	adds	r7, r7, r2
 8000d74:	e748      	b.n	8000c08 <__aeabi_dsub+0x4ac>
 8000d76:	2400      	movs	r4, #0
 8000d78:	e7d0      	b.n	8000d1c <__aeabi_dsub+0x5c0>
 8000d7a:	2400      	movs	r4, #0
 8000d7c:	e7f3      	b.n	8000d66 <__aeabi_dsub+0x60a>
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	000007ff 	.word	0x000007ff
 8000d84:	ff7fffff 	.word	0xff7fffff

08000d88 <__aeabi_d2iz>:
 8000d88:	b530      	push	{r4, r5, lr}
 8000d8a:	4d13      	ldr	r5, [pc, #76]	; (8000dd8 <__aeabi_d2iz+0x50>)
 8000d8c:	030a      	lsls	r2, r1, #12
 8000d8e:	004b      	lsls	r3, r1, #1
 8000d90:	0b12      	lsrs	r2, r2, #12
 8000d92:	0d5b      	lsrs	r3, r3, #21
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2400      	movs	r4, #0
 8000d98:	42ab      	cmp	r3, r5
 8000d9a:	dd10      	ble.n	8000dbe <__aeabi_d2iz+0x36>
 8000d9c:	4c0f      	ldr	r4, [pc, #60]	; (8000ddc <__aeabi_d2iz+0x54>)
 8000d9e:	42a3      	cmp	r3, r4
 8000da0:	dc0f      	bgt.n	8000dc2 <__aeabi_d2iz+0x3a>
 8000da2:	2480      	movs	r4, #128	; 0x80
 8000da4:	4d0e      	ldr	r5, [pc, #56]	; (8000de0 <__aeabi_d2iz+0x58>)
 8000da6:	0364      	lsls	r4, r4, #13
 8000da8:	4322      	orrs	r2, r4
 8000daa:	1aed      	subs	r5, r5, r3
 8000dac:	2d1f      	cmp	r5, #31
 8000dae:	dd0b      	ble.n	8000dc8 <__aeabi_d2iz+0x40>
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <__aeabi_d2iz+0x5c>)
 8000db2:	1ac3      	subs	r3, r0, r3
 8000db4:	40da      	lsrs	r2, r3
 8000db6:	4254      	negs	r4, r2
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_d2iz+0x36>
 8000dbc:	0014      	movs	r4, r2
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	bd30      	pop	{r4, r5, pc}
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <__aeabi_d2iz+0x60>)
 8000dc4:	18cc      	adds	r4, r1, r3
 8000dc6:	e7fa      	b.n	8000dbe <__aeabi_d2iz+0x36>
 8000dc8:	4c08      	ldr	r4, [pc, #32]	; (8000dec <__aeabi_d2iz+0x64>)
 8000dca:	40e8      	lsrs	r0, r5
 8000dcc:	46a4      	mov	ip, r4
 8000dce:	4463      	add	r3, ip
 8000dd0:	409a      	lsls	r2, r3
 8000dd2:	4302      	orrs	r2, r0
 8000dd4:	e7ef      	b.n	8000db6 <__aeabi_d2iz+0x2e>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	000003fe 	.word	0x000003fe
 8000ddc:	0000041d 	.word	0x0000041d
 8000de0:	00000433 	.word	0x00000433
 8000de4:	00000413 	.word	0x00000413
 8000de8:	7fffffff 	.word	0x7fffffff
 8000dec:	fffffbed 	.word	0xfffffbed

08000df0 <__aeabi_ui2d>:
 8000df0:	b510      	push	{r4, lr}
 8000df2:	1e04      	subs	r4, r0, #0
 8000df4:	d028      	beq.n	8000e48 <__aeabi_ui2d+0x58>
 8000df6:	f000 f871 	bl	8000edc <__clzsi2>
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <__aeabi_ui2d+0x60>)
 8000dfc:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <__aeabi_ui2d+0x64>)
 8000dfe:	1a1b      	subs	r3, r3, r0
 8000e00:	1ad2      	subs	r2, r2, r3
 8000e02:	2a1f      	cmp	r2, #31
 8000e04:	dd15      	ble.n	8000e32 <__aeabi_ui2d+0x42>
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <__aeabi_ui2d+0x68>)
 8000e08:	1ad2      	subs	r2, r2, r3
 8000e0a:	4094      	lsls	r4, r2
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	0324      	lsls	r4, r4, #12
 8000e10:	055b      	lsls	r3, r3, #21
 8000e12:	0b24      	lsrs	r4, r4, #12
 8000e14:	0d5b      	lsrs	r3, r3, #21
 8000e16:	2100      	movs	r1, #0
 8000e18:	0010      	movs	r0, r2
 8000e1a:	0324      	lsls	r4, r4, #12
 8000e1c:	0d0a      	lsrs	r2, r1, #20
 8000e1e:	0b24      	lsrs	r4, r4, #12
 8000e20:	0512      	lsls	r2, r2, #20
 8000e22:	4322      	orrs	r2, r4
 8000e24:	4c0d      	ldr	r4, [pc, #52]	; (8000e5c <__aeabi_ui2d+0x6c>)
 8000e26:	051b      	lsls	r3, r3, #20
 8000e28:	4022      	ands	r2, r4
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	0859      	lsrs	r1, r3, #1
 8000e30:	bd10      	pop	{r4, pc}
 8000e32:	0021      	movs	r1, r4
 8000e34:	4091      	lsls	r1, r2
 8000e36:	000a      	movs	r2, r1
 8000e38:	210b      	movs	r1, #11
 8000e3a:	1a08      	subs	r0, r1, r0
 8000e3c:	40c4      	lsrs	r4, r0
 8000e3e:	055b      	lsls	r3, r3, #21
 8000e40:	0324      	lsls	r4, r4, #12
 8000e42:	0b24      	lsrs	r4, r4, #12
 8000e44:	0d5b      	lsrs	r3, r3, #21
 8000e46:	e7e6      	b.n	8000e16 <__aeabi_ui2d+0x26>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	2400      	movs	r4, #0
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	e7e2      	b.n	8000e16 <__aeabi_ui2d+0x26>
 8000e50:	0000041e 	.word	0x0000041e
 8000e54:	00000433 	.word	0x00000433
 8000e58:	00000413 	.word	0x00000413
 8000e5c:	800fffff 	.word	0x800fffff

08000e60 <__aeabi_cdrcmple>:
 8000e60:	4684      	mov	ip, r0
 8000e62:	1c10      	adds	r0, r2, #0
 8000e64:	4662      	mov	r2, ip
 8000e66:	468c      	mov	ip, r1
 8000e68:	1c19      	adds	r1, r3, #0
 8000e6a:	4663      	mov	r3, ip
 8000e6c:	e000      	b.n	8000e70 <__aeabi_cdcmpeq>
 8000e6e:	46c0      	nop			; (mov r8, r8)

08000e70 <__aeabi_cdcmpeq>:
 8000e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000e72:	f000 f8ef 	bl	8001054 <__ledf2>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d401      	bmi.n	8000e7e <__aeabi_cdcmpeq+0xe>
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	42c8      	cmn	r0, r1
 8000e7e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000e80 <__aeabi_dcmpeq>:
 8000e80:	b510      	push	{r4, lr}
 8000e82:	f000 f849 	bl	8000f18 <__eqdf2>
 8000e86:	4240      	negs	r0, r0
 8000e88:	3001      	adds	r0, #1
 8000e8a:	bd10      	pop	{r4, pc}

08000e8c <__aeabi_dcmplt>:
 8000e8c:	b510      	push	{r4, lr}
 8000e8e:	f000 f8e1 	bl	8001054 <__ledf2>
 8000e92:	2800      	cmp	r0, #0
 8000e94:	db01      	blt.n	8000e9a <__aeabi_dcmplt+0xe>
 8000e96:	2000      	movs	r0, #0
 8000e98:	bd10      	pop	{r4, pc}
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	bd10      	pop	{r4, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)

08000ea0 <__aeabi_dcmple>:
 8000ea0:	b510      	push	{r4, lr}
 8000ea2:	f000 f8d7 	bl	8001054 <__ledf2>
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	dd01      	ble.n	8000eae <__aeabi_dcmple+0xe>
 8000eaa:	2000      	movs	r0, #0
 8000eac:	bd10      	pop	{r4, pc}
 8000eae:	2001      	movs	r0, #1
 8000eb0:	bd10      	pop	{r4, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)

08000eb4 <__aeabi_dcmpgt>:
 8000eb4:	b510      	push	{r4, lr}
 8000eb6:	f000 f869 	bl	8000f8c <__gedf2>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	dc01      	bgt.n	8000ec2 <__aeabi_dcmpgt+0xe>
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	bd10      	pop	{r4, pc}
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	bd10      	pop	{r4, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)

08000ec8 <__aeabi_dcmpge>:
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	f000 f85f 	bl	8000f8c <__gedf2>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	da01      	bge.n	8000ed6 <__aeabi_dcmpge+0xe>
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	bd10      	pop	{r4, pc}
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	bd10      	pop	{r4, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)

08000edc <__clzsi2>:
 8000edc:	211c      	movs	r1, #28
 8000ede:	2301      	movs	r3, #1
 8000ee0:	041b      	lsls	r3, r3, #16
 8000ee2:	4298      	cmp	r0, r3
 8000ee4:	d301      	bcc.n	8000eea <__clzsi2+0xe>
 8000ee6:	0c00      	lsrs	r0, r0, #16
 8000ee8:	3910      	subs	r1, #16
 8000eea:	0a1b      	lsrs	r3, r3, #8
 8000eec:	4298      	cmp	r0, r3
 8000eee:	d301      	bcc.n	8000ef4 <__clzsi2+0x18>
 8000ef0:	0a00      	lsrs	r0, r0, #8
 8000ef2:	3908      	subs	r1, #8
 8000ef4:	091b      	lsrs	r3, r3, #4
 8000ef6:	4298      	cmp	r0, r3
 8000ef8:	d301      	bcc.n	8000efe <__clzsi2+0x22>
 8000efa:	0900      	lsrs	r0, r0, #4
 8000efc:	3904      	subs	r1, #4
 8000efe:	a202      	add	r2, pc, #8	; (adr r2, 8000f08 <__clzsi2+0x2c>)
 8000f00:	5c10      	ldrb	r0, [r2, r0]
 8000f02:	1840      	adds	r0, r0, r1
 8000f04:	4770      	bx	lr
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	02020304 	.word	0x02020304
 8000f0c:	01010101 	.word	0x01010101
	...

08000f18 <__eqdf2>:
 8000f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1a:	464f      	mov	r7, r9
 8000f1c:	4646      	mov	r6, r8
 8000f1e:	46d6      	mov	lr, sl
 8000f20:	005c      	lsls	r4, r3, #1
 8000f22:	b5c0      	push	{r6, r7, lr}
 8000f24:	031f      	lsls	r7, r3, #12
 8000f26:	0fdb      	lsrs	r3, r3, #31
 8000f28:	469a      	mov	sl, r3
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <__eqdf2+0x70>)
 8000f2c:	030e      	lsls	r6, r1, #12
 8000f2e:	004d      	lsls	r5, r1, #1
 8000f30:	4684      	mov	ip, r0
 8000f32:	4680      	mov	r8, r0
 8000f34:	0b36      	lsrs	r6, r6, #12
 8000f36:	0d6d      	lsrs	r5, r5, #21
 8000f38:	0fc9      	lsrs	r1, r1, #31
 8000f3a:	4691      	mov	r9, r2
 8000f3c:	0b3f      	lsrs	r7, r7, #12
 8000f3e:	0d64      	lsrs	r4, r4, #21
 8000f40:	2001      	movs	r0, #1
 8000f42:	429d      	cmp	r5, r3
 8000f44:	d008      	beq.n	8000f58 <__eqdf2+0x40>
 8000f46:	429c      	cmp	r4, r3
 8000f48:	d001      	beq.n	8000f4e <__eqdf2+0x36>
 8000f4a:	42a5      	cmp	r5, r4
 8000f4c:	d00b      	beq.n	8000f66 <__eqdf2+0x4e>
 8000f4e:	bc1c      	pop	{r2, r3, r4}
 8000f50:	4690      	mov	r8, r2
 8000f52:	4699      	mov	r9, r3
 8000f54:	46a2      	mov	sl, r4
 8000f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f58:	4663      	mov	r3, ip
 8000f5a:	4333      	orrs	r3, r6
 8000f5c:	d1f7      	bne.n	8000f4e <__eqdf2+0x36>
 8000f5e:	42ac      	cmp	r4, r5
 8000f60:	d1f5      	bne.n	8000f4e <__eqdf2+0x36>
 8000f62:	433a      	orrs	r2, r7
 8000f64:	d1f3      	bne.n	8000f4e <__eqdf2+0x36>
 8000f66:	2001      	movs	r0, #1
 8000f68:	42be      	cmp	r6, r7
 8000f6a:	d1f0      	bne.n	8000f4e <__eqdf2+0x36>
 8000f6c:	45c8      	cmp	r8, r9
 8000f6e:	d1ee      	bne.n	8000f4e <__eqdf2+0x36>
 8000f70:	4551      	cmp	r1, sl
 8000f72:	d007      	beq.n	8000f84 <__eqdf2+0x6c>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d1ea      	bne.n	8000f4e <__eqdf2+0x36>
 8000f78:	4663      	mov	r3, ip
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	0030      	movs	r0, r6
 8000f7e:	1e46      	subs	r6, r0, #1
 8000f80:	41b0      	sbcs	r0, r6
 8000f82:	e7e4      	b.n	8000f4e <__eqdf2+0x36>
 8000f84:	2000      	movs	r0, #0
 8000f86:	e7e2      	b.n	8000f4e <__eqdf2+0x36>
 8000f88:	000007ff 	.word	0x000007ff

08000f8c <__gedf2>:
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	4645      	mov	r5, r8
 8000f90:	46de      	mov	lr, fp
 8000f92:	4657      	mov	r7, sl
 8000f94:	464e      	mov	r6, r9
 8000f96:	b5e0      	push	{r5, r6, r7, lr}
 8000f98:	031f      	lsls	r7, r3, #12
 8000f9a:	0b3d      	lsrs	r5, r7, #12
 8000f9c:	4f2c      	ldr	r7, [pc, #176]	; (8001050 <__gedf2+0xc4>)
 8000f9e:	030e      	lsls	r6, r1, #12
 8000fa0:	004c      	lsls	r4, r1, #1
 8000fa2:	46ab      	mov	fp, r5
 8000fa4:	005d      	lsls	r5, r3, #1
 8000fa6:	4684      	mov	ip, r0
 8000fa8:	0b36      	lsrs	r6, r6, #12
 8000faa:	0d64      	lsrs	r4, r4, #21
 8000fac:	0fc9      	lsrs	r1, r1, #31
 8000fae:	4690      	mov	r8, r2
 8000fb0:	0d6d      	lsrs	r5, r5, #21
 8000fb2:	0fdb      	lsrs	r3, r3, #31
 8000fb4:	42bc      	cmp	r4, r7
 8000fb6:	d02a      	beq.n	800100e <__gedf2+0x82>
 8000fb8:	4f25      	ldr	r7, [pc, #148]	; (8001050 <__gedf2+0xc4>)
 8000fba:	42bd      	cmp	r5, r7
 8000fbc:	d02d      	beq.n	800101a <__gedf2+0x8e>
 8000fbe:	2c00      	cmp	r4, #0
 8000fc0:	d10f      	bne.n	8000fe2 <__gedf2+0x56>
 8000fc2:	4330      	orrs	r0, r6
 8000fc4:	0007      	movs	r7, r0
 8000fc6:	4681      	mov	r9, r0
 8000fc8:	4278      	negs	r0, r7
 8000fca:	4178      	adcs	r0, r7
 8000fcc:	b2c0      	uxtb	r0, r0
 8000fce:	2d00      	cmp	r5, #0
 8000fd0:	d117      	bne.n	8001002 <__gedf2+0x76>
 8000fd2:	465f      	mov	r7, fp
 8000fd4:	433a      	orrs	r2, r7
 8000fd6:	d114      	bne.n	8001002 <__gedf2+0x76>
 8000fd8:	464b      	mov	r3, r9
 8000fda:	2000      	movs	r0, #0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00a      	beq.n	8000ff6 <__gedf2+0x6a>
 8000fe0:	e006      	b.n	8000ff0 <__gedf2+0x64>
 8000fe2:	2d00      	cmp	r5, #0
 8000fe4:	d102      	bne.n	8000fec <__gedf2+0x60>
 8000fe6:	4658      	mov	r0, fp
 8000fe8:	4302      	orrs	r2, r0
 8000fea:	d001      	beq.n	8000ff0 <__gedf2+0x64>
 8000fec:	4299      	cmp	r1, r3
 8000fee:	d018      	beq.n	8001022 <__gedf2+0x96>
 8000ff0:	4248      	negs	r0, r1
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4308      	orrs	r0, r1
 8000ff6:	bc3c      	pop	{r2, r3, r4, r5}
 8000ff8:	4690      	mov	r8, r2
 8000ffa:	4699      	mov	r9, r3
 8000ffc:	46a2      	mov	sl, r4
 8000ffe:	46ab      	mov	fp, r5
 8001000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001002:	2800      	cmp	r0, #0
 8001004:	d0f2      	beq.n	8000fec <__gedf2+0x60>
 8001006:	2001      	movs	r0, #1
 8001008:	3b01      	subs	r3, #1
 800100a:	4318      	orrs	r0, r3
 800100c:	e7f3      	b.n	8000ff6 <__gedf2+0x6a>
 800100e:	0037      	movs	r7, r6
 8001010:	4307      	orrs	r7, r0
 8001012:	d0d1      	beq.n	8000fb8 <__gedf2+0x2c>
 8001014:	2002      	movs	r0, #2
 8001016:	4240      	negs	r0, r0
 8001018:	e7ed      	b.n	8000ff6 <__gedf2+0x6a>
 800101a:	465f      	mov	r7, fp
 800101c:	4317      	orrs	r7, r2
 800101e:	d0ce      	beq.n	8000fbe <__gedf2+0x32>
 8001020:	e7f8      	b.n	8001014 <__gedf2+0x88>
 8001022:	42ac      	cmp	r4, r5
 8001024:	dce4      	bgt.n	8000ff0 <__gedf2+0x64>
 8001026:	da03      	bge.n	8001030 <__gedf2+0xa4>
 8001028:	1e48      	subs	r0, r1, #1
 800102a:	2101      	movs	r1, #1
 800102c:	4308      	orrs	r0, r1
 800102e:	e7e2      	b.n	8000ff6 <__gedf2+0x6a>
 8001030:	455e      	cmp	r6, fp
 8001032:	d8dd      	bhi.n	8000ff0 <__gedf2+0x64>
 8001034:	d006      	beq.n	8001044 <__gedf2+0xb8>
 8001036:	2000      	movs	r0, #0
 8001038:	455e      	cmp	r6, fp
 800103a:	d2dc      	bcs.n	8000ff6 <__gedf2+0x6a>
 800103c:	2301      	movs	r3, #1
 800103e:	1e48      	subs	r0, r1, #1
 8001040:	4318      	orrs	r0, r3
 8001042:	e7d8      	b.n	8000ff6 <__gedf2+0x6a>
 8001044:	45c4      	cmp	ip, r8
 8001046:	d8d3      	bhi.n	8000ff0 <__gedf2+0x64>
 8001048:	2000      	movs	r0, #0
 800104a:	45c4      	cmp	ip, r8
 800104c:	d3f6      	bcc.n	800103c <__gedf2+0xb0>
 800104e:	e7d2      	b.n	8000ff6 <__gedf2+0x6a>
 8001050:	000007ff 	.word	0x000007ff

08001054 <__ledf2>:
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	464e      	mov	r6, r9
 8001058:	4645      	mov	r5, r8
 800105a:	46de      	mov	lr, fp
 800105c:	4657      	mov	r7, sl
 800105e:	005c      	lsls	r4, r3, #1
 8001060:	b5e0      	push	{r5, r6, r7, lr}
 8001062:	031f      	lsls	r7, r3, #12
 8001064:	0fdb      	lsrs	r3, r3, #31
 8001066:	4699      	mov	r9, r3
 8001068:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <__ledf2+0xc0>)
 800106a:	030e      	lsls	r6, r1, #12
 800106c:	004d      	lsls	r5, r1, #1
 800106e:	0fc9      	lsrs	r1, r1, #31
 8001070:	4684      	mov	ip, r0
 8001072:	0b36      	lsrs	r6, r6, #12
 8001074:	0d6d      	lsrs	r5, r5, #21
 8001076:	468b      	mov	fp, r1
 8001078:	4690      	mov	r8, r2
 800107a:	0b3f      	lsrs	r7, r7, #12
 800107c:	0d64      	lsrs	r4, r4, #21
 800107e:	429d      	cmp	r5, r3
 8001080:	d020      	beq.n	80010c4 <__ledf2+0x70>
 8001082:	4b24      	ldr	r3, [pc, #144]	; (8001114 <__ledf2+0xc0>)
 8001084:	429c      	cmp	r4, r3
 8001086:	d022      	beq.n	80010ce <__ledf2+0x7a>
 8001088:	2d00      	cmp	r5, #0
 800108a:	d112      	bne.n	80010b2 <__ledf2+0x5e>
 800108c:	4330      	orrs	r0, r6
 800108e:	4243      	negs	r3, r0
 8001090:	4143      	adcs	r3, r0
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2c00      	cmp	r4, #0
 8001096:	d01f      	beq.n	80010d8 <__ledf2+0x84>
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00c      	beq.n	80010b6 <__ledf2+0x62>
 800109c:	464b      	mov	r3, r9
 800109e:	2001      	movs	r0, #1
 80010a0:	3b01      	subs	r3, #1
 80010a2:	4303      	orrs	r3, r0
 80010a4:	0018      	movs	r0, r3
 80010a6:	bc3c      	pop	{r2, r3, r4, r5}
 80010a8:	4690      	mov	r8, r2
 80010aa:	4699      	mov	r9, r3
 80010ac:	46a2      	mov	sl, r4
 80010ae:	46ab      	mov	fp, r5
 80010b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b2:	2c00      	cmp	r4, #0
 80010b4:	d016      	beq.n	80010e4 <__ledf2+0x90>
 80010b6:	45cb      	cmp	fp, r9
 80010b8:	d017      	beq.n	80010ea <__ledf2+0x96>
 80010ba:	465b      	mov	r3, fp
 80010bc:	4259      	negs	r1, r3
 80010be:	2301      	movs	r3, #1
 80010c0:	430b      	orrs	r3, r1
 80010c2:	e7ef      	b.n	80010a4 <__ledf2+0x50>
 80010c4:	0031      	movs	r1, r6
 80010c6:	2302      	movs	r3, #2
 80010c8:	4301      	orrs	r1, r0
 80010ca:	d1eb      	bne.n	80010a4 <__ledf2+0x50>
 80010cc:	e7d9      	b.n	8001082 <__ledf2+0x2e>
 80010ce:	0039      	movs	r1, r7
 80010d0:	2302      	movs	r3, #2
 80010d2:	4311      	orrs	r1, r2
 80010d4:	d1e6      	bne.n	80010a4 <__ledf2+0x50>
 80010d6:	e7d7      	b.n	8001088 <__ledf2+0x34>
 80010d8:	433a      	orrs	r2, r7
 80010da:	d1dd      	bne.n	8001098 <__ledf2+0x44>
 80010dc:	2300      	movs	r3, #0
 80010de:	2800      	cmp	r0, #0
 80010e0:	d0e0      	beq.n	80010a4 <__ledf2+0x50>
 80010e2:	e7ea      	b.n	80010ba <__ledf2+0x66>
 80010e4:	433a      	orrs	r2, r7
 80010e6:	d1e6      	bne.n	80010b6 <__ledf2+0x62>
 80010e8:	e7e7      	b.n	80010ba <__ledf2+0x66>
 80010ea:	42a5      	cmp	r5, r4
 80010ec:	dce5      	bgt.n	80010ba <__ledf2+0x66>
 80010ee:	db05      	blt.n	80010fc <__ledf2+0xa8>
 80010f0:	42be      	cmp	r6, r7
 80010f2:	d8e2      	bhi.n	80010ba <__ledf2+0x66>
 80010f4:	d007      	beq.n	8001106 <__ledf2+0xb2>
 80010f6:	2300      	movs	r3, #0
 80010f8:	42be      	cmp	r6, r7
 80010fa:	d2d3      	bcs.n	80010a4 <__ledf2+0x50>
 80010fc:	4659      	mov	r1, fp
 80010fe:	2301      	movs	r3, #1
 8001100:	3901      	subs	r1, #1
 8001102:	430b      	orrs	r3, r1
 8001104:	e7ce      	b.n	80010a4 <__ledf2+0x50>
 8001106:	45c4      	cmp	ip, r8
 8001108:	d8d7      	bhi.n	80010ba <__ledf2+0x66>
 800110a:	2300      	movs	r3, #0
 800110c:	45c4      	cmp	ip, r8
 800110e:	d3f5      	bcc.n	80010fc <__ledf2+0xa8>
 8001110:	e7c8      	b.n	80010a4 <__ledf2+0x50>
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	000007ff 	.word	0x000007ff

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b510      	push	{r4, lr}
 800111a:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_InitTick+0x2c>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	21fa      	movs	r1, #250	; 0xfa
 8001122:	0089      	lsls	r1, r1, #2
 8001124:	f7fe fff0 	bl	8000108 <__udivsi3>
 8001128:	f000 fb20 	bl	800176c <HAL_SYSTICK_Config>
 800112c:	2800      	cmp	r0, #0
 800112e:	d001      	beq.n	8001134 <HAL_InitTick+0x1c>
  {
    status = HAL_ERROR;
 8001130:	2001      	movs	r0, #1
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
  }

  /* Return function status */
  return status;
}
 8001132:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	0021      	movs	r1, r4
 8001138:	3801      	subs	r0, #1
 800113a:	f000 fadb 	bl	80016f4 <HAL_NVIC_SetPriority>
  HAL_StatusTypeDef  status = HAL_OK;
 800113e:	2000      	movs	r0, #0
 8001140:	e7f7      	b.n	8001132 <HAL_InitTick+0x1a>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	20000000 	.word	0x20000000

08001148 <HAL_Init>:
{
 8001148:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_Init+0x24>)
 800114c:	6813      	ldr	r3, [r2, #0]
 800114e:	2140      	movs	r1, #64	; 0x40
 8001150:	430b      	orrs	r3, r1
 8001152:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff ffdf 	bl	8001118 <HAL_InitTick>
 800115a:	1e04      	subs	r4, r0, #0
 800115c:	d002      	beq.n	8001164 <HAL_Init+0x1c>
    status = HAL_ERROR;
 800115e:	2401      	movs	r4, #1
}
 8001160:	0020      	movs	r0, r4
 8001162:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8001164:	f001 feec 	bl	8002f40 <HAL_MspInit>
 8001168:	e7fa      	b.n	8001160 <HAL_Init+0x18>
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	40022000 	.word	0x40022000

08001170 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001170:	4a02      	ldr	r2, [pc, #8]	; (800117c <HAL_IncTick+0xc>)
 8001172:	6813      	ldr	r3, [r2, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	4770      	bx	lr
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	20000044 	.word	0x20000044

08001180 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001180:	4b01      	ldr	r3, [pc, #4]	; (8001188 <HAL_GetTick+0x8>)
 8001182:	6818      	ldr	r0, [r3, #0]
}
 8001184:	4770      	bx	lr
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	20000044 	.word	0x20000044

0800118c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800118c:	b510      	push	{r4, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	0004      	movs	r4, r0
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <ADC_DelayMicroSecond+0x28>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <ADC_DelayMicroSecond+0x2c>)
 8001198:	f7fe ffb6 	bl	8000108 <__udivsi3>
 800119c:	4344      	muls	r4, r0
 800119e:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80011a0:	e002      	b.n	80011a8 <ADC_DelayMicroSecond+0x1c>
  {
    waitLoopIndex--;
 80011a2:	9b01      	ldr	r3, [sp, #4]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	9301      	str	r3, [sp, #4]
  while(waitLoopIndex != 0U)
 80011a8:	9b01      	ldr	r3, [sp, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <ADC_DelayMicroSecond+0x16>
  } 
}
 80011ae:	b002      	add	sp, #8
 80011b0:	bd10      	pop	{r4, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	20000000 	.word	0x20000000
 80011b8:	000f4240 	.word	0x000f4240

080011bc <ADC_Enable>:
{
 80011bc:	b570      	push	{r4, r5, r6, lr}
 80011be:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011c0:	6802      	ldr	r2, [r0, #0]
 80011c2:	6891      	ldr	r1, [r2, #8]
 80011c4:	2303      	movs	r3, #3
 80011c6:	400b      	ands	r3, r1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d010      	beq.n	80011ee <ADC_Enable+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d133      	bne.n	800123a <ADC_Enable+0x7e>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80011d2:	6891      	ldr	r1, [r2, #8]
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <ADC_Enable+0x84>)
 80011d6:	4219      	tst	r1, r3
 80011d8:	d010      	beq.n	80011fc <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011dc:	2210      	movs	r2, #16
 80011de:	4313      	orrs	r3, r2
 80011e0:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011e4:	3a0f      	subs	r2, #15
 80011e6:	4313      	orrs	r3, r2
 80011e8:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80011ea:	2001      	movs	r0, #1
 80011ec:	e026      	b.n	800123c <ADC_Enable+0x80>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011ee:	6813      	ldr	r3, [r2, #0]
 80011f0:	07db      	lsls	r3, r3, #31
 80011f2:	d401      	bmi.n	80011f8 <ADC_Enable+0x3c>
 80011f4:	2300      	movs	r3, #0
 80011f6:	e7ea      	b.n	80011ce <ADC_Enable+0x12>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e7e8      	b.n	80011ce <ADC_Enable+0x12>
    __HAL_ADC_ENABLE(hadc);
 80011fc:	6893      	ldr	r3, [r2, #8]
 80011fe:	2101      	movs	r1, #1
 8001200:	430b      	orrs	r3, r1
 8001202:	6093      	str	r3, [r2, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff ffc1 	bl	800118c <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 800120a:	f7ff ffb9 	bl	8001180 <HAL_GetTick>
 800120e:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	07db      	lsls	r3, r3, #31
 8001216:	d40e      	bmi.n	8001236 <ADC_Enable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001218:	f7ff ffb2 	bl	8001180 <HAL_GetTick>
 800121c:	1b40      	subs	r0, r0, r5
 800121e:	280a      	cmp	r0, #10
 8001220:	d9f6      	bls.n	8001210 <ADC_Enable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001222:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001224:	2210      	movs	r2, #16
 8001226:	4313      	orrs	r3, r2
 8001228:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800122c:	3a0f      	subs	r2, #15
 800122e:	4313      	orrs	r3, r2
 8001230:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8001232:	2001      	movs	r0, #1
 8001234:	e002      	b.n	800123c <ADC_Enable+0x80>
  return HAL_OK;
 8001236:	2000      	movs	r0, #0
 8001238:	e000      	b.n	800123c <ADC_Enable+0x80>
 800123a:	2000      	movs	r0, #0
}
 800123c:	bd70      	pop	{r4, r5, r6, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	80000017 	.word	0x80000017

08001244 <HAL_ADC_Init>:
{
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8001248:	d100      	bne.n	800124c <HAL_ADC_Init+0x8>
 800124a:	e0e6      	b.n	800141a <HAL_ADC_Init+0x1d6>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800124c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800124e:	2b00      	cmp	r3, #0
 8001250:	d031      	beq.n	80012b6 <HAL_ADC_Init+0x72>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001252:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001254:	06db      	lsls	r3, r3, #27
 8001256:	d434      	bmi.n	80012c2 <HAL_ADC_Init+0x7e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001258:	6821      	ldr	r1, [r4, #0]
 800125a:	688b      	ldr	r3, [r1, #8]
 800125c:	2204      	movs	r2, #4
 800125e:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001260:	d12f      	bne.n	80012c2 <HAL_ADC_Init+0x7e>
  ADC_STATE_CLR_SET(hadc->State,
 8001262:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001264:	486e      	ldr	r0, [pc, #440]	; (8001420 <HAL_ADC_Init+0x1dc>)
 8001266:	4002      	ands	r2, r0
 8001268:	3006      	adds	r0, #6
 800126a:	30ff      	adds	r0, #255	; 0xff
 800126c:	4302      	orrs	r2, r0
 800126e:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001270:	6888      	ldr	r0, [r1, #8]
 8001272:	2203      	movs	r2, #3
 8001274:	4002      	ands	r2, r0
 8001276:	2a01      	cmp	r2, #1
 8001278:	d02c      	beq.n	80012d4 <HAL_ADC_Init+0x90>
 800127a:	2200      	movs	r2, #0
 800127c:	2a00      	cmp	r2, #0
 800127e:	d143      	bne.n	8001308 <HAL_ADC_Init+0xc4>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001280:	6862      	ldr	r2, [r4, #4]
 8001282:	20c0      	movs	r0, #192	; 0xc0
 8001284:	0600      	lsls	r0, r0, #24
 8001286:	4282      	cmp	r2, r0
 8001288:	d02b      	beq.n	80012e2 <HAL_ADC_Init+0x9e>
 800128a:	2080      	movs	r0, #128	; 0x80
 800128c:	05c0      	lsls	r0, r0, #23
 800128e:	4282      	cmp	r2, r0
 8001290:	d027      	beq.n	80012e2 <HAL_ADC_Init+0x9e>
 8001292:	2080      	movs	r0, #128	; 0x80
 8001294:	0600      	lsls	r0, r0, #24
 8001296:	4282      	cmp	r2, r0
 8001298:	d023      	beq.n	80012e2 <HAL_ADC_Init+0x9e>
 800129a:	690a      	ldr	r2, [r1, #16]
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	0892      	lsrs	r2, r2, #2
 80012a0:	610a      	str	r2, [r1, #16]
 80012a2:	4a60      	ldr	r2, [pc, #384]	; (8001424 <HAL_ADC_Init+0x1e0>)
 80012a4:	6811      	ldr	r1, [r2, #0]
 80012a6:	4860      	ldr	r0, [pc, #384]	; (8001428 <HAL_ADC_Init+0x1e4>)
 80012a8:	4001      	ands	r1, r0
 80012aa:	6011      	str	r1, [r2, #0]
 80012ac:	6811      	ldr	r1, [r2, #0]
 80012ae:	6860      	ldr	r0, [r4, #4]
 80012b0:	4301      	orrs	r1, r0
 80012b2:	6011      	str	r1, [r2, #0]
 80012b4:	e01e      	b.n	80012f4 <HAL_ADC_Init+0xb0>
    ADC_CLEAR_ERRORCODE(hadc);
 80012b6:	6583      	str	r3, [r0, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80012b8:	2250      	movs	r2, #80	; 0x50
 80012ba:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80012bc:	f001 fcec 	bl	8002c98 <HAL_ADC_MspInit>
 80012c0:	e7c7      	b.n	8001252 <HAL_ADC_Init+0xe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012c4:	2210      	movs	r2, #16
 80012c6:	4313      	orrs	r3, r2
 80012c8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2350      	movs	r3, #80	; 0x50
 80012ce:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
}
 80012d2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012d4:	680a      	ldr	r2, [r1, #0]
 80012d6:	07d2      	lsls	r2, r2, #31
 80012d8:	d401      	bmi.n	80012de <HAL_ADC_Init+0x9a>
 80012da:	2200      	movs	r2, #0
 80012dc:	e7ce      	b.n	800127c <HAL_ADC_Init+0x38>
 80012de:	2201      	movs	r2, #1
 80012e0:	e7cc      	b.n	800127c <HAL_ADC_Init+0x38>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80012e2:	690a      	ldr	r2, [r1, #16]
 80012e4:	0092      	lsls	r2, r2, #2
 80012e6:	0892      	lsrs	r2, r2, #2
 80012e8:	610a      	str	r2, [r1, #16]
 80012ea:	6821      	ldr	r1, [r4, #0]
 80012ec:	690a      	ldr	r2, [r1, #16]
 80012ee:	6860      	ldr	r0, [r4, #4]
 80012f0:	4302      	orrs	r2, r0
 80012f2:	610a      	str	r2, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80012f4:	6821      	ldr	r1, [r4, #0]
 80012f6:	68ca      	ldr	r2, [r1, #12]
 80012f8:	2018      	movs	r0, #24
 80012fa:	4382      	bics	r2, r0
 80012fc:	60ca      	str	r2, [r1, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80012fe:	6821      	ldr	r1, [r4, #0]
 8001300:	68ca      	ldr	r2, [r1, #12]
 8001302:	68a0      	ldr	r0, [r4, #8]
 8001304:	4302      	orrs	r2, r0
 8001306:	60ca      	str	r2, [r1, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001308:	4a46      	ldr	r2, [pc, #280]	; (8001424 <HAL_ADC_Init+0x1e0>)
 800130a:	6811      	ldr	r1, [r2, #0]
 800130c:	4847      	ldr	r0, [pc, #284]	; (800142c <HAL_ADC_Init+0x1e8>)
 800130e:	4001      	ands	r1, r0
 8001310:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001312:	6811      	ldr	r1, [r2, #0]
 8001314:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001316:	0640      	lsls	r0, r0, #25
 8001318:	4301      	orrs	r1, r0
 800131a:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800131c:	6822      	ldr	r2, [r4, #0]
 800131e:	6891      	ldr	r1, [r2, #8]
 8001320:	00c9      	lsls	r1, r1, #3
 8001322:	d404      	bmi.n	800132e <HAL_ADC_Init+0xea>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001324:	6890      	ldr	r0, [r2, #8]
 8001326:	2180      	movs	r1, #128	; 0x80
 8001328:	0549      	lsls	r1, r1, #21
 800132a:	4301      	orrs	r1, r0
 800132c:	6091      	str	r1, [r2, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800132e:	6821      	ldr	r1, [r4, #0]
 8001330:	68ca      	ldr	r2, [r1, #12]
 8001332:	483f      	ldr	r0, [pc, #252]	; (8001430 <HAL_ADC_Init+0x1ec>)
 8001334:	4002      	ands	r2, r0
 8001336:	60ca      	str	r2, [r1, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001338:	6820      	ldr	r0, [r4, #0]
 800133a:	68c2      	ldr	r2, [r0, #12]
 800133c:	68e1      	ldr	r1, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800133e:	6925      	ldr	r5, [r4, #16]
 8001340:	2d02      	cmp	r5, #2
 8001342:	d040      	beq.n	80013c6 <HAL_ADC_Init+0x182>
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001344:	430b      	orrs	r3, r1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001346:	2120      	movs	r1, #32
 8001348:	5c61      	ldrb	r1, [r4, r1]
 800134a:	0349      	lsls	r1, r1, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800134c:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800134e:	212c      	movs	r1, #44	; 0x2c
 8001350:	5c61      	ldrb	r1, [r4, r1]
 8001352:	0049      	lsls	r1, r1, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001354:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001356:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001358:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800135a:	69a1      	ldr	r1, [r4, #24]
 800135c:	0389      	lsls	r1, r1, #14
                            hadc->Init.Overrun                               |
 800135e:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001360:	69e1      	ldr	r1, [r4, #28]
 8001362:	03c9      	lsls	r1, r1, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001364:	430b      	orrs	r3, r1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001366:	4313      	orrs	r3, r2
 8001368:	60c3      	str	r3, [r0, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800136a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800136c:	22c2      	movs	r2, #194	; 0xc2
 800136e:	32ff      	adds	r2, #255	; 0xff
 8001370:	4293      	cmp	r3, r2
 8001372:	d005      	beq.n	8001380 <HAL_ADC_Init+0x13c>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001374:	6821      	ldr	r1, [r4, #0]
 8001376:	68ca      	ldr	r2, [r1, #12]
 8001378:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800137a:	4303      	orrs	r3, r0
 800137c:	4313      	orrs	r3, r2
 800137e:	60cb      	str	r3, [r1, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001380:	2321      	movs	r3, #33	; 0x21
 8001382:	5ce3      	ldrb	r3, [r4, r3]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d020      	beq.n	80013ca <HAL_ADC_Init+0x186>
  if (hadc->Init.OversamplingMode == ENABLE)
 8001388:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800138a:	2b01      	cmp	r3, #1
 800138c:	d031      	beq.n	80013f2 <HAL_ADC_Init+0x1ae>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	07d2      	lsls	r2, r2, #31
 8001394:	d503      	bpl.n	800139e <HAL_ADC_Init+0x15a>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	2101      	movs	r1, #1
 800139a:	438a      	bics	r2, r1
 800139c:	611a      	str	r2, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800139e:	6822      	ldr	r2, [r4, #0]
 80013a0:	6953      	ldr	r3, [r2, #20]
 80013a2:	2107      	movs	r1, #7
 80013a4:	438b      	bics	r3, r1
 80013a6:	6153      	str	r3, [r2, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80013a8:	6822      	ldr	r2, [r4, #0]
 80013aa:	6953      	ldr	r3, [r2, #20]
 80013ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80013ae:	430b      	orrs	r3, r1
 80013b0:	6153      	str	r3, [r2, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80013b2:	2300      	movs	r3, #0
 80013b4:	65a3      	str	r3, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80013b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013b8:	2203      	movs	r2, #3
 80013ba:	4393      	bics	r3, r2
 80013bc:	3a02      	subs	r2, #2
 80013be:	4313      	orrs	r3, r2
 80013c0:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80013c2:	2000      	movs	r0, #0
 80013c4:	e785      	b.n	80012d2 <HAL_ADC_Init+0x8e>
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80013c6:	2304      	movs	r3, #4
 80013c8:	e7bc      	b.n	8001344 <HAL_ADC_Init+0x100>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80013ca:	331f      	adds	r3, #31
 80013cc:	5ce3      	ldrb	r3, [r4, r3]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <HAL_ADC_Init+0x19c>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80013d2:	6822      	ldr	r2, [r4, #0]
 80013d4:	68d1      	ldr	r1, [r2, #12]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	025b      	lsls	r3, r3, #9
 80013da:	430b      	orrs	r3, r1
 80013dc:	60d3      	str	r3, [r2, #12]
 80013de:	e7d3      	b.n	8001388 <HAL_ADC_Init+0x144>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013e2:	2220      	movs	r2, #32
 80013e4:	4313      	orrs	r3, r2
 80013e6:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013ea:	3a1f      	subs	r2, #31
 80013ec:	4313      	orrs	r3, r2
 80013ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80013f0:	e7ca      	b.n	8001388 <HAL_ADC_Init+0x144>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80013f2:	6822      	ldr	r2, [r4, #0]
 80013f4:	6913      	ldr	r3, [r2, #16]
 80013f6:	490f      	ldr	r1, [pc, #60]	; (8001434 <HAL_ADC_Init+0x1f0>)
 80013f8:	400b      	ands	r3, r1
 80013fa:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013fc:	6821      	ldr	r1, [r4, #0]
 80013fe:	690a      	ldr	r2, [r1, #16]
 8001400:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001402:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001404:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 8001406:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001408:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800140a:	4313      	orrs	r3, r2
 800140c:	610b      	str	r3, [r1, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800140e:	6822      	ldr	r2, [r4, #0]
 8001410:	6913      	ldr	r3, [r2, #16]
 8001412:	2101      	movs	r1, #1
 8001414:	430b      	orrs	r3, r1
 8001416:	6113      	str	r3, [r2, #16]
 8001418:	e7c1      	b.n	800139e <HAL_ADC_Init+0x15a>
    return HAL_ERROR;
 800141a:	2001      	movs	r0, #1
 800141c:	e759      	b.n	80012d2 <HAL_ADC_Init+0x8e>
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	fffffefd 	.word	0xfffffefd
 8001424:	40012708 	.word	0x40012708
 8001428:	ffc3ffff 	.word	0xffc3ffff
 800142c:	fdffffff 	.word	0xfdffffff
 8001430:	fffe0219 	.word	0xfffe0219
 8001434:	fffffc03 	.word	0xfffffc03

08001438 <HAL_ADC_Start_DMA>:
{
 8001438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143a:	0004      	movs	r4, r0
 800143c:	000e      	movs	r6, r1
 800143e:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001440:	6803      	ldr	r3, [r0, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	075b      	lsls	r3, r3, #29
 8001446:	d502      	bpl.n	800144e <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_BUSY;
 8001448:	2502      	movs	r5, #2
}
 800144a:	0028      	movs	r0, r5
 800144c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800144e:	2350      	movs	r3, #80	; 0x50
 8001450:	5cc3      	ldrb	r3, [r0, r3]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d03a      	beq.n	80014cc <HAL_ADC_Start_DMA+0x94>
 8001456:	2201      	movs	r2, #1
 8001458:	2350      	movs	r3, #80	; 0x50
 800145a:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800145c:	69c3      	ldr	r3, [r0, #28]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d032      	beq.n	80014c8 <HAL_ADC_Start_DMA+0x90>
      tmp_hal_status = ADC_Enable(hadc);
 8001462:	f7ff feab 	bl	80011bc <ADC_Enable>
 8001466:	0005      	movs	r5, r0
    if (tmp_hal_status == HAL_OK)
 8001468:	2d00      	cmp	r5, #0
 800146a:	d1ee      	bne.n	800144a <HAL_ADC_Start_DMA+0x12>
      ADC_STATE_CLR_SET(hadc->State,
 800146c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800146e:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <HAL_ADC_Start_DMA+0x98>)
 8001470:	401a      	ands	r2, r3
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4313      	orrs	r3, r2
 8001478:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 800147a:	2300      	movs	r3, #0
 800147c:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800147e:	2250      	movs	r2, #80	; 0x50
 8001480:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001482:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001484:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <HAL_ADC_Start_DMA+0x9c>)
 8001486:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001488:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800148a:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_ADC_Start_DMA+0xa0>)
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800148e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <HAL_ADC_Start_DMA+0xa4>)
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	221c      	movs	r2, #28
 8001498:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800149a:	6822      	ldr	r2, [r4, #0]
 800149c:	6853      	ldr	r3, [r2, #4]
 800149e:	2110      	movs	r1, #16
 80014a0:	430b      	orrs	r3, r1
 80014a2:	6053      	str	r3, [r2, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80014a4:	6822      	ldr	r2, [r4, #0]
 80014a6:	68d3      	ldr	r3, [r2, #12]
 80014a8:	390f      	subs	r1, #15
 80014aa:	430b      	orrs	r3, r1
 80014ac:	60d3      	str	r3, [r2, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014ae:	6821      	ldr	r1, [r4, #0]
 80014b0:	3140      	adds	r1, #64	; 0x40
 80014b2:	003b      	movs	r3, r7
 80014b4:	0032      	movs	r2, r6
 80014b6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80014b8:	f000 f9d8 	bl	800186c <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80014bc:	6822      	ldr	r2, [r4, #0]
 80014be:	6893      	ldr	r3, [r2, #8]
 80014c0:	2104      	movs	r1, #4
 80014c2:	430b      	orrs	r3, r1
 80014c4:	6093      	str	r3, [r2, #8]
 80014c6:	e7c0      	b.n	800144a <HAL_ADC_Start_DMA+0x12>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c8:	2500      	movs	r5, #0
 80014ca:	e7cd      	b.n	8001468 <HAL_ADC_Start_DMA+0x30>
    __HAL_LOCK(hadc);
 80014cc:	2502      	movs	r5, #2
 80014ce:	e7bc      	b.n	800144a <HAL_ADC_Start_DMA+0x12>
 80014d0:	fffff0fe 	.word	0xfffff0fe
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	0800155b 	.word	0x0800155b
 80014dc:	08001567 	.word	0x08001567

080014e0 <HAL_ADC_ConvCpltCallback>:
}
 80014e0:	4770      	bx	lr
	...

080014e4 <ADC_DMAConvCplt>:
{
 80014e4:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014ea:	2150      	movs	r1, #80	; 0x50
 80014ec:	4211      	tst	r1, r2
 80014ee:	d12c      	bne.n	800154a <ADC_DMAConvCplt+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	0092      	lsls	r2, r2, #2
 80014f6:	430a      	orrs	r2, r1
 80014f8:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68d0      	ldr	r0, [r2, #12]
 80014fe:	21c0      	movs	r1, #192	; 0xc0
 8001500:	0109      	lsls	r1, r1, #4
 8001502:	4208      	tst	r0, r1
 8001504:	d114      	bne.n	8001530 <ADC_DMAConvCplt+0x4c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001506:	2120      	movs	r1, #32
 8001508:	5c59      	ldrb	r1, [r3, r1]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800150a:	2900      	cmp	r1, #0
 800150c:	d110      	bne.n	8001530 <ADC_DMAConvCplt+0x4c>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800150e:	6811      	ldr	r1, [r2, #0]
 8001510:	0709      	lsls	r1, r1, #28
 8001512:	d50d      	bpl.n	8001530 <ADC_DMAConvCplt+0x4c>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001514:	6891      	ldr	r1, [r2, #8]
 8001516:	0749      	lsls	r1, r1, #29
 8001518:	d40e      	bmi.n	8001538 <ADC_DMAConvCplt+0x54>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800151a:	6851      	ldr	r1, [r2, #4]
 800151c:	200c      	movs	r0, #12
 800151e:	4381      	bics	r1, r0
 8001520:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001522:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001524:	490b      	ldr	r1, [pc, #44]	; (8001554 <ADC_DMAConvCplt+0x70>)
 8001526:	400a      	ands	r2, r1
 8001528:	3104      	adds	r1, #4
 800152a:	31ff      	adds	r1, #255	; 0xff
 800152c:	430a      	orrs	r2, r1
 800152e:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff ffd5 	bl	80014e0 <HAL_ADC_ConvCpltCallback>
}
 8001536:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800153a:	2120      	movs	r1, #32
 800153c:	430a      	orrs	r2, r1
 800153e:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001540:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001542:	391f      	subs	r1, #31
 8001544:	430a      	orrs	r2, r1
 8001546:	659a      	str	r2, [r3, #88]	; 0x58
 8001548:	e7f2      	b.n	8001530 <ADC_DMAConvCplt+0x4c>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154e:	4798      	blx	r3
}
 8001550:	e7f1      	b.n	8001536 <ADC_DMAConvCplt+0x52>
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	fffffefe 	.word	0xfffffefe

08001558 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001558:	4770      	bx	lr

0800155a <ADC_DMAHalfConvCplt>:
{
 800155a:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800155c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800155e:	f7ff fffb 	bl	8001558 <HAL_ADC_ConvHalfCpltCallback>
}
 8001562:	bd10      	pop	{r4, pc}

08001564 <HAL_ADC_ErrorCallback>:
}
 8001564:	4770      	bx	lr

08001566 <ADC_DMAError>:
{
 8001566:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001568:	6a80      	ldr	r0, [r0, #40]	; 0x28
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800156a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	4313      	orrs	r3, r2
 8001570:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001572:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001574:	3a3c      	subs	r2, #60	; 0x3c
 8001576:	4313      	orrs	r3, r2
 8001578:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 800157a:	f7ff fff3 	bl	8001564 <HAL_ADC_ErrorCallback>
}
 800157e:	bd10      	pop	{r4, pc}

08001580 <HAL_ADC_ConfigChannel>:
{
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	0004      	movs	r4, r0
 8001584:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8001586:	2350      	movs	r3, #80	; 0x50
 8001588:	5cc3      	ldrb	r3, [r0, r3]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d04b      	beq.n	8001626 <HAL_ADC_ConfigChannel+0xa6>
 800158e:	2201      	movs	r2, #1
 8001590:	2350      	movs	r3, #80	; 0x50
 8001592:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001594:	6803      	ldr	r3, [r0, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	0752      	lsls	r2, r2, #29
 800159a:	d41a      	bmi.n	80015d2 <HAL_ADC_ConfigChannel+0x52>
  if (sConfig->Rank != ADC_RANK_NONE)
 800159c:	4a23      	ldr	r2, [pc, #140]	; (800162c <HAL_ADC_ConfigChannel+0xac>)
 800159e:	6849      	ldr	r1, [r1, #4]
 80015a0:	4291      	cmp	r1, r2
 80015a2:	d029      	beq.n	80015f8 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80015a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015a6:	682a      	ldr	r2, [r5, #0]
 80015a8:	0352      	lsls	r2, r2, #13
 80015aa:	0b52      	lsrs	r2, r2, #13
 80015ac:	430a      	orrs	r2, r1
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80015b0:	682b      	ldr	r3, [r5, #0]
 80015b2:	035b      	lsls	r3, r3, #13
 80015b4:	d416      	bmi.n	80015e4 <HAL_ADC_ConfigChannel+0x64>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80015b6:	682b      	ldr	r3, [r5, #0]
 80015b8:	039b      	lsls	r3, r3, #14
 80015ba:	d505      	bpl.n	80015c8 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_ADC_ConfigChannel+0xb0>)
 80015be:	6811      	ldr	r1, [r2, #0]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	03db      	lsls	r3, r3, #15
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2350      	movs	r3, #80	; 0x50
 80015cc:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80015ce:	2000      	movs	r0, #0
 80015d0:	e02a      	b.n	8001628 <HAL_ADC_ConfigChannel+0xa8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80015d4:	2220      	movs	r2, #32
 80015d6:	4313      	orrs	r3, r2
 80015d8:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80015da:	2200      	movs	r2, #0
 80015dc:	2350      	movs	r3, #80	; 0x50
 80015de:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80015e0:	2001      	movs	r0, #1
 80015e2:	e021      	b.n	8001628 <HAL_ADC_ConfigChannel+0xa8>
      ADC->CCR |= ADC_CCR_TSEN;   
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_ADC_ConfigChannel+0xb0>)
 80015e6:	6811      	ldr	r1, [r2, #0]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	041b      	lsls	r3, r3, #16
 80015ec:	430b      	orrs	r3, r1
 80015ee:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80015f0:	200a      	movs	r0, #10
 80015f2:	f7ff fdcb 	bl	800118c <ADC_DelayMicroSecond>
 80015f6:	e7de      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x36>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80015f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015fa:	682a      	ldr	r2, [r5, #0]
 80015fc:	0352      	lsls	r2, r2, #13
 80015fe:	0b52      	lsrs	r2, r2, #13
 8001600:	4391      	bics	r1, r2
 8001602:	6299      	str	r1, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	035b      	lsls	r3, r3, #13
 8001608:	d504      	bpl.n	8001614 <HAL_ADC_ConfigChannel+0x94>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_ADC_ConfigChannel+0xb0>)
 800160c:	6813      	ldr	r3, [r2, #0]
 800160e:	4909      	ldr	r1, [pc, #36]	; (8001634 <HAL_ADC_ConfigChannel+0xb4>)
 8001610:	400b      	ands	r3, r1
 8001612:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001614:	682b      	ldr	r3, [r5, #0]
 8001616:	039b      	lsls	r3, r3, #14
 8001618:	d5d6      	bpl.n	80015c8 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <HAL_ADC_ConfigChannel+0xb0>)
 800161c:	6813      	ldr	r3, [r2, #0]
 800161e:	4906      	ldr	r1, [pc, #24]	; (8001638 <HAL_ADC_ConfigChannel+0xb8>)
 8001620:	400b      	ands	r3, r1
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e7d0      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8001626:	2002      	movs	r0, #2
}
 8001628:	bd70      	pop	{r4, r5, r6, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	00001001 	.word	0x00001001
 8001630:	40012708 	.word	0x40012708
 8001634:	ff7fffff 	.word	0xff7fffff
 8001638:	ffbfffff 	.word	0xffbfffff

0800163c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800163c:	b570      	push	{r4, r5, r6, lr}
 800163e:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001640:	2350      	movs	r3, #80	; 0x50
 8001642:	5cc3      	ldrb	r3, [r0, r3]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d050      	beq.n	80016ea <HAL_ADCEx_Calibration_Start+0xae>
 8001648:	2201      	movs	r2, #1
 800164a:	2350      	movs	r3, #80	; 0x50
 800164c:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800164e:	6802      	ldr	r2, [r0, #0]
 8001650:	6891      	ldr	r1, [r2, #8]
 8001652:	3b4d      	subs	r3, #77	; 0x4d
 8001654:	400b      	ands	r3, r1
 8001656:	2b01      	cmp	r3, #1
 8001658:	d00b      	beq.n	8001672 <HAL_ADCEx_Calibration_Start+0x36>
 800165a:	2300      	movs	r3, #0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00f      	beq.n	8001680 <HAL_ADCEx_Calibration_Start+0x44>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001660:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001662:	2220      	movs	r2, #32
 8001664:	4313      	orrs	r3, r2
 8001666:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8001668:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800166a:	2200      	movs	r2, #0
 800166c:	2350      	movs	r3, #80	; 0x50
 800166e:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001670:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001672:	6813      	ldr	r3, [r2, #0]
 8001674:	07db      	lsls	r3, r3, #31
 8001676:	d401      	bmi.n	800167c <HAL_ADCEx_Calibration_Start+0x40>
 8001678:	2300      	movs	r3, #0
 800167a:	e7ef      	b.n	800165c <HAL_ADCEx_Calibration_Start+0x20>
 800167c:	2301      	movs	r3, #1
 800167e:	e7ed      	b.n	800165c <HAL_ADCEx_Calibration_Start+0x20>
    ADC_STATE_CLR_SET(hadc->State, 
 8001680:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001682:	491b      	ldr	r1, [pc, #108]	; (80016f0 <HAL_ADCEx_Calibration_Start+0xb4>)
 8001684:	400b      	ands	r3, r1
 8001686:	3106      	adds	r1, #6
 8001688:	31ff      	adds	r1, #255	; 0xff
 800168a:	430b      	orrs	r3, r1
 800168c:	6563      	str	r3, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800168e:	68d6      	ldr	r6, [r2, #12]
 8001690:	3101      	adds	r1, #1
 8001692:	400e      	ands	r6, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001694:	68d3      	ldr	r3, [r2, #12]
 8001696:	438b      	bics	r3, r1
 8001698:	60d3      	str	r3, [r2, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	6891      	ldr	r1, [r2, #8]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	061b      	lsls	r3, r3, #24
 80016a2:	430b      	orrs	r3, r1
 80016a4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80016a6:	f7ff fd6b 	bl	8001180 <HAL_GetTick>
 80016aa:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	2a00      	cmp	r2, #0
 80016b2:	da0f      	bge.n	80016d4 <HAL_ADCEx_Calibration_Start+0x98>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80016b4:	f7ff fd64 	bl	8001180 <HAL_GetTick>
 80016b8:	1b40      	subs	r0, r0, r5
 80016ba:	280a      	cmp	r0, #10
 80016bc:	d9f6      	bls.n	80016ac <HAL_ADCEx_Calibration_Start+0x70>
        ADC_STATE_CLR_SET(hadc->State,
 80016be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016c0:	2212      	movs	r2, #18
 80016c2:	4393      	bics	r3, r2
 80016c4:	3a02      	subs	r2, #2
 80016c6:	4313      	orrs	r3, r2
 80016c8:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2350      	movs	r3, #80	; 0x50
 80016ce:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 80016d0:	2001      	movs	r0, #1
 80016d2:	e7cd      	b.n	8001670 <HAL_ADCEx_Calibration_Start+0x34>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	4316      	orrs	r6, r2
 80016d8:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80016da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80016dc:	2203      	movs	r2, #3
 80016de:	4393      	bics	r3, r2
 80016e0:	3a02      	subs	r2, #2
 80016e2:	4313      	orrs	r3, r2
 80016e4:	6563      	str	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e6:	2000      	movs	r0, #0
 80016e8:	e7bf      	b.n	800166a <HAL_ADCEx_Calibration_Start+0x2e>
  __HAL_LOCK(hadc);
 80016ea:	2002      	movs	r0, #2
 80016ec:	e7c0      	b.n	8001670 <HAL_ADCEx_Calibration_Start+0x34>
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	fffffefd 	.word	0xfffffefd

080016f4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f4:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80016f6:	2800      	cmp	r0, #0
 80016f8:	db11      	blt.n	800171e <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016fa:	0883      	lsrs	r3, r0, #2
 80016fc:	4d14      	ldr	r5, [pc, #80]	; (8001750 <HAL_NVIC_SetPriority+0x5c>)
 80016fe:	33c0      	adds	r3, #192	; 0xc0
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	595c      	ldr	r4, [r3, r5]
 8001704:	2203      	movs	r2, #3
 8001706:	4010      	ands	r0, r2
 8001708:	00c0      	lsls	r0, r0, #3
 800170a:	32fc      	adds	r2, #252	; 0xfc
 800170c:	0016      	movs	r6, r2
 800170e:	4086      	lsls	r6, r0
 8001710:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001712:	0189      	lsls	r1, r1, #6
 8001714:	400a      	ands	r2, r1
 8001716:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001718:	4322      	orrs	r2, r4
 800171a:	515a      	str	r2, [r3, r5]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800171c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800171e:	b2c0      	uxtb	r0, r0
 8001720:	230f      	movs	r3, #15
 8001722:	4003      	ands	r3, r0
 8001724:	3b08      	subs	r3, #8
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3306      	adds	r3, #6
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4a09      	ldr	r2, [pc, #36]	; (8001754 <HAL_NVIC_SetPriority+0x60>)
 800172e:	4694      	mov	ip, r2
 8001730:	4463      	add	r3, ip
 8001732:	685d      	ldr	r5, [r3, #4]
 8001734:	2203      	movs	r2, #3
 8001736:	4010      	ands	r0, r2
 8001738:	00c0      	lsls	r0, r0, #3
 800173a:	24ff      	movs	r4, #255	; 0xff
 800173c:	0022      	movs	r2, r4
 800173e:	4082      	lsls	r2, r0
 8001740:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001742:	0189      	lsls	r1, r1, #6
 8001744:	400c      	ands	r4, r1
 8001746:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001748:	432c      	orrs	r4, r5
 800174a:	605c      	str	r4, [r3, #4]
 800174c:	e7e6      	b.n	800171c <HAL_NVIC_SetPriority+0x28>
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001758:	231f      	movs	r3, #31
 800175a:	4018      	ands	r0, r3
 800175c:	3b1e      	subs	r3, #30
 800175e:	4083      	lsls	r3, r0
 8001760:	4a01      	ldr	r2, [pc, #4]	; (8001768 <HAL_NVIC_EnableIRQ+0x10>)
 8001762:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001764:	4770      	bx	lr
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	e000e100 	.word	0xe000e100

0800176c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	3801      	subs	r0, #1
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_SYSTICK_Config+0x2c>)
 8001770:	4298      	cmp	r0, r3
 8001772:	d80f      	bhi.n	8001794 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001774:	4a09      	ldr	r2, [pc, #36]	; (800179c <HAL_SYSTICK_Config+0x30>)
 8001776:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001778:	4809      	ldr	r0, [pc, #36]	; (80017a0 <HAL_SYSTICK_Config+0x34>)
 800177a:	6a03      	ldr	r3, [r0, #32]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	21c0      	movs	r1, #192	; 0xc0
 8001782:	0609      	lsls	r1, r1, #24
 8001784:	430b      	orrs	r3, r1
 8001786:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	2300      	movs	r3, #0
 800178a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178c:	3307      	adds	r3, #7
 800178e:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001792:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001794:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001796:	e7fc      	b.n	8001792 <HAL_SYSTICK_Config+0x26>
 8001798:	00ffffff 	.word	0x00ffffff
 800179c:	e000e010 	.word	0xe000e010
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a4:	b570      	push	{r4, r5, r6, lr}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017a6:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80017a8:	251c      	movs	r5, #28
 80017aa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80017ac:	4025      	ands	r5, r4
 80017ae:	2401      	movs	r4, #1
 80017b0:	40ac      	lsls	r4, r5
 80017b2:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017b4:	6804      	ldr	r4, [r0, #0]
 80017b6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017b8:	6883      	ldr	r3, [r0, #8]
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d004      	beq.n	80017c8 <DMA_SetConfig+0x24>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80017be:	6803      	ldr	r3, [r0, #0]
 80017c0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80017c2:	6803      	ldr	r3, [r0, #0]
 80017c4:	60da      	str	r2, [r3, #12]
  }
}
 80017c6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 80017c8:	6803      	ldr	r3, [r0, #0]
 80017ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80017cc:	6803      	ldr	r3, [r0, #0]
 80017ce:	60d9      	str	r1, [r3, #12]
 80017d0:	e7f9      	b.n	80017c6 <DMA_SetConfig+0x22>
	...

080017d4 <HAL_DMA_Init>:
{
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	1e04      	subs	r4, r0, #0
  if(hdma == NULL)
 80017d8:	d03d      	beq.n	8001856 <HAL_DMA_Init+0x82>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017da:	6805      	ldr	r5, [r0, #0]
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <HAL_DMA_Init+0x88>)
 80017de:	18e8      	adds	r0, r5, r3
 80017e0:	2114      	movs	r1, #20
 80017e2:	f7fe fc91 	bl	8000108 <__udivsi3>
 80017e6:	0080      	lsls	r0, r0, #2
 80017e8:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_DMA_Init+0x8c>)
 80017ec:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80017ee:	2202      	movs	r2, #2
 80017f0:	2325      	movs	r3, #37	; 0x25
 80017f2:	54e2      	strb	r2, [r4, r3]
  tmp = hdma->Instance->CCR;
 80017f4:	682b      	ldr	r3, [r5, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017f6:	4a1b      	ldr	r2, [pc, #108]	; (8001864 <HAL_DMA_Init+0x90>)
 80017f8:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80017fa:	68a3      	ldr	r3, [r4, #8]
 80017fc:	68e1      	ldr	r1, [r4, #12]
 80017fe:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001800:	6921      	ldr	r1, [r4, #16]
 8001802:	430b      	orrs	r3, r1
 8001804:	6961      	ldr	r1, [r4, #20]
 8001806:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001808:	69a1      	ldr	r1, [r4, #24]
 800180a:	430b      	orrs	r3, r1
 800180c:	69e1      	ldr	r1, [r4, #28]
 800180e:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001810:	6a21      	ldr	r1, [r4, #32]
 8001812:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001814:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001816:	602b      	str	r3, [r5, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	01db      	lsls	r3, r3, #7
 800181c:	68a2      	ldr	r2, [r4, #8]
 800181e:	429a      	cmp	r2, r3
 8001820:	d010      	beq.n	8001844 <HAL_DMA_Init+0x70>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_DMA_Init+0x94>)
 8001824:	6819      	ldr	r1, [r3, #0]
 8001826:	221c      	movs	r2, #28
 8001828:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800182a:	4015      	ands	r5, r2
 800182c:	200f      	movs	r0, #15
 800182e:	40a8      	lsls	r0, r5
 8001830:	4381      	bics	r1, r0
 8001832:	6019      	str	r1, [r3, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001838:	4002      	ands	r2, r0
 800183a:	6860      	ldr	r0, [r4, #4]
 800183c:	4090      	lsls	r0, r2
 800183e:	0002      	movs	r2, r0
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001844:	2300      	movs	r3, #0
 8001846:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8001848:	2101      	movs	r1, #1
 800184a:	2225      	movs	r2, #37	; 0x25
 800184c:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 800184e:	3a01      	subs	r2, #1
 8001850:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001852:	2000      	movs	r0, #0
}
 8001854:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001856:	2001      	movs	r0, #1
 8001858:	e7fc      	b.n	8001854 <HAL_DMA_Init+0x80>
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	bffdfff8 	.word	0xbffdfff8
 8001860:	40020000 	.word	0x40020000
 8001864:	ffff800f 	.word	0xffff800f
 8001868:	400200a8 	.word	0x400200a8

0800186c <HAL_DMA_Start_IT>:
{
 800186c:	b570      	push	{r4, r5, r6, lr}
 800186e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001870:	2024      	movs	r0, #36	; 0x24
 8001872:	5c20      	ldrb	r0, [r4, r0]
 8001874:	2801      	cmp	r0, #1
 8001876:	d032      	beq.n	80018de <HAL_DMA_Start_IT+0x72>
 8001878:	2501      	movs	r5, #1
 800187a:	2024      	movs	r0, #36	; 0x24
 800187c:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 800187e:	3001      	adds	r0, #1
 8001880:	5c20      	ldrb	r0, [r4, r0]
 8001882:	2801      	cmp	r0, #1
 8001884:	d004      	beq.n	8001890 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8001886:	2200      	movs	r2, #0
 8001888:	2324      	movs	r3, #36	; 0x24
 800188a:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 800188c:	2002      	movs	r0, #2
}
 800188e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001890:	3501      	adds	r5, #1
 8001892:	3024      	adds	r0, #36	; 0x24
 8001894:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001896:	2000      	movs	r0, #0
 8001898:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800189a:	6825      	ldr	r5, [r4, #0]
 800189c:	6828      	ldr	r0, [r5, #0]
 800189e:	2601      	movs	r6, #1
 80018a0:	43b0      	bics	r0, r6
 80018a2:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018a4:	0020      	movs	r0, r4
 80018a6:	f7ff ff7d 	bl	80017a4 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 80018aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00b      	beq.n	80018c8 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b0:	6822      	ldr	r2, [r4, #0]
 80018b2:	6813      	ldr	r3, [r2, #0]
 80018b4:	210e      	movs	r1, #14
 80018b6:	430b      	orrs	r3, r1
 80018b8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80018ba:	6822      	ldr	r2, [r4, #0]
 80018bc:	6813      	ldr	r3, [r2, #0]
 80018be:	2101      	movs	r1, #1
 80018c0:	430b      	orrs	r3, r1
 80018c2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018c4:	2000      	movs	r0, #0
 80018c6:	e7e2      	b.n	800188e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018c8:	6822      	ldr	r2, [r4, #0]
 80018ca:	6813      	ldr	r3, [r2, #0]
 80018cc:	2104      	movs	r1, #4
 80018ce:	438b      	bics	r3, r1
 80018d0:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018d2:	6822      	ldr	r2, [r4, #0]
 80018d4:	6813      	ldr	r3, [r2, #0]
 80018d6:	3106      	adds	r1, #6
 80018d8:	430b      	orrs	r3, r1
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e7ed      	b.n	80018ba <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80018de:	2002      	movs	r0, #2
 80018e0:	e7d5      	b.n	800188e <HAL_DMA_Start_IT+0x22>

080018e2 <HAL_DMA_IRQHandler>:
{
 80018e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018e6:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80018e8:	6804      	ldr	r4, [r0, #0]
 80018ea:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80018ec:	231c      	movs	r3, #28
 80018ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80018f0:	4013      	ands	r3, r2
 80018f2:	2204      	movs	r2, #4
 80018f4:	409a      	lsls	r2, r3
 80018f6:	420a      	tst	r2, r1
 80018f8:	d014      	beq.n	8001924 <HAL_DMA_IRQHandler+0x42>
 80018fa:	076a      	lsls	r2, r5, #29
 80018fc:	d512      	bpl.n	8001924 <HAL_DMA_IRQHandler+0x42>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	069b      	lsls	r3, r3, #26
 8001902:	d403      	bmi.n	800190c <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	2204      	movs	r2, #4
 8001908:	4393      	bics	r3, r2
 800190a:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800190c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800190e:	221c      	movs	r2, #28
 8001910:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001912:	401a      	ands	r2, r3
 8001914:	2304      	movs	r3, #4
 8001916:	4093      	lsls	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800191a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800191c:	2b00      	cmp	r3, #0
 800191e:	d000      	beq.n	8001922 <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 8001920:	4798      	blx	r3
}
 8001922:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001924:	2202      	movs	r2, #2
 8001926:	409a      	lsls	r2, r3
 8001928:	420a      	tst	r2, r1
 800192a:	d01a      	beq.n	8001962 <HAL_DMA_IRQHandler+0x80>
 800192c:	07aa      	lsls	r2, r5, #30
 800192e:	d518      	bpl.n	8001962 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	069b      	lsls	r3, r3, #26
 8001934:	d406      	bmi.n	8001944 <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001936:	6823      	ldr	r3, [r4, #0]
 8001938:	220a      	movs	r2, #10
 800193a:	4393      	bics	r3, r2
 800193c:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800193e:	3a09      	subs	r2, #9
 8001940:	2325      	movs	r3, #37	; 0x25
 8001942:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001944:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001946:	221c      	movs	r2, #28
 8001948:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800194a:	401a      	ands	r2, r3
 800194c:	2302      	movs	r3, #2
 800194e:	4093      	lsls	r3, r2
 8001950:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001952:	2200      	movs	r2, #0
 8001954:	2324      	movs	r3, #36	; 0x24
 8001956:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 8001958:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0e1      	beq.n	8001922 <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 800195e:	4798      	blx	r3
 8001960:	e7df      	b.n	8001922 <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001962:	2208      	movs	r2, #8
 8001964:	409a      	lsls	r2, r3
 8001966:	420a      	tst	r2, r1
 8001968:	d0db      	beq.n	8001922 <HAL_DMA_IRQHandler+0x40>
 800196a:	072b      	lsls	r3, r5, #28
 800196c:	d5d9      	bpl.n	8001922 <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	220e      	movs	r2, #14
 8001972:	4393      	bics	r3, r2
 8001974:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001976:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001978:	320e      	adds	r2, #14
 800197a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800197c:	401a      	ands	r2, r3
 800197e:	2301      	movs	r3, #1
 8001980:	001c      	movs	r4, r3
 8001982:	4094      	lsls	r4, r2
 8001984:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001986:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001988:	2225      	movs	r2, #37	; 0x25
 800198a:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800198c:	2200      	movs	r2, #0
 800198e:	3323      	adds	r3, #35	; 0x23
 8001990:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8001992:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0c4      	beq.n	8001922 <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 8001998:	4798      	blx	r3
  return;
 800199a:	e7c2      	b.n	8001922 <HAL_DMA_IRQHandler+0x40>

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199e:	46c6      	mov	lr, r8
 80019a0:	b500      	push	{lr}
  uint32_t position = 0x00U;
 80019a2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80019a4:	e088      	b.n	8001ab8 <HAL_GPIO_Init+0x11c>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80019a6:	08df      	lsrs	r7, r3, #3
 80019a8:	3708      	adds	r7, #8
 80019aa:	00bf      	lsls	r7, r7, #2
 80019ac:	583e      	ldr	r6, [r7, r0]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80019ae:	2507      	movs	r5, #7
 80019b0:	401d      	ands	r5, r3
 80019b2:	00ad      	lsls	r5, r5, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	40aa      	lsls	r2, r5
 80019b8:	4396      	bics	r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80019ba:	690a      	ldr	r2, [r1, #16]
 80019bc:	40aa      	lsls	r2, r5
 80019be:	0015      	movs	r5, r2
 80019c0:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	503d      	str	r5, [r7, r0]
 80019c4:	e088      	b.n	8001ad8 <HAL_GPIO_Init+0x13c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80019c8:	005f      	lsls	r7, r3, #1
 80019ca:	2603      	movs	r6, #3
 80019cc:	40be      	lsls	r6, r7
 80019ce:	43b5      	bics	r5, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d0:	68ce      	ldr	r6, [r1, #12]
 80019d2:	40be      	lsls	r6, r7
 80019d4:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80019d6:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80019d8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019da:	43a5      	bics	r5, r4
 80019dc:	002c      	movs	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019de:	684a      	ldr	r2, [r1, #4]
 80019e0:	0916      	lsrs	r6, r2, #4
 80019e2:	2501      	movs	r5, #1
 80019e4:	4035      	ands	r5, r6
 80019e6:	409d      	lsls	r5, r3
 80019e8:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80019ea:	6044      	str	r4, [r0, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ec:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019ee:	005e      	lsls	r6, r3, #1
 80019f0:	2403      	movs	r4, #3
 80019f2:	0027      	movs	r7, r4
 80019f4:	40b7      	lsls	r7, r6
 80019f6:	43ff      	mvns	r7, r7
 80019f8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019fa:	684a      	ldr	r2, [r1, #4]
 80019fc:	4014      	ands	r4, r2
 80019fe:	40b4      	lsls	r4, r6
 8001a00:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8001a02:	6004      	str	r4, [r0, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a04:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a06:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001a08:	688d      	ldr	r5, [r1, #8]
 8001a0a:	40b5      	lsls	r5, r6
 8001a0c:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001a0e:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001a10:	684a      	ldr	r2, [r1, #4]
 8001a12:	00d2      	lsls	r2, r2, #3
 8001a14:	d54f      	bpl.n	8001ab6 <HAL_GPIO_Init+0x11a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	4d3b      	ldr	r5, [pc, #236]	; (8001b04 <HAL_GPIO_Init+0x168>)
 8001a18:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001a1a:	2601      	movs	r6, #1
 8001a1c:	4334      	orrs	r4, r6
 8001a1e:	636c      	str	r4, [r5, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001a20:	089c      	lsrs	r4, r3, #2
 8001a22:	1ca5      	adds	r5, r4, #2
 8001a24:	00ad      	lsls	r5, r5, #2
 8001a26:	4e38      	ldr	r6, [pc, #224]	; (8001b08 <HAL_GPIO_Init+0x16c>)
 8001a28:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001a2a:	2503      	movs	r5, #3
 8001a2c:	401d      	ands	r5, r3
 8001a2e:	00ad      	lsls	r5, r5, #2
 8001a30:	270f      	movs	r7, #15
 8001a32:	40af      	lsls	r7, r5
 8001a34:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a36:	27a0      	movs	r7, #160	; 0xa0
 8001a38:	05ff      	lsls	r7, r7, #23
 8001a3a:	42b8      	cmp	r0, r7
 8001a3c:	d05a      	beq.n	8001af4 <HAL_GPIO_Init+0x158>
 8001a3e:	4f33      	ldr	r7, [pc, #204]	; (8001b0c <HAL_GPIO_Init+0x170>)
 8001a40:	42b8      	cmp	r0, r7
 8001a42:	d059      	beq.n	8001af8 <HAL_GPIO_Init+0x15c>
 8001a44:	4f32      	ldr	r7, [pc, #200]	; (8001b10 <HAL_GPIO_Init+0x174>)
 8001a46:	42b8      	cmp	r0, r7
 8001a48:	d052      	beq.n	8001af0 <HAL_GPIO_Init+0x154>
 8001a4a:	2706      	movs	r7, #6
 8001a4c:	40af      	lsls	r7, r5
 8001a4e:	003d      	movs	r5, r7
 8001a50:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a52:	3402      	adds	r4, #2
 8001a54:	00a4      	lsls	r4, r4, #2
 8001a56:	4e2c      	ldr	r6, [pc, #176]	; (8001b08 <HAL_GPIO_Init+0x16c>)
 8001a58:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a5a:	4c2e      	ldr	r4, [pc, #184]	; (8001b14 <HAL_GPIO_Init+0x178>)
 8001a5c:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	4642      	mov	r2, r8
 8001a60:	43d4      	mvns	r4, r2
 8001a62:	0026      	movs	r6, r4
 8001a64:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a66:	684a      	ldr	r2, [r1, #4]
 8001a68:	03d2      	lsls	r2, r2, #15
 8001a6a:	d502      	bpl.n	8001a72 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8001a6c:	4642      	mov	r2, r8
 8001a6e:	4315      	orrs	r5, r2
 8001a70:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8001a72:	4d28      	ldr	r5, [pc, #160]	; (8001b14 <HAL_GPIO_Init+0x178>)
 8001a74:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001a76:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	002e      	movs	r6, r5
 8001a7a:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a7c:	684a      	ldr	r2, [r1, #4]
 8001a7e:	0392      	lsls	r2, r2, #14
 8001a80:	d502      	bpl.n	8001a88 <HAL_GPIO_Init+0xec>
        {
          temp |= iocurrent;
 8001a82:	4642      	mov	r2, r8
 8001a84:	4315      	orrs	r5, r2
 8001a86:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8001a88:	4d22      	ldr	r5, [pc, #136]	; (8001b14 <HAL_GPIO_Init+0x178>)
 8001a8a:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a8c:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	002e      	movs	r6, r5
 8001a90:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a92:	684a      	ldr	r2, [r1, #4]
 8001a94:	02d2      	lsls	r2, r2, #11
 8001a96:	d502      	bpl.n	8001a9e <HAL_GPIO_Init+0x102>
        {
          temp |= iocurrent;
 8001a98:	4642      	mov	r2, r8
 8001a9a:	4315      	orrs	r5, r2
 8001a9c:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8001a9e:	4d1d      	ldr	r5, [pc, #116]	; (8001b14 <HAL_GPIO_Init+0x178>)
 8001aa0:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001aa2:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aa6:	684a      	ldr	r2, [r1, #4]
 8001aa8:	0292      	lsls	r2, r2, #10
 8001aaa:	d502      	bpl.n	8001ab2 <HAL_GPIO_Init+0x116>
        {
          temp |= iocurrent;
 8001aac:	4642      	mov	r2, r8
 8001aae:	432a      	orrs	r2, r5
 8001ab0:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8001ab2:	4a18      	ldr	r2, [pc, #96]	; (8001b14 <HAL_GPIO_Init+0x178>)
 8001ab4:	60d4      	str	r4, [r2, #12]
      }
    }
    position++;
 8001ab6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ab8:	680a      	ldr	r2, [r1, #0]
 8001aba:	0014      	movs	r4, r2
 8001abc:	40dc      	lsrs	r4, r3
 8001abe:	d01d      	beq.n	8001afc <HAL_GPIO_Init+0x160>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ac0:	2401      	movs	r4, #1
 8001ac2:	409c      	lsls	r4, r3
 8001ac4:	4022      	ands	r2, r4
 8001ac6:	4690      	mov	r8, r2
    if(iocurrent)
 8001ac8:	d0f5      	beq.n	8001ab6 <HAL_GPIO_Init+0x11a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001aca:	684d      	ldr	r5, [r1, #4]
 8001acc:	2d02      	cmp	r5, #2
 8001ace:	d100      	bne.n	8001ad2 <HAL_GPIO_Init+0x136>
 8001ad0:	e769      	b.n	80019a6 <HAL_GPIO_Init+0xa>
 8001ad2:	2d12      	cmp	r5, #18
 8001ad4:	d100      	bne.n	8001ad8 <HAL_GPIO_Init+0x13c>
 8001ad6:	e766      	b.n	80019a6 <HAL_GPIO_Init+0xa>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad8:	684d      	ldr	r5, [r1, #4]
 8001ada:	1e6e      	subs	r6, r5, #1
 8001adc:	2e01      	cmp	r6, #1
 8001ade:	d800      	bhi.n	8001ae2 <HAL_GPIO_Init+0x146>
 8001ae0:	e771      	b.n	80019c6 <HAL_GPIO_Init+0x2a>
 8001ae2:	2d11      	cmp	r5, #17
 8001ae4:	d100      	bne.n	8001ae8 <HAL_GPIO_Init+0x14c>
 8001ae6:	e76e      	b.n	80019c6 <HAL_GPIO_Init+0x2a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae8:	2d12      	cmp	r5, #18
 8001aea:	d000      	beq.n	8001aee <HAL_GPIO_Init+0x152>
 8001aec:	e77e      	b.n	80019ec <HAL_GPIO_Init+0x50>
 8001aee:	e76a      	b.n	80019c6 <HAL_GPIO_Init+0x2a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001af0:	2702      	movs	r7, #2
 8001af2:	e7ab      	b.n	8001a4c <HAL_GPIO_Init+0xb0>
 8001af4:	2700      	movs	r7, #0
 8001af6:	e7a9      	b.n	8001a4c <HAL_GPIO_Init+0xb0>
 8001af8:	2701      	movs	r7, #1
 8001afa:	e7a7      	b.n	8001a4c <HAL_GPIO_Init+0xb0>
  }
}
 8001afc:	bc04      	pop	{r2}
 8001afe:	4690      	mov	r8, r2
 8001b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	50000400 	.word	0x50000400
 8001b10:	50000800 	.word	0x50000800
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001b18:	2a00      	cmp	r2, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8001b1c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001b1e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001b20:	6181      	str	r1, [r0, #24]
 8001b22:	e7fc      	b.n	8001b1e <HAL_GPIO_WritePin+0x6>

08001b24 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001b24:	6943      	ldr	r3, [r0, #20]
 8001b26:	4059      	eors	r1, r3
 8001b28:	6141      	str	r1, [r0, #20]
}
 8001b2a:	4770      	bx	lr

08001b2c <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001b30:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	4218      	tst	r0, r3
 8001b38:	d100      	bne.n	8001b3c <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8001b3a:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001b3e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b40:	f7ff fff4 	bl	8001b2c <HAL_GPIO_EXTI_Callback>
}
 8001b44:	e7f9      	b.n	8001b3a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001b4c:	b570      	push	{r4, r5, r6, lr}
 8001b4e:	1e04      	subs	r4, r0, #0
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001b50:	d043      	beq.n	8001bda <HAL_LPTIM_Init+0x8e>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001b52:	232e      	movs	r3, #46	; 0x2e
 8001b54:	5cc3      	ldrb	r3, [r0, r3]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d031      	beq.n	8001bbe <HAL_LPTIM_Init+0x72>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	232e      	movs	r3, #46	; 0x2e
 8001b5e:	54e2      	strb	r2, [r4, r3]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001b60:	6825      	ldr	r5, [r4, #0]
 8001b62:	68eb      	ldr	r3, [r5, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001b64:	6860      	ldr	r0, [r4, #4]
 8001b66:	2801      	cmp	r0, #1
 8001b68:	d02f      	beq.n	8001bca <HAL_LPTIM_Init+0x7e>
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	0412      	lsls	r2, r2, #16
 8001b6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b70:	4291      	cmp	r1, r2
 8001b72:	d02a      	beq.n	8001bca <HAL_LPTIM_Init+0x7e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001b74:	6961      	ldr	r1, [r4, #20]
 8001b76:	4a1a      	ldr	r2, [pc, #104]	; (8001be0 <HAL_LPTIM_Init+0x94>)
 8001b78:	4291      	cmp	r1, r2
 8001b7a:	d001      	beq.n	8001b80 <HAL_LPTIM_Init+0x34>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001b7c:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <HAL_LPTIM_Init+0x98>)
 8001b7e:	4013      	ands	r3, r2
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_LPTIM_Init+0x9c>)
 8001b82:	4013      	ands	r3, r2
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001b84:	68a2      	ldr	r2, [r4, #8]
 8001b86:	4302      	orrs	r2, r0
              hlptim->Init.Clock.Prescaler |
 8001b88:	6a26      	ldr	r6, [r4, #32]
 8001b8a:	4332      	orrs	r2, r6
              hlptim->Init.OutputPolarity  |
 8001b8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8001b8e:	4332      	orrs	r2, r6
              hlptim->Init.UpdateMode      |
              hlptim->Init.CounterSource);
 8001b90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001b92:	4332      	orrs	r2, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001b94:	4313      	orrs	r3, r2

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001b96:	2801      	cmp	r0, #1
 8001b98:	d01a      	beq.n	8001bd0 <HAL_LPTIM_Init+0x84>
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	0412      	lsls	r2, r2, #16
 8001b9e:	4296      	cmp	r6, r2
 8001ba0:	d016      	beq.n	8001bd0 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001ba2:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <HAL_LPTIM_Init+0x94>)
 8001ba4:	4291      	cmp	r1, r2
 8001ba6:	d004      	beq.n	8001bb2 <HAL_LPTIM_Init+0x66>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001ba8:	69a2      	ldr	r2, [r4, #24]
 8001baa:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 8001bac:	69e2      	ldr	r2, [r4, #28]
 8001bae:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001bb0:	430b      	orrs	r3, r1
                hlptim->Init.Trigger.SampleTime);
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001bb2:	60eb      	str	r3, [r5, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	232e      	movs	r3, #46	; 0x2e
 8001bb8:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return HAL_OK;
 8001bba:	2000      	movs	r0, #0
}
 8001bbc:	bd70      	pop	{r4, r5, r6, pc}
    hlptim->Lock = HAL_UNLOCKED;
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	332d      	adds	r3, #45	; 0x2d
 8001bc2:	54c2      	strb	r2, [r0, r3]
    HAL_LPTIM_MspInit(hlptim);
 8001bc4:	f001 f92a 	bl	8002e1c <HAL_LPTIM_MspInit>
 8001bc8:	e7c7      	b.n	8001b5a <HAL_LPTIM_Init+0xe>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001bca:	221e      	movs	r2, #30
 8001bcc:	4393      	bics	r3, r2
 8001bce:	e7d1      	b.n	8001b74 <HAL_LPTIM_Init+0x28>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001bd0:	68e2      	ldr	r2, [r4, #12]
 8001bd2:	6920      	ldr	r0, [r4, #16]
 8001bd4:	4302      	orrs	r2, r0
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	e7e3      	b.n	8001ba2 <HAL_LPTIM_Init+0x56>
    return HAL_ERROR;
 8001bda:	2001      	movs	r0, #1
 8001bdc:	e7ee      	b.n	8001bbc <HAL_LPTIM_Init+0x70>
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	0000ffff 	.word	0x0000ffff
 8001be4:	ffff1f3f 	.word	0xffff1f3f
 8001be8:	ff19f1f8 	.word	0xff19f1f8

08001bec <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8001bec:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001bee:	252e      	movs	r5, #46	; 0x2e
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	5543      	strb	r3, [r0, r5]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001bf4:	4c10      	ldr	r4, [pc, #64]	; (8001c38 <HAL_LPTIM_TimeOut_Start_IT+0x4c>)
 8001bf6:	6826      	ldr	r6, [r4, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	059b      	lsls	r3, r3, #22
 8001bfc:	4333      	orrs	r3, r6
 8001bfe:	6023      	str	r3, [r4, #0]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8001c00:	6804      	ldr	r4, [r0, #0]
 8001c02:	68e6      	ldr	r6, [r4, #12]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	031b      	lsls	r3, r3, #12
 8001c08:	4333      	orrs	r3, r6
 8001c0a:	60e3      	str	r3, [r4, #12]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8001c0c:	6806      	ldr	r6, [r0, #0]
 8001c0e:	68b4      	ldr	r4, [r6, #8]
 8001c10:	2301      	movs	r3, #1
 8001c12:	431c      	orrs	r4, r3
 8001c14:	60b4      	str	r4, [r6, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001c16:	6806      	ldr	r6, [r0, #0]
 8001c18:	6934      	ldr	r4, [r6, #16]
 8001c1a:	431c      	orrs	r4, r3
 8001c1c:	6134      	str	r4, [r6, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001c1e:	6804      	ldr	r4, [r0, #0]
 8001c20:	61a1      	str	r1, [r4, #24]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8001c22:	6801      	ldr	r1, [r0, #0]
 8001c24:	614a      	str	r2, [r1, #20]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001c26:	6801      	ldr	r1, [r0, #0]
 8001c28:	690a      	ldr	r2, [r1, #16]
 8001c2a:	2404      	movs	r4, #4
 8001c2c:	4322      	orrs	r2, r4
 8001c2e:	610a      	str	r2, [r1, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001c30:	5543      	strb	r3, [r0, r5]

  /* Return function status */
  return HAL_OK;
}
 8001c32:	2000      	movs	r0, #0
 8001c34:	bd70      	pop	{r4, r5, r6, pc}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_LPTIM_CompareMatchCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8001c3c:	4770      	bx	lr

08001c3e <HAL_LPTIM_AutoReloadMatchCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8001c3e:	4770      	bx	lr

08001c40 <HAL_LPTIM_TriggerCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001c40:	4770      	bx	lr

08001c42 <HAL_LPTIM_CompareWriteCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001c42:	4770      	bx	lr

08001c44 <HAL_LPTIM_AutoReloadWriteCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001c44:	4770      	bx	lr

08001c46 <HAL_LPTIM_DirectionUpCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001c46:	4770      	bx	lr

08001c48 <HAL_LPTIM_DirectionDownCallback>:
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001c48:	4770      	bx	lr

08001c4a <HAL_LPTIM_IRQHandler>:
{
 8001c4a:	b510      	push	{r4, lr}
 8001c4c:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001c4e:	6803      	ldr	r3, [r0, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	07d2      	lsls	r2, r2, #31
 8001c54:	d502      	bpl.n	8001c5c <HAL_LPTIM_IRQHandler+0x12>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	07d2      	lsls	r2, r2, #31
 8001c5a:	d42a      	bmi.n	8001cb2 <HAL_LPTIM_IRQHandler+0x68>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	0792      	lsls	r2, r2, #30
 8001c62:	d502      	bpl.n	8001c6a <HAL_LPTIM_IRQHandler+0x20>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	0792      	lsls	r2, r2, #30
 8001c68:	d428      	bmi.n	8001cbc <HAL_LPTIM_IRQHandler+0x72>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	0752      	lsls	r2, r2, #29
 8001c70:	d502      	bpl.n	8001c78 <HAL_LPTIM_IRQHandler+0x2e>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	0752      	lsls	r2, r2, #29
 8001c76:	d427      	bmi.n	8001cc8 <HAL_LPTIM_IRQHandler+0x7e>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	0712      	lsls	r2, r2, #28
 8001c7e:	d502      	bpl.n	8001c86 <HAL_LPTIM_IRQHandler+0x3c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	0712      	lsls	r2, r2, #28
 8001c84:	d426      	bmi.n	8001cd4 <HAL_LPTIM_IRQHandler+0x8a>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	06d2      	lsls	r2, r2, #27
 8001c8c:	d502      	bpl.n	8001c94 <HAL_LPTIM_IRQHandler+0x4a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	06d2      	lsls	r2, r2, #27
 8001c92:	d425      	bmi.n	8001ce0 <HAL_LPTIM_IRQHandler+0x96>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	0692      	lsls	r2, r2, #26
 8001c9a:	d502      	bpl.n	8001ca2 <HAL_LPTIM_IRQHandler+0x58>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	0692      	lsls	r2, r2, #26
 8001ca0:	d424      	bmi.n	8001cec <HAL_LPTIM_IRQHandler+0xa2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	0652      	lsls	r2, r2, #25
 8001ca8:	d502      	bpl.n	8001cb0 <HAL_LPTIM_IRQHandler+0x66>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	0652      	lsls	r2, r2, #25
 8001cae:	d423      	bmi.n	8001cf8 <HAL_LPTIM_IRQHandler+0xae>
}
 8001cb0:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001cb6:	f7ff ffc1 	bl	8001c3c <HAL_LPTIM_CompareMatchCallback>
 8001cba:	e7cf      	b.n	8001c5c <HAL_LPTIM_IRQHandler+0x12>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001cc0:	0020      	movs	r0, r4
 8001cc2:	f7ff ffbc 	bl	8001c3e <HAL_LPTIM_AutoReloadMatchCallback>
 8001cc6:	e7d0      	b.n	8001c6a <HAL_LPTIM_IRQHandler+0x20>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001cc8:	2204      	movs	r2, #4
 8001cca:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 8001ccc:	0020      	movs	r0, r4
 8001cce:	f7ff ffb7 	bl	8001c40 <HAL_LPTIM_TriggerCallback>
 8001cd2:	e7d1      	b.n	8001c78 <HAL_LPTIM_IRQHandler+0x2e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001cd8:	0020      	movs	r0, r4
 8001cda:	f7ff ffb2 	bl	8001c42 <HAL_LPTIM_CompareWriteCallback>
 8001cde:	e7d2      	b.n	8001c86 <HAL_LPTIM_IRQHandler+0x3c>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001ce4:	0020      	movs	r0, r4
 8001ce6:	f7ff ffad 	bl	8001c44 <HAL_LPTIM_AutoReloadWriteCallback>
 8001cea:	e7d3      	b.n	8001c94 <HAL_LPTIM_IRQHandler+0x4a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001cec:	2220      	movs	r2, #32
 8001cee:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001cf0:	0020      	movs	r0, r4
 8001cf2:	f7ff ffa8 	bl	8001c46 <HAL_LPTIM_DirectionUpCallback>
 8001cf6:	e7d4      	b.n	8001ca2 <HAL_LPTIM_IRQHandler+0x58>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001cf8:	2240      	movs	r2, #64	; 0x40
 8001cfa:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001cfc:	0020      	movs	r0, r4
 8001cfe:	f7ff ffa3 	bl	8001c48 <HAL_LPTIM_DirectionDownCallback>
}
 8001d02:	e7d5      	b.n	8001cb0 <HAL_LPTIM_IRQHandler+0x66>

08001d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x80>)
 8001d08:	68d9      	ldr	r1, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d0a:	230c      	movs	r3, #12
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d033      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x76>
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d011      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x36>
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x80>)
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	0b52      	lsrs	r2, r2, #13
 8001d20:	2307      	movs	r3, #7
 8001d22:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d24:	3301      	adds	r3, #1
 8001d26:	2080      	movs	r0, #128	; 0x80
 8001d28:	0200      	lsls	r0, r0, #8
 8001d2a:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8001d2c:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x80>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	06db      	lsls	r3, r3, #27
 8001d34:	d523      	bpl.n	8001d7e <HAL_RCC_GetSysClockFreq+0x7a>
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d36:	4814      	ldr	r0, [pc, #80]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x84>)
 8001d38:	e7f8      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d3a:	0c8a      	lsrs	r2, r1, #18
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	4013      	ands	r3, r2
 8001d40:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x88>)
 8001d42:	5cd0      	ldrb	r0, [r2, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d44:	0d89      	lsrs	r1, r1, #22
 8001d46:	2303      	movs	r3, #3
 8001d48:	4019      	ands	r1, r3
 8001d4a:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x80>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	03db      	lsls	r3, r3, #15
 8001d52:	d408      	bmi.n	8001d66 <HAL_RCC_GetSysClockFreq+0x62>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x80>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	06db      	lsls	r3, r3, #27
 8001d5a:	d509      	bpl.n	8001d70 <HAL_RCC_GetSysClockFreq+0x6c>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x84>)
 8001d5e:	4358      	muls	r0, r3
 8001d60:	f7fe f9d2 	bl	8000108 <__udivsi3>
 8001d64:	e7e2      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x28>
        pllvco = (HSE_VALUE * pllm) / plld;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001d68:	4358      	muls	r0, r3
 8001d6a:	f7fe f9cd 	bl	8000108 <__udivsi3>
 8001d6e:	e7dd      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (HSI_VALUE * pllm) / plld;
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x90>)
 8001d72:	4358      	muls	r0, r3
 8001d74:	f7fe f9c8 	bl	8000108 <__udivsi3>
 8001d78:	e7d8      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001d7c:	e7d6      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8001d80:	e7d4      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x28>
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	40021000 	.word	0x40021000
 8001d88:	003d0900 	.word	0x003d0900
 8001d8c:	080033b4 	.word	0x080033b4
 8001d90:	007a1200 	.word	0x007a1200
 8001d94:	00f42400 	.word	0x00f42400

08001d98 <HAL_RCC_OscConfig>:
{
 8001d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8001d9e:	d100      	bne.n	8001da2 <HAL_RCC_OscConfig+0xa>
 8001da0:	e262      	b.n	8002268 <HAL_RCC_OscConfig+0x4d0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da2:	4bb2      	ldr	r3, [pc, #712]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	250c      	movs	r5, #12
 8001da8:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001daa:	68de      	ldr	r6, [r3, #12]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	025b      	lsls	r3, r3, #9
 8001db0:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	6803      	ldr	r3, [r0, #0]
 8001db4:	07db      	lsls	r3, r3, #31
 8001db6:	d536      	bpl.n	8001e26 <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db8:	2d08      	cmp	r5, #8
 8001dba:	d02c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dbc:	2d0c      	cmp	r5, #12
 8001dbe:	d028      	beq.n	8001e12 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc0:	6863      	ldr	r3, [r4, #4]
 8001dc2:	2280      	movs	r2, #128	; 0x80
 8001dc4:	0252      	lsls	r2, r2, #9
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d055      	beq.n	8001e76 <HAL_RCC_OscConfig+0xde>
 8001dca:	22a0      	movs	r2, #160	; 0xa0
 8001dcc:	02d2      	lsls	r2, r2, #11
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d058      	beq.n	8001e84 <HAL_RCC_OscConfig+0xec>
 8001dd2:	4ba6      	ldr	r3, [pc, #664]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	49a6      	ldr	r1, [pc, #664]	; (8002070 <HAL_RCC_OscConfig+0x2d8>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	0249      	lsls	r1, r1, #9
 8001de2:	400a      	ands	r2, r1
 8001de4:	9201      	str	r2, [sp, #4]
 8001de6:	9a01      	ldr	r2, [sp, #4]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	49a2      	ldr	r1, [pc, #648]	; (8002074 <HAL_RCC_OscConfig+0x2dc>)
 8001dec:	400a      	ands	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df0:	6863      	ldr	r3, [r4, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d052      	beq.n	8001e9c <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8001df6:	f7ff f9c3 	bl	8001180 <HAL_GetTick>
 8001dfa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dfc:	4b9b      	ldr	r3, [pc, #620]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	039b      	lsls	r3, r3, #14
 8001e02:	d410      	bmi.n	8001e26 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff f9bc 	bl	8001180 <HAL_GetTick>
 8001e08:	1bc0      	subs	r0, r0, r7
 8001e0a:	2864      	cmp	r0, #100	; 0x64
 8001e0c:	d9f6      	bls.n	8001dfc <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 8001e0e:	2003      	movs	r0, #3
 8001e10:	e22b      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e12:	2e00      	cmp	r6, #0
 8001e14:	d0d4      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e16:	4b95      	ldr	r3, [pc, #596]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	039b      	lsls	r3, r3, #14
 8001e1c:	d503      	bpl.n	8001e26 <HAL_RCC_OscConfig+0x8e>
 8001e1e:	6863      	ldr	r3, [r4, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d100      	bne.n	8001e26 <HAL_RCC_OscConfig+0x8e>
 8001e24:	e223      	b.n	800226e <HAL_RCC_OscConfig+0x4d6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e26:	6823      	ldr	r3, [r4, #0]
 8001e28:	079b      	lsls	r3, r3, #30
 8001e2a:	d56c      	bpl.n	8001f06 <HAL_RCC_OscConfig+0x16e>
    hsi_state = RCC_OscInitStruct->HSIState;
 8001e2c:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001e2e:	069a      	lsls	r2, r3, #26
 8001e30:	d505      	bpl.n	8001e3e <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001e32:	488e      	ldr	r0, [pc, #568]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001e34:	6802      	ldr	r2, [r0, #0]
 8001e36:	2120      	movs	r1, #32
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001e3c:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3e:	2d04      	cmp	r5, #4
 8001e40:	d03c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e42:	2d0c      	cmp	r5, #12
 8001e44:	d038      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d100      	bne.n	8001e4c <HAL_RCC_OscConfig+0xb4>
 8001e4a:	e0b0      	b.n	8001fae <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e4c:	4987      	ldr	r1, [pc, #540]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001e4e:	680a      	ldr	r2, [r1, #0]
 8001e50:	2009      	movs	r0, #9
 8001e52:	4382      	bics	r2, r0
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001e58:	f7ff f992 	bl	8001180 <HAL_GetTick>
 8001e5c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e5e:	4b83      	ldr	r3, [pc, #524]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	075b      	lsls	r3, r3, #29
 8001e64:	d500      	bpl.n	8001e68 <HAL_RCC_OscConfig+0xd0>
 8001e66:	e099      	b.n	8001f9c <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e68:	f7ff f98a 	bl	8001180 <HAL_GetTick>
 8001e6c:	1b80      	subs	r0, r0, r6
 8001e6e:	2802      	cmp	r0, #2
 8001e70:	d9f5      	bls.n	8001e5e <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8001e72:	2003      	movs	r0, #3
 8001e74:	e1f9      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e76:	4a7d      	ldr	r2, [pc, #500]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001e78:	6811      	ldr	r1, [r2, #0]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	025b      	lsls	r3, r3, #9
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e7b5      	b.n	8001df0 <HAL_RCC_OscConfig+0x58>
 8001e84:	4b79      	ldr	r3, [pc, #484]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001e86:	6819      	ldr	r1, [r3, #0]
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	02d2      	lsls	r2, r2, #11
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	6819      	ldr	r1, [r3, #0]
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	0252      	lsls	r2, r2, #9
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e7a9      	b.n	8001df0 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f970 	bl	8001180 <HAL_GetTick>
 8001ea0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ea2:	4b72      	ldr	r3, [pc, #456]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	039b      	lsls	r3, r3, #14
 8001ea8:	d5bd      	bpl.n	8001e26 <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eaa:	f7ff f969 	bl	8001180 <HAL_GetTick>
 8001eae:	1bc0      	subs	r0, r0, r7
 8001eb0:	2864      	cmp	r0, #100	; 0x64
 8001eb2:	d9f6      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	e1d8      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001eb8:	2e00      	cmp	r6, #0
 8001eba:	d1c4      	bne.n	8001e46 <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001ebc:	4a6b      	ldr	r2, [pc, #428]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	0752      	lsls	r2, r2, #29
 8001ec2:	d502      	bpl.n	8001eca <HAL_RCC_OscConfig+0x132>
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d100      	bne.n	8001eca <HAL_RCC_OscConfig+0x132>
 8001ec8:	e1d3      	b.n	8002272 <HAL_RCC_OscConfig+0x4da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eca:	4e68      	ldr	r6, [pc, #416]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001ecc:	6872      	ldr	r2, [r6, #4]
 8001ece:	496a      	ldr	r1, [pc, #424]	; (8002078 <HAL_RCC_OscConfig+0x2e0>)
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	6921      	ldr	r1, [r4, #16]
 8001ed4:	0209      	lsls	r1, r1, #8
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001eda:	6832      	ldr	r2, [r6, #0]
 8001edc:	2109      	movs	r1, #9
 8001ede:	438a      	bics	r2, r1
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ee4:	f7ff ff0e 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001ee8:	68f2      	ldr	r2, [r6, #12]
 8001eea:	0912      	lsrs	r2, r2, #4
 8001eec:	230f      	movs	r3, #15
 8001eee:	4013      	ands	r3, r2
 8001ef0:	4a62      	ldr	r2, [pc, #392]	; (800207c <HAL_RCC_OscConfig+0x2e4>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	40d8      	lsrs	r0, r3
 8001ef6:	4b62      	ldr	r3, [pc, #392]	; (8002080 <HAL_RCC_OscConfig+0x2e8>)
 8001ef8:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff f90c 	bl	8001118 <HAL_InitTick>
      if(status != HAL_OK)
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d000      	beq.n	8001f06 <HAL_RCC_OscConfig+0x16e>
 8001f04:	e1b1      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	06db      	lsls	r3, r3, #27
 8001f0a:	d52c      	bpl.n	8001f66 <HAL_RCC_OscConfig+0x1ce>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001f0c:	2d00      	cmp	r5, #0
 8001f0e:	d161      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x23c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f10:	4b56      	ldr	r3, [pc, #344]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	059b      	lsls	r3, r3, #22
 8001f16:	d503      	bpl.n	8001f20 <HAL_RCC_OscConfig+0x188>
 8001f18:	69a3      	ldr	r3, [r4, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d100      	bne.n	8001f20 <HAL_RCC_OscConfig+0x188>
 8001f1e:	e1aa      	b.n	8002276 <HAL_RCC_OscConfig+0x4de>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f20:	4a52      	ldr	r2, [pc, #328]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001f22:	6853      	ldr	r3, [r2, #4]
 8001f24:	4957      	ldr	r1, [pc, #348]	; (8002084 <HAL_RCC_OscConfig+0x2ec>)
 8001f26:	400b      	ands	r3, r1
 8001f28:	6a21      	ldr	r1, [r4, #32]
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f2e:	6853      	ldr	r3, [r2, #4]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	69e1      	ldr	r1, [r4, #28]
 8001f36:	0609      	lsls	r1, r1, #24
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f3c:	6a23      	ldr	r3, [r4, #32]
 8001f3e:	0b59      	lsrs	r1, r3, #13
 8001f40:	3101      	adds	r1, #1
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f48:	68d1      	ldr	r1, [r2, #12]
 8001f4a:	0909      	lsrs	r1, r1, #4
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	400a      	ands	r2, r1
 8001f50:	494a      	ldr	r1, [pc, #296]	; (800207c <HAL_RCC_OscConfig+0x2e4>)
 8001f52:	5c8a      	ldrb	r2, [r1, r2]
 8001f54:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f56:	4a4a      	ldr	r2, [pc, #296]	; (8002080 <HAL_RCC_OscConfig+0x2e8>)
 8001f58:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7ff f8dc 	bl	8001118 <HAL_InitTick>
        if(status != HAL_OK)
 8001f60:	2800      	cmp	r0, #0
 8001f62:	d000      	beq.n	8001f66 <HAL_RCC_OscConfig+0x1ce>
 8001f64:	e181      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	071b      	lsls	r3, r3, #28
 8001f6a:	d400      	bmi.n	8001f6e <HAL_RCC_OscConfig+0x1d6>
 8001f6c:	e08e      	b.n	800208c <HAL_RCC_OscConfig+0x2f4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f6e:	6963      	ldr	r3, [r4, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d068      	beq.n	8002046 <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_LSI_ENABLE();
 8001f74:	4a3d      	ldr	r2, [pc, #244]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001f76:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001f78:	2101      	movs	r1, #1
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001f7e:	f7ff f8ff 	bl	8001180 <HAL_GetTick>
 8001f82:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f84:	4b39      	ldr	r3, [pc, #228]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f88:	079b      	lsls	r3, r3, #30
 8001f8a:	d500      	bpl.n	8001f8e <HAL_RCC_OscConfig+0x1f6>
 8001f8c:	e07e      	b.n	800208c <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f8e:	f7ff f8f7 	bl	8001180 <HAL_GetTick>
 8001f92:	1b80      	subs	r0, r0, r6
 8001f94:	2802      	cmp	r0, #2
 8001f96:	d9f5      	bls.n	8001f84 <HAL_RCC_OscConfig+0x1ec>
          return HAL_TIMEOUT;
 8001f98:	2003      	movs	r0, #3
 8001f9a:	e166      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9c:	4933      	ldr	r1, [pc, #204]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001f9e:	684b      	ldr	r3, [r1, #4]
 8001fa0:	4a35      	ldr	r2, [pc, #212]	; (8002078 <HAL_RCC_OscConfig+0x2e0>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	6922      	ldr	r2, [r4, #16]
 8001fa6:	0212      	lsls	r2, r2, #8
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
 8001fac:	e7ab      	b.n	8001f06 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8001fae:	4a2f      	ldr	r2, [pc, #188]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001fb0:	6813      	ldr	r3, [r2, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	438b      	bics	r3, r1
 8001fb6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fb8:	f7ff f8e2 	bl	8001180 <HAL_GetTick>
 8001fbc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	075b      	lsls	r3, r3, #29
 8001fc4:	d59f      	bpl.n	8001f06 <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f8db 	bl	8001180 <HAL_GetTick>
 8001fca:	1b80      	subs	r0, r0, r6
 8001fcc:	2802      	cmp	r0, #2
 8001fce:	d9f6      	bls.n	8001fbe <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	e14a      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fd4:	69a3      	ldr	r3, [r4, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d022      	beq.n	8002020 <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_MSI_ENABLE();
 8001fda:	4a24      	ldr	r2, [pc, #144]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001fdc:	6811      	ldr	r1, [r2, #0]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fe6:	f7ff f8cb 	bl	8001180 <HAL_GetTick>
 8001fea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	059b      	lsls	r3, r3, #22
 8001ff2:	d406      	bmi.n	8002002 <HAL_RCC_OscConfig+0x26a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ff4:	f7ff f8c4 	bl	8001180 <HAL_GetTick>
 8001ff8:	1b80      	subs	r0, r0, r6
 8001ffa:	2802      	cmp	r0, #2
 8001ffc:	d9f6      	bls.n	8001fec <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 8001ffe:	2003      	movs	r0, #3
 8002000:	e133      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002002:	4a1a      	ldr	r2, [pc, #104]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8002004:	6853      	ldr	r3, [r2, #4]
 8002006:	491f      	ldr	r1, [pc, #124]	; (8002084 <HAL_RCC_OscConfig+0x2ec>)
 8002008:	400b      	ands	r3, r1
 800200a:	6a21      	ldr	r1, [r4, #32]
 800200c:	430b      	orrs	r3, r1
 800200e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002010:	6853      	ldr	r3, [r2, #4]
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	69e1      	ldr	r1, [r4, #28]
 8002018:	0609      	lsls	r1, r1, #24
 800201a:	430b      	orrs	r3, r1
 800201c:	6053      	str	r3, [r2, #4]
 800201e:	e7a2      	b.n	8001f66 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_MSI_DISABLE();
 8002020:	4a12      	ldr	r2, [pc, #72]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8002022:	6813      	ldr	r3, [r2, #0]
 8002024:	4918      	ldr	r1, [pc, #96]	; (8002088 <HAL_RCC_OscConfig+0x2f0>)
 8002026:	400b      	ands	r3, r1
 8002028:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800202a:	f7ff f8a9 	bl	8001180 <HAL_GetTick>
 800202e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	059b      	lsls	r3, r3, #22
 8002036:	d596      	bpl.n	8001f66 <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002038:	f7ff f8a2 	bl	8001180 <HAL_GetTick>
 800203c:	1b80      	subs	r0, r0, r6
 800203e:	2802      	cmp	r0, #2
 8002040:	d9f6      	bls.n	8002030 <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 8002042:	2003      	movs	r0, #3
 8002044:	e111      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
      __HAL_RCC_LSI_DISABLE();
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8002048:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800204a:	2101      	movs	r1, #1
 800204c:	438b      	bics	r3, r1
 800204e:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002050:	f7ff f896 	bl	8001180 <HAL_GetTick>
 8002054:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_OscConfig+0x2d4>)
 8002058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205a:	079b      	lsls	r3, r3, #30
 800205c:	d516      	bpl.n	800208c <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205e:	f7ff f88f 	bl	8001180 <HAL_GetTick>
 8002062:	1b80      	subs	r0, r0, r6
 8002064:	2802      	cmp	r0, #2
 8002066:	d9f6      	bls.n	8002056 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8002068:	2003      	movs	r0, #3
 800206a:	e0fe      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
 800206c:	40021000 	.word	0x40021000
 8002070:	fffeffff 	.word	0xfffeffff
 8002074:	fffbffff 	.word	0xfffbffff
 8002078:	ffffe0ff 	.word	0xffffe0ff
 800207c:	080033a4 	.word	0x080033a4
 8002080:	20000000 	.word	0x20000000
 8002084:	ffff1fff 	.word	0xffff1fff
 8002088:	fffffeff 	.word	0xfffffeff
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	075b      	lsls	r3, r3, #29
 8002090:	d578      	bpl.n	8002184 <HAL_RCC_OscConfig+0x3ec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b7d      	ldr	r3, [pc, #500]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	d42c      	bmi.n	80020f4 <HAL_RCC_OscConfig+0x35c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4a7b      	ldr	r2, [pc, #492]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 800209c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	055b      	lsls	r3, r3, #21
 80020a2:	430b      	orrs	r3, r1
 80020a4:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80020a6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	4b78      	ldr	r3, [pc, #480]	; (800228c <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	05db      	lsls	r3, r3, #23
 80020ae:	d523      	bpl.n	80020f8 <HAL_RCC_OscConfig+0x360>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b0:	68a3      	ldr	r3, [r4, #8]
 80020b2:	2280      	movs	r2, #128	; 0x80
 80020b4:	0052      	lsls	r2, r2, #1
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d032      	beq.n	8002120 <HAL_RCC_OscConfig+0x388>
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d137      	bne.n	800212e <HAL_RCC_OscConfig+0x396>
 80020be:	4b72      	ldr	r3, [pc, #456]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 80020c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020c2:	4973      	ldr	r1, [pc, #460]	; (8002290 <HAL_RCC_OscConfig+0x4f8>)
 80020c4:	400a      	ands	r2, r1
 80020c6:	651a      	str	r2, [r3, #80]	; 0x50
 80020c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ca:	4972      	ldr	r1, [pc, #456]	; (8002294 <HAL_RCC_OscConfig+0x4fc>)
 80020cc:	400a      	ands	r2, r1
 80020ce:	651a      	str	r2, [r3, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d0:	68a3      	ldr	r3, [r4, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d045      	beq.n	8002162 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80020d6:	f7ff f853 	bl	8001180 <HAL_GetTick>
 80020da:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020dc:	4b6a      	ldr	r3, [pc, #424]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 80020de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e0:	059b      	lsls	r3, r3, #22
 80020e2:	d44d      	bmi.n	8002180 <HAL_RCC_OscConfig+0x3e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7ff f84c 	bl	8001180 <HAL_GetTick>
 80020e8:	1bc0      	subs	r0, r0, r7
 80020ea:	4b6b      	ldr	r3, [pc, #428]	; (8002298 <HAL_RCC_OscConfig+0x500>)
 80020ec:	4298      	cmp	r0, r3
 80020ee:	d9f5      	bls.n	80020dc <HAL_RCC_OscConfig+0x344>
          return HAL_TIMEOUT;
 80020f0:	2003      	movs	r0, #3
 80020f2:	e0ba      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
    FlagStatus       pwrclkchanged = RESET;
 80020f4:	2600      	movs	r6, #0
 80020f6:	e7d7      	b.n	80020a8 <HAL_RCC_OscConfig+0x310>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f8:	4a64      	ldr	r2, [pc, #400]	; (800228c <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	6811      	ldr	r1, [r2, #0]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	430b      	orrs	r3, r1
 8002102:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002104:	f7ff f83c 	bl	8001180 <HAL_GetTick>
 8002108:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b60      	ldr	r3, [pc, #384]	; (800228c <HAL_RCC_OscConfig+0x4f4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	05db      	lsls	r3, r3, #23
 8002110:	d4ce      	bmi.n	80020b0 <HAL_RCC_OscConfig+0x318>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002112:	f7ff f835 	bl	8001180 <HAL_GetTick>
 8002116:	1bc0      	subs	r0, r0, r7
 8002118:	2864      	cmp	r0, #100	; 0x64
 800211a:	d9f6      	bls.n	800210a <HAL_RCC_OscConfig+0x372>
          return HAL_TIMEOUT;
 800211c:	2003      	movs	r0, #3
 800211e:	e0a4      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002120:	4a59      	ldr	r2, [pc, #356]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 8002122:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	430b      	orrs	r3, r1
 800212a:	6513      	str	r3, [r2, #80]	; 0x50
 800212c:	e7d0      	b.n	80020d0 <HAL_RCC_OscConfig+0x338>
 800212e:	22a0      	movs	r2, #160	; 0xa0
 8002130:	00d2      	lsls	r2, r2, #3
 8002132:	4293      	cmp	r3, r2
 8002134:	d009      	beq.n	800214a <HAL_RCC_OscConfig+0x3b2>
 8002136:	4b54      	ldr	r3, [pc, #336]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 8002138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800213a:	4955      	ldr	r1, [pc, #340]	; (8002290 <HAL_RCC_OscConfig+0x4f8>)
 800213c:	400a      	ands	r2, r1
 800213e:	651a      	str	r2, [r3, #80]	; 0x50
 8002140:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002142:	4954      	ldr	r1, [pc, #336]	; (8002294 <HAL_RCC_OscConfig+0x4fc>)
 8002144:	400a      	ands	r2, r1
 8002146:	651a      	str	r2, [r3, #80]	; 0x50
 8002148:	e7c2      	b.n	80020d0 <HAL_RCC_OscConfig+0x338>
 800214a:	4b4f      	ldr	r3, [pc, #316]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 800214c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800214e:	3a01      	subs	r2, #1
 8002150:	3aff      	subs	r2, #255	; 0xff
 8002152:	430a      	orrs	r2, r1
 8002154:	651a      	str	r2, [r3, #80]	; 0x50
 8002156:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	0052      	lsls	r2, r2, #1
 800215c:	430a      	orrs	r2, r1
 800215e:	651a      	str	r2, [r3, #80]	; 0x50
 8002160:	e7b6      	b.n	80020d0 <HAL_RCC_OscConfig+0x338>
      tickstart = HAL_GetTick();
 8002162:	f7ff f80d 	bl	8001180 <HAL_GetTick>
 8002166:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002168:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 800216a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216c:	059b      	lsls	r3, r3, #22
 800216e:	d507      	bpl.n	8002180 <HAL_RCC_OscConfig+0x3e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7ff f806 	bl	8001180 <HAL_GetTick>
 8002174:	1bc0      	subs	r0, r0, r7
 8002176:	4b48      	ldr	r3, [pc, #288]	; (8002298 <HAL_RCC_OscConfig+0x500>)
 8002178:	4298      	cmp	r0, r3
 800217a:	d9f5      	bls.n	8002168 <HAL_RCC_OscConfig+0x3d0>
          return HAL_TIMEOUT;
 800217c:	2003      	movs	r0, #3
 800217e:	e074      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
    if(pwrclkchanged == SET)
 8002180:	2e01      	cmp	r6, #1
 8002182:	d01a      	beq.n	80021ba <HAL_RCC_OscConfig+0x422>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002184:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002186:	2b00      	cmp	r3, #0
 8002188:	d100      	bne.n	800218c <HAL_RCC_OscConfig+0x3f4>
 800218a:	e076      	b.n	800227a <HAL_RCC_OscConfig+0x4e2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800218c:	2d0c      	cmp	r5, #12
 800218e:	d04f      	beq.n	8002230 <HAL_RCC_OscConfig+0x498>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002190:	2b02      	cmp	r3, #2
 8002192:	d018      	beq.n	80021c6 <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_DISABLE();
 8002194:	4a3c      	ldr	r2, [pc, #240]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 8002196:	6813      	ldr	r3, [r2, #0]
 8002198:	4940      	ldr	r1, [pc, #256]	; (800229c <HAL_RCC_OscConfig+0x504>)
 800219a:	400b      	ands	r3, r1
 800219c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800219e:	f7fe ffef 	bl	8001180 <HAL_GetTick>
 80021a2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021a4:	4b38      	ldr	r3, [pc, #224]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	d53f      	bpl.n	800222c <HAL_RCC_OscConfig+0x494>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe ffe8 	bl	8001180 <HAL_GetTick>
 80021b0:	1b00      	subs	r0, r0, r4
 80021b2:	2802      	cmp	r0, #2
 80021b4:	d9f6      	bls.n	80021a4 <HAL_RCC_OscConfig+0x40c>
            return HAL_TIMEOUT;
 80021b6:	2003      	movs	r0, #3
 80021b8:	e057      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ba:	4a33      	ldr	r2, [pc, #204]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 80021bc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80021be:	4938      	ldr	r1, [pc, #224]	; (80022a0 <HAL_RCC_OscConfig+0x508>)
 80021c0:	400b      	ands	r3, r1
 80021c2:	6393      	str	r3, [r2, #56]	; 0x38
 80021c4:	e7de      	b.n	8002184 <HAL_RCC_OscConfig+0x3ec>
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4a30      	ldr	r2, [pc, #192]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 80021c8:	6813      	ldr	r3, [r2, #0]
 80021ca:	4934      	ldr	r1, [pc, #208]	; (800229c <HAL_RCC_OscConfig+0x504>)
 80021cc:	400b      	ands	r3, r1
 80021ce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80021d0:	f7fe ffd6 	bl	8001180 <HAL_GetTick>
 80021d4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	019b      	lsls	r3, r3, #6
 80021dc:	d506      	bpl.n	80021ec <HAL_RCC_OscConfig+0x454>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021de:	f7fe ffcf 	bl	8001180 <HAL_GetTick>
 80021e2:	1b40      	subs	r0, r0, r5
 80021e4:	2802      	cmp	r0, #2
 80021e6:	d9f6      	bls.n	80021d6 <HAL_RCC_OscConfig+0x43e>
            return HAL_TIMEOUT;
 80021e8:	2003      	movs	r0, #3
 80021ea:	e03e      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ec:	4926      	ldr	r1, [pc, #152]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 80021ee:	68cb      	ldr	r3, [r1, #12]
 80021f0:	4a2c      	ldr	r2, [pc, #176]	; (80022a4 <HAL_RCC_OscConfig+0x50c>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80021f8:	4302      	orrs	r2, r0
 80021fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80021fc:	4302      	orrs	r2, r0
 80021fe:	4313      	orrs	r3, r2
 8002200:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 8002202:	680a      	ldr	r2, [r1, #0]
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	045b      	lsls	r3, r3, #17
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800220c:	f7fe ffb8 	bl	8001180 <HAL_GetTick>
 8002210:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	019b      	lsls	r3, r3, #6
 8002218:	d406      	bmi.n	8002228 <HAL_RCC_OscConfig+0x490>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe ffb1 	bl	8001180 <HAL_GetTick>
 800221e:	1b00      	subs	r0, r0, r4
 8002220:	2802      	cmp	r0, #2
 8002222:	d9f6      	bls.n	8002212 <HAL_RCC_OscConfig+0x47a>
            return HAL_TIMEOUT;
 8002224:	2003      	movs	r0, #3
 8002226:	e020      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
  return HAL_OK;
 8002228:	2000      	movs	r0, #0
 800222a:	e01e      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
 800222c:	2000      	movs	r0, #0
 800222e:	e01c      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002230:	2b01      	cmp	r3, #1
 8002232:	d024      	beq.n	800227e <HAL_RCC_OscConfig+0x4e6>
        pll_config = RCC->CFGR;
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_RCC_OscConfig+0x4f0>)
 8002236:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	025b      	lsls	r3, r3, #9
 800223c:	4013      	ands	r3, r2
 800223e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002240:	428b      	cmp	r3, r1
 8002242:	d001      	beq.n	8002248 <HAL_RCC_OscConfig+0x4b0>
          return HAL_ERROR;
 8002244:	2001      	movs	r0, #1
 8002246:	e010      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002248:	23f0      	movs	r3, #240	; 0xf0
 800224a:	039b      	lsls	r3, r3, #14
 800224c:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002250:	428b      	cmp	r3, r1
 8002252:	d001      	beq.n	8002258 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 8002254:	2001      	movs	r0, #1
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002258:	23c0      	movs	r3, #192	; 0xc0
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	401a      	ands	r2, r3
 800225e:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d00e      	beq.n	8002282 <HAL_RCC_OscConfig+0x4ea>
          return HAL_ERROR;
 8002264:	2001      	movs	r0, #1
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
    return HAL_ERROR;
 8002268:	2001      	movs	r0, #1
}
 800226a:	b003      	add	sp, #12
 800226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800226e:	2001      	movs	r0, #1
 8002270:	e7fb      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
        return HAL_ERROR;
 8002272:	2001      	movs	r0, #1
 8002274:	e7f9      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
        return HAL_ERROR;
 8002276:	2001      	movs	r0, #1
 8002278:	e7f7      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
  return HAL_OK;
 800227a:	2000      	movs	r0, #0
 800227c:	e7f5      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
        return HAL_ERROR;
 800227e:	2001      	movs	r0, #1
 8002280:	e7f3      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
  return HAL_OK;
 8002282:	2000      	movs	r0, #0
 8002284:	e7f1      	b.n	800226a <HAL_RCC_OscConfig+0x4d2>
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	40021000 	.word	0x40021000
 800228c:	40007000 	.word	0x40007000
 8002290:	fffffeff 	.word	0xfffffeff
 8002294:	fffffbff 	.word	0xfffffbff
 8002298:	00001388 	.word	0x00001388
 800229c:	feffffff 	.word	0xfeffffff
 80022a0:	efffffff 	.word	0xefffffff
 80022a4:	ff02ffff 	.word	0xff02ffff

080022a8 <HAL_RCC_ClockConfig>:
{
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	0004      	movs	r4, r0
 80022ac:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d100      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xc>
 80022b2:	e0ba      	b.n	800242a <HAL_RCC_ClockConfig+0x182>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b4:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <HAL_RCC_ClockConfig+0x18c>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2301      	movs	r3, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	428b      	cmp	r3, r1
 80022be:	d20b      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c0:	495c      	ldr	r1, [pc, #368]	; (8002434 <HAL_RCC_ClockConfig+0x18c>)
 80022c2:	680b      	ldr	r3, [r1, #0]
 80022c4:	2201      	movs	r2, #1
 80022c6:	4393      	bics	r3, r2
 80022c8:	432b      	orrs	r3, r5
 80022ca:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022cc:	680b      	ldr	r3, [r1, #0]
 80022ce:	401a      	ands	r2, r3
 80022d0:	4295      	cmp	r5, r2
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
 80022d6:	e0a7      	b.n	8002428 <HAL_RCC_ClockConfig+0x180>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	079b      	lsls	r3, r3, #30
 80022dc:	d506      	bpl.n	80022ec <HAL_RCC_ClockConfig+0x44>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022de:	4a56      	ldr	r2, [pc, #344]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 80022e0:	68d3      	ldr	r3, [r2, #12]
 80022e2:	21f0      	movs	r1, #240	; 0xf0
 80022e4:	438b      	bics	r3, r1
 80022e6:	68a1      	ldr	r1, [r4, #8]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	07db      	lsls	r3, r3, #31
 80022f0:	d564      	bpl.n	80023bc <HAL_RCC_ClockConfig+0x114>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f2:	6863      	ldr	r3, [r4, #4]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d025      	beq.n	8002344 <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d029      	beq.n	8002350 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d02d      	beq.n	800235c <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002300:	4a4d      	ldr	r2, [pc, #308]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	0592      	lsls	r2, r2, #22
 8002306:	d400      	bmi.n	800230a <HAL_RCC_ClockConfig+0x62>
 8002308:	e091      	b.n	800242e <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230a:	494b      	ldr	r1, [pc, #300]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 800230c:	68ca      	ldr	r2, [r1, #12]
 800230e:	2003      	movs	r0, #3
 8002310:	4382      	bics	r2, r0
 8002312:	4313      	orrs	r3, r2
 8002314:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8002316:	f7fe ff33 	bl	8001180 <HAL_GetTick>
 800231a:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231c:	6863      	ldr	r3, [r4, #4]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d022      	beq.n	8002368 <HAL_RCC_ClockConfig+0xc0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002322:	2b03      	cmp	r3, #3
 8002324:	d02e      	beq.n	8002384 <HAL_RCC_ClockConfig+0xdc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002326:	2b01      	cmp	r3, #1
 8002328:	d03a      	beq.n	80023a0 <HAL_RCC_ClockConfig+0xf8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	220c      	movs	r2, #12
 8002330:	421a      	tst	r2, r3
 8002332:	d043      	beq.n	80023bc <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7fe ff24 	bl	8001180 <HAL_GetTick>
 8002338:	1b80      	subs	r0, r0, r6
 800233a:	4b40      	ldr	r3, [pc, #256]	; (800243c <HAL_RCC_ClockConfig+0x194>)
 800233c:	4298      	cmp	r0, r3
 800233e:	d9f4      	bls.n	800232a <HAL_RCC_ClockConfig+0x82>
          return HAL_TIMEOUT;
 8002340:	2003      	movs	r0, #3
 8002342:	e071      	b.n	8002428 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002344:	4a3c      	ldr	r2, [pc, #240]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	0392      	lsls	r2, r2, #14
 800234a:	d4de      	bmi.n	800230a <HAL_RCC_ClockConfig+0x62>
        return HAL_ERROR;
 800234c:	2001      	movs	r0, #1
 800234e:	e06b      	b.n	8002428 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002350:	4a39      	ldr	r2, [pc, #228]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	0192      	lsls	r2, r2, #6
 8002356:	d4d8      	bmi.n	800230a <HAL_RCC_ClockConfig+0x62>
        return HAL_ERROR;
 8002358:	2001      	movs	r0, #1
 800235a:	e065      	b.n	8002428 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800235c:	4a36      	ldr	r2, [pc, #216]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	0752      	lsls	r2, r2, #29
 8002362:	d4d2      	bmi.n	800230a <HAL_RCC_ClockConfig+0x62>
        return HAL_ERROR;
 8002364:	2001      	movs	r0, #1
 8002366:	e05f      	b.n	8002428 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002368:	4b33      	ldr	r3, [pc, #204]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	230c      	movs	r3, #12
 800236e:	4013      	ands	r3, r2
 8002370:	2b08      	cmp	r3, #8
 8002372:	d023      	beq.n	80023bc <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7fe ff04 	bl	8001180 <HAL_GetTick>
 8002378:	1b80      	subs	r0, r0, r6
 800237a:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_RCC_ClockConfig+0x194>)
 800237c:	4298      	cmp	r0, r3
 800237e:	d9f3      	bls.n	8002368 <HAL_RCC_ClockConfig+0xc0>
          return HAL_TIMEOUT;
 8002380:	2003      	movs	r0, #3
 8002382:	e051      	b.n	8002428 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002384:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	230c      	movs	r3, #12
 800238a:	4013      	ands	r3, r2
 800238c:	2b0c      	cmp	r3, #12
 800238e:	d015      	beq.n	80023bc <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002390:	f7fe fef6 	bl	8001180 <HAL_GetTick>
 8002394:	1b80      	subs	r0, r0, r6
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <HAL_RCC_ClockConfig+0x194>)
 8002398:	4298      	cmp	r0, r3
 800239a:	d9f3      	bls.n	8002384 <HAL_RCC_ClockConfig+0xdc>
          return HAL_TIMEOUT;
 800239c:	2003      	movs	r0, #3
 800239e:	e043      	b.n	8002428 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	230c      	movs	r3, #12
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d007      	beq.n	80023bc <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7fe fee8 	bl	8001180 <HAL_GetTick>
 80023b0:	1b80      	subs	r0, r0, r6
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <HAL_RCC_ClockConfig+0x194>)
 80023b4:	4298      	cmp	r0, r3
 80023b6:	d9f3      	bls.n	80023a0 <HAL_RCC_ClockConfig+0xf8>
          return HAL_TIMEOUT;
 80023b8:	2003      	movs	r0, #3
 80023ba:	e035      	b.n	8002428 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_RCC_ClockConfig+0x18c>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2301      	movs	r3, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	429d      	cmp	r5, r3
 80023c6:	d20b      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c8:	491a      	ldr	r1, [pc, #104]	; (8002434 <HAL_RCC_ClockConfig+0x18c>)
 80023ca:	680b      	ldr	r3, [r1, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	4393      	bics	r3, r2
 80023d0:	432b      	orrs	r3, r5
 80023d2:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d4:	680b      	ldr	r3, [r1, #0]
 80023d6:	401a      	ands	r2, r3
 80023d8:	4295      	cmp	r5, r2
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 80023dc:	2001      	movs	r0, #1
 80023de:	e023      	b.n	8002428 <HAL_RCC_ClockConfig+0x180>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	075b      	lsls	r3, r3, #29
 80023e4:	d506      	bpl.n	80023f4 <HAL_RCC_ClockConfig+0x14c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e6:	4a14      	ldr	r2, [pc, #80]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 80023e8:	68d3      	ldr	r3, [r2, #12]
 80023ea:	4915      	ldr	r1, [pc, #84]	; (8002440 <HAL_RCC_ClockConfig+0x198>)
 80023ec:	400b      	ands	r3, r1
 80023ee:	68e1      	ldr	r1, [r4, #12]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	071b      	lsls	r3, r3, #28
 80023f8:	d507      	bpl.n	800240a <HAL_RCC_ClockConfig+0x162>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023fa:	490f      	ldr	r1, [pc, #60]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 80023fc:	68cb      	ldr	r3, [r1, #12]
 80023fe:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_RCC_ClockConfig+0x19c>)
 8002400:	4013      	ands	r3, r2
 8002402:	6922      	ldr	r2, [r4, #16]
 8002404:	00d2      	lsls	r2, r2, #3
 8002406:	4313      	orrs	r3, r2
 8002408:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800240a:	f7ff fc7b 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_RCC_ClockConfig+0x190>)
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	0912      	lsrs	r2, r2, #4
 8002414:	230f      	movs	r3, #15
 8002416:	4013      	ands	r3, r2
 8002418:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <HAL_RCC_ClockConfig+0x1a0>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	40d8      	lsrs	r0, r3
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_ClockConfig+0x1a4>)
 8002420:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002422:	2000      	movs	r0, #0
 8002424:	f7fe fe78 	bl	8001118 <HAL_InitTick>
}
 8002428:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800242a:	2001      	movs	r0, #1
 800242c:	e7fc      	b.n	8002428 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 800242e:	2001      	movs	r0, #1
 8002430:	e7fa      	b.n	8002428 <HAL_RCC_ClockConfig+0x180>
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	40022000 	.word	0x40022000
 8002438:	40021000 	.word	0x40021000
 800243c:	00001388 	.word	0x00001388
 8002440:	fffff8ff 	.word	0xfffff8ff
 8002444:	ffffc7ff 	.word	0xffffc7ff
 8002448:	080033a4 	.word	0x080033a4
 800244c:	20000000 	.word	0x20000000

08002450 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002454:	6803      	ldr	r3, [r0, #0]
 8002456:	069b      	lsls	r3, r3, #26
 8002458:	d54c      	bpl.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245a:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	d500      	bpl.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8002462:	e071      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002464:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002466:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	055b      	lsls	r3, r3, #21
 800246c:	430b      	orrs	r3, r1
 800246e:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8002470:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002472:	4b56      	ldr	r3, [pc, #344]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	05db      	lsls	r3, r3, #23
 8002478:	d568      	bpl.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xfc>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800247a:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	23c0      	movs	r3, #192	; 0xc0
 8002480:	039b      	lsls	r3, r3, #14
 8002482:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002484:	6862      	ldr	r2, [r4, #4]
 8002486:	4013      	ands	r3, r2
 8002488:	4299      	cmp	r1, r3
 800248a:	d006      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x4a>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800248c:	23c0      	movs	r3, #192	; 0xc0
 800248e:	029b      	lsls	r3, r3, #10
 8002490:	0011      	movs	r1, r2
 8002492:	4019      	ands	r1, r3
 8002494:	4299      	cmp	r1, r3
 8002496:	d100      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002498:	e06d      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x126>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800249a:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800249c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249e:	21c0      	movs	r1, #192	; 0xc0
 80024a0:	0289      	lsls	r1, r1, #10
 80024a2:	400b      	ands	r3, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80024a4:	d015      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
 80024a6:	400a      	ands	r2, r1
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d012      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	069b      	lsls	r3, r3, #26
 80024b0:	d50f      	bpl.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80024b2:	4b45      	ldr	r3, [pc, #276]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024b4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80024b6:	4a46      	ldr	r2, [pc, #280]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80024b8:	4002      	ands	r2, r0

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ba:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	0309      	lsls	r1, r1, #12
 80024c0:	4331      	orrs	r1, r6
 80024c2:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80024c6:	4e43      	ldr	r6, [pc, #268]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024c8:	4031      	ands	r1, r6
 80024ca:	6519      	str	r1, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80024cc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80024ce:	05c3      	lsls	r3, r0, #23
 80024d0:	d458      	bmi.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x134>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d2:	6862      	ldr	r2, [r4, #4]
 80024d4:	23c0      	movs	r3, #192	; 0xc0
 80024d6:	029b      	lsls	r3, r3, #10
 80024d8:	0011      	movs	r1, r2
 80024da:	4019      	ands	r1, r3
 80024dc:	4299      	cmp	r1, r3
 80024de:	d060      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024e0:	4939      	ldr	r1, [pc, #228]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024e2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80024e4:	22c0      	movs	r2, #192	; 0xc0
 80024e6:	0292      	lsls	r2, r2, #10
 80024e8:	6860      	ldr	r0, [r4, #4]
 80024ea:	4002      	ands	r2, r0
 80024ec:	4313      	orrs	r3, r2
 80024ee:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024f0:	2d01      	cmp	r5, #1
 80024f2:	d060      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	079b      	lsls	r3, r3, #30
 80024f8:	d506      	bpl.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024fa:	4a33      	ldr	r2, [pc, #204]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80024fc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80024fe:	210c      	movs	r1, #12
 8002500:	438b      	bics	r3, r1
 8002502:	68a1      	ldr	r1, [r4, #8]
 8002504:	430b      	orrs	r3, r1
 8002506:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	075b      	lsls	r3, r3, #29
 800250c:	d506      	bpl.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800250e:	4a2e      	ldr	r2, [pc, #184]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002510:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002512:	4931      	ldr	r1, [pc, #196]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002514:	400b      	ands	r3, r1
 8002516:	68e1      	ldr	r1, [r4, #12]
 8002518:	430b      	orrs	r3, r1
 800251a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	071b      	lsls	r3, r3, #28
 8002520:	d506      	bpl.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002522:	4a29      	ldr	r2, [pc, #164]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002524:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002526:	492d      	ldr	r1, [pc, #180]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002528:	400b      	ands	r3, r1
 800252a:	6921      	ldr	r1, [r4, #16]
 800252c:	430b      	orrs	r3, r1
 800252e:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	061b      	lsls	r3, r3, #24
 8002534:	d545      	bpl.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002536:	4a24      	ldr	r2, [pc, #144]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002538:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800253a:	4929      	ldr	r1, [pc, #164]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800253c:	400b      	ands	r3, r1
 800253e:	6961      	ldr	r1, [r4, #20]
 8002540:	430b      	orrs	r3, r1
 8002542:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8002544:	2000      	movs	r0, #0
}
 8002546:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002548:	2500      	movs	r5, #0
 800254a:	e792      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 800254e:	6811      	ldr	r1, [r2, #0]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	430b      	orrs	r3, r1
 8002556:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002558:	f7fe fe12 	bl	8001180 <HAL_GetTick>
 800255c:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	05db      	lsls	r3, r3, #23
 8002564:	d500      	bpl.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8002566:	e788      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x2a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe fe0a 	bl	8001180 <HAL_GetTick>
 800256c:	1b80      	subs	r0, r0, r6
 800256e:	2864      	cmp	r0, #100	; 0x64
 8002570:	d9f5      	bls.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x10e>
          return HAL_TIMEOUT;
 8002572:	2003      	movs	r0, #3
 8002574:	e7e7      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xf6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	039b      	lsls	r3, r3, #14
 800257c:	d400      	bmi.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800257e:	e78c      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x4a>
          return HAL_ERROR;
 8002580:	2001      	movs	r0, #1
 8002582:	e7e0      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xf6>
        tickstart = HAL_GetTick();
 8002584:	f7fe fdfc 	bl	8001180 <HAL_GetTick>
 8002588:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800258c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258e:	059b      	lsls	r3, r3, #22
 8002590:	d49f      	bmi.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fdf5 	bl	8001180 <HAL_GetTick>
 8002596:	1b80      	subs	r0, r0, r6
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800259a:	4298      	cmp	r0, r3
 800259c:	d9f5      	bls.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x13a>
            return HAL_TIMEOUT;
 800259e:	2003      	movs	r0, #3
 80025a0:	e7d1      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a2:	4909      	ldr	r1, [pc, #36]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80025a4:	680b      	ldr	r3, [r1, #0]
 80025a6:	4810      	ldr	r0, [pc, #64]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80025a8:	4003      	ands	r3, r0
 80025aa:	20c0      	movs	r0, #192	; 0xc0
 80025ac:	0380      	lsls	r0, r0, #14
 80025ae:	4002      	ands	r2, r0
 80025b0:	431a      	orrs	r2, r3
 80025b2:	600a      	str	r2, [r1, #0]
 80025b4:	e794      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b6:	000a      	movs	r2, r1
 80025b8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80025ba:	490c      	ldr	r1, [pc, #48]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80025bc:	400b      	ands	r3, r1
 80025be:	6393      	str	r3, [r2, #56]	; 0x38
 80025c0:	e798      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  return HAL_OK;
 80025c2:	2000      	movs	r0, #0
 80025c4:	e7bf      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
 80025d0:	fffcffff 	.word	0xfffcffff
 80025d4:	fff7ffff 	.word	0xfff7ffff
 80025d8:	fffff3ff 	.word	0xfffff3ff
 80025dc:	ffffcfff 	.word	0xffffcfff
 80025e0:	fff3ffff 	.word	0xfff3ffff
 80025e4:	00001388 	.word	0x00001388
 80025e8:	ffcfffff 	.word	0xffcfffff
 80025ec:	efffffff 	.word	0xefffffff

080025f0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025f0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	05d2      	lsls	r2, r2, #23
 80025f6:	4290      	cmp	r0, r2
 80025f8:	d015      	beq.n	8002626 <TIM_Base_SetConfig+0x36>
 80025fa:	4a10      	ldr	r2, [pc, #64]	; (800263c <TIM_Base_SetConfig+0x4c>)
 80025fc:	4290      	cmp	r0, r2
 80025fe:	d012      	beq.n	8002626 <TIM_Base_SetConfig+0x36>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002600:	2280      	movs	r2, #128	; 0x80
 8002602:	05d2      	lsls	r2, r2, #23
 8002604:	4290      	cmp	r0, r2
 8002606:	d013      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002608:	4a0c      	ldr	r2, [pc, #48]	; (800263c <TIM_Base_SetConfig+0x4c>)
 800260a:	4290      	cmp	r0, r2
 800260c:	d010      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800260e:	2280      	movs	r2, #128	; 0x80
 8002610:	4393      	bics	r3, r2
 8002612:	690a      	ldr	r2, [r1, #16]
 8002614:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002616:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002618:	688b      	ldr	r3, [r1, #8]
 800261a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800261c:	680b      	ldr	r3, [r1, #0]
 800261e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002620:	2301      	movs	r3, #1
 8002622:	6143      	str	r3, [r0, #20]
}
 8002624:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002626:	2270      	movs	r2, #112	; 0x70
 8002628:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800262a:	684a      	ldr	r2, [r1, #4]
 800262c:	4313      	orrs	r3, r2
 800262e:	e7e7      	b.n	8002600 <TIM_Base_SetConfig+0x10>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <TIM_Base_SetConfig+0x50>)
 8002632:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002634:	68ca      	ldr	r2, [r1, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	e7e9      	b.n	800260e <TIM_Base_SetConfig+0x1e>
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	40010800 	.word	0x40010800
 8002640:	fffffcff 	.word	0xfffffcff

08002644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002644:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002646:	6a03      	ldr	r3, [r0, #32]
 8002648:	2201      	movs	r2, #1
 800264a:	4393      	bics	r3, r2
 800264c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002650:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002652:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002654:	2573      	movs	r5, #115	; 0x73
 8002656:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002658:	680d      	ldr	r5, [r1, #0]
 800265a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800265c:	2502      	movs	r5, #2
 800265e:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002660:	688d      	ldr	r5, [r1, #8]
 8002662:	432b      	orrs	r3, r5

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002664:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002666:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002668:	684a      	ldr	r2, [r1, #4]
 800266a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266c:	6203      	str	r3, [r0, #32]
}
 800266e:	bd30      	pop	{r4, r5, pc}

08002670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002670:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002672:	6a03      	ldr	r3, [r0, #32]
 8002674:	2210      	movs	r2, #16
 8002676:	4393      	bics	r3, r2
 8002678:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800267a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800267c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800267e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002680:	4c07      	ldr	r4, [pc, #28]	; (80026a0 <TIM_OC2_SetConfig+0x30>)
 8002682:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002684:	680c      	ldr	r4, [r1, #0]
 8002686:	0224      	lsls	r4, r4, #8
 8002688:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800268a:	2420      	movs	r4, #32
 800268c:	43a3      	bics	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800268e:	688c      	ldr	r4, [r1, #8]
 8002690:	0124      	lsls	r4, r4, #4
 8002692:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002694:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002696:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002698:	684a      	ldr	r2, [r1, #4]
 800269a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800269c:	6203      	str	r3, [r0, #32]
}
 800269e:	bd30      	pop	{r4, r5, pc}
 80026a0:	ffff8cff 	.word	0xffff8cff

080026a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026a6:	6a03      	ldr	r3, [r0, #32]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <TIM_OC3_SetConfig+0x30>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026b2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026b4:	2473      	movs	r4, #115	; 0x73
 80026b6:	43a2      	bics	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026b8:	680c      	ldr	r4, [r1, #0]
 80026ba:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026bc:	4c06      	ldr	r4, [pc, #24]	; (80026d8 <TIM_OC3_SetConfig+0x34>)
 80026be:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026c0:	688c      	ldr	r4, [r1, #8]
 80026c2:	0224      	lsls	r4, r4, #8
 80026c4:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026c6:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026c8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026ca:	684a      	ldr	r2, [r1, #4]
 80026cc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ce:	6203      	str	r3, [r0, #32]
}
 80026d0:	bd30      	pop	{r4, r5, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	fffffeff 	.word	0xfffffeff
 80026d8:	fffffdff 	.word	0xfffffdff

080026dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026dc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026de:	6a03      	ldr	r3, [r0, #32]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <TIM_OC4_SetConfig+0x30>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026ec:	4c08      	ldr	r4, [pc, #32]	; (8002710 <TIM_OC4_SetConfig+0x34>)
 80026ee:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026f0:	680c      	ldr	r4, [r1, #0]
 80026f2:	0224      	lsls	r4, r4, #8
 80026f4:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026f6:	4c07      	ldr	r4, [pc, #28]	; (8002714 <TIM_OC4_SetConfig+0x38>)
 80026f8:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026fa:	688c      	ldr	r4, [r1, #8]
 80026fc:	0324      	lsls	r4, r4, #12
 80026fe:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002700:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002702:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002704:	684a      	ldr	r2, [r1, #4]
 8002706:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002708:	6203      	str	r3, [r0, #32]
}
 800270a:	bd30      	pop	{r4, r5, pc}
 800270c:	ffffefff 	.word	0xffffefff
 8002710:	ffff8cff 	.word	0xffff8cff
 8002714:	ffffdfff 	.word	0xffffdfff

08002718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002718:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800271a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800271c:	6a04      	ldr	r4, [r0, #32]
 800271e:	2501      	movs	r5, #1
 8002720:	43ac      	bics	r4, r5
 8002722:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002724:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002726:	35ef      	adds	r5, #239	; 0xef
 8002728:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800272e:	240a      	movs	r4, #10
 8002730:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8002732:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002734:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002736:	6201      	str	r1, [r0, #32]
}
 8002738:	bd30      	pop	{r4, r5, pc}
	...

0800273c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800273c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800273e:	6a03      	ldr	r3, [r0, #32]
 8002740:	2410      	movs	r4, #16
 8002742:	43a3      	bics	r3, r4
 8002744:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002746:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002748:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800274a:	4d05      	ldr	r5, [pc, #20]	; (8002760 <TIM_TI2_ConfigInputStage+0x24>)
 800274c:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800274e:	0312      	lsls	r2, r2, #12
 8002750:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002752:	24a0      	movs	r4, #160	; 0xa0
 8002754:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002756:	0109      	lsls	r1, r1, #4
 8002758:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800275a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800275c:	6201      	str	r1, [r0, #32]
}
 800275e:	bd30      	pop	{r4, r5, pc}
 8002760:	ffff0fff 	.word	0xffff0fff

08002764 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002764:	000b      	movs	r3, r1
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002766:	6881      	ldr	r1, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002768:	2270      	movs	r2, #112	; 0x70
 800276a:	4391      	bics	r1, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800276c:	4319      	orrs	r1, r3
 800276e:	2307      	movs	r3, #7
 8002770:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002772:	6081      	str	r1, [r0, #8]
}
 8002774:	4770      	bx	lr
	...

08002778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002778:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800277a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800277c:	4d03      	ldr	r5, [pc, #12]	; (800278c <TIM_ETR_SetConfig+0x14>)
 800277e:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	431a      	orrs	r2, r3
 8002784:	4311      	orrs	r1, r2
 8002786:	4321      	orrs	r1, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002788:	6081      	str	r1, [r0, #8]
}
 800278a:	bd30      	pop	{r4, r5, pc}
 800278c:	ffff00ff 	.word	0xffff00ff

08002790 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002790:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002792:	231f      	movs	r3, #31
 8002794:	4019      	ands	r1, r3
 8002796:	2401      	movs	r4, #1
 8002798:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800279a:	6a03      	ldr	r3, [r0, #32]
 800279c:	43a3      	bics	r3, r4
 800279e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027a0:	6a03      	ldr	r3, [r0, #32]
 80027a2:	408a      	lsls	r2, r1
 80027a4:	431a      	orrs	r2, r3
 80027a6:	6202      	str	r2, [r0, #32]
}
 80027a8:	bd10      	pop	{r4, pc}

080027aa <HAL_TIM_Base_Init>:
{
 80027aa:	b570      	push	{r4, r5, r6, lr}
 80027ac:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80027ae:	d014      	beq.n	80027da <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80027b0:	2339      	movs	r3, #57	; 0x39
 80027b2:	5cc3      	ldrb	r3, [r0, r3]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80027b8:	2539      	movs	r5, #57	; 0x39
 80027ba:	2302      	movs	r3, #2
 80027bc:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027be:	1d21      	adds	r1, r4, #4
 80027c0:	6820      	ldr	r0, [r4, #0]
 80027c2:	f7ff ff15 	bl	80025f0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80027c6:	2301      	movs	r3, #1
 80027c8:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80027ca:	2000      	movs	r0, #0
}
 80027cc:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80027ce:	2200      	movs	r2, #0
 80027d0:	3338      	adds	r3, #56	; 0x38
 80027d2:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80027d4:	f000 fcaa 	bl	800312c <HAL_TIM_Base_MspInit>
 80027d8:	e7ee      	b.n	80027b8 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80027da:	2001      	movs	r0, #1
 80027dc:	e7f6      	b.n	80027cc <HAL_TIM_Base_Init+0x22>

080027de <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027de:	6802      	ldr	r2, [r0, #0]
 80027e0:	68d3      	ldr	r3, [r2, #12]
 80027e2:	2101      	movs	r1, #1
 80027e4:	430b      	orrs	r3, r1
 80027e6:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e8:	6802      	ldr	r2, [r0, #0]
 80027ea:	6891      	ldr	r1, [r2, #8]
 80027ec:	2307      	movs	r3, #7
 80027ee:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f0:	2b06      	cmp	r3, #6
 80027f2:	d003      	beq.n	80027fc <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 80027f4:	6813      	ldr	r3, [r2, #0]
 80027f6:	2101      	movs	r1, #1
 80027f8:	430b      	orrs	r3, r1
 80027fa:	6013      	str	r3, [r2, #0]
}
 80027fc:	2000      	movs	r0, #0
 80027fe:	4770      	bx	lr

08002800 <HAL_TIM_PWM_MspInit>:
}
 8002800:	4770      	bx	lr

08002802 <HAL_TIM_PWM_Init>:
{
 8002802:	b570      	push	{r4, r5, r6, lr}
 8002804:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002806:	d014      	beq.n	8002832 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002808:	2339      	movs	r3, #57	; 0x39
 800280a:	5cc3      	ldrb	r3, [r0, r3]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	2539      	movs	r5, #57	; 0x39
 8002812:	2302      	movs	r3, #2
 8002814:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002816:	1d21      	adds	r1, r4, #4
 8002818:	6820      	ldr	r0, [r4, #0]
 800281a:	f7ff fee9 	bl	80025f0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800281e:	2301      	movs	r3, #1
 8002820:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002822:	2000      	movs	r0, #0
}
 8002824:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002826:	2200      	movs	r2, #0
 8002828:	3338      	adds	r3, #56	; 0x38
 800282a:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800282c:	f7ff ffe8 	bl	8002800 <HAL_TIM_PWM_MspInit>
 8002830:	e7ee      	b.n	8002810 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8002832:	2001      	movs	r0, #1
 8002834:	e7f6      	b.n	8002824 <HAL_TIM_PWM_Init+0x22>

08002836 <HAL_TIM_PWM_Start_IT>:
{
 8002836:	b510      	push	{r4, lr}
 8002838:	0004      	movs	r4, r0
  switch (Channel)
 800283a:	2904      	cmp	r1, #4
 800283c:	d021      	beq.n	8002882 <HAL_TIM_PWM_Start_IT+0x4c>
 800283e:	d909      	bls.n	8002854 <HAL_TIM_PWM_Start_IT+0x1e>
 8002840:	2908      	cmp	r1, #8
 8002842:	d024      	beq.n	800288e <HAL_TIM_PWM_Start_IT+0x58>
 8002844:	290c      	cmp	r1, #12
 8002846:	d10c      	bne.n	8002862 <HAL_TIM_PWM_Start_IT+0x2c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002848:	6802      	ldr	r2, [r0, #0]
 800284a:	68d3      	ldr	r3, [r2, #12]
 800284c:	2010      	movs	r0, #16
 800284e:	4303      	orrs	r3, r0
 8002850:	60d3      	str	r3, [r2, #12]
      break;
 8002852:	e006      	b.n	8002862 <HAL_TIM_PWM_Start_IT+0x2c>
  switch (Channel)
 8002854:	2900      	cmp	r1, #0
 8002856:	d104      	bne.n	8002862 <HAL_TIM_PWM_Start_IT+0x2c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002858:	6802      	ldr	r2, [r0, #0]
 800285a:	68d3      	ldr	r3, [r2, #12]
 800285c:	2002      	movs	r0, #2
 800285e:	4303      	orrs	r3, r0
 8002860:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002862:	2201      	movs	r2, #1
 8002864:	6820      	ldr	r0, [r4, #0]
 8002866:	f7ff ff93 	bl	8002790 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800286a:	6822      	ldr	r2, [r4, #0]
 800286c:	6891      	ldr	r1, [r2, #8]
 800286e:	2307      	movs	r3, #7
 8002870:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002872:	2b06      	cmp	r3, #6
 8002874:	d003      	beq.n	800287e <HAL_TIM_PWM_Start_IT+0x48>
    __HAL_TIM_ENABLE(htim);
 8002876:	6813      	ldr	r3, [r2, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	430b      	orrs	r3, r1
 800287c:	6013      	str	r3, [r2, #0]
}
 800287e:	2000      	movs	r0, #0
 8002880:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002882:	6802      	ldr	r2, [r0, #0]
 8002884:	68d3      	ldr	r3, [r2, #12]
 8002886:	2004      	movs	r0, #4
 8002888:	4303      	orrs	r3, r0
 800288a:	60d3      	str	r3, [r2, #12]
      break;
 800288c:	e7e9      	b.n	8002862 <HAL_TIM_PWM_Start_IT+0x2c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800288e:	6802      	ldr	r2, [r0, #0]
 8002890:	68d3      	ldr	r3, [r2, #12]
 8002892:	2008      	movs	r0, #8
 8002894:	4303      	orrs	r3, r0
 8002896:	60d3      	str	r3, [r2, #12]
      break;
 8002898:	e7e3      	b.n	8002862 <HAL_TIM_PWM_Start_IT+0x2c>
	...

0800289c <HAL_TIM_PWM_ConfigChannel>:
{
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	0004      	movs	r4, r0
 80028a0:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80028a2:	2338      	movs	r3, #56	; 0x38
 80028a4:	5cc3      	ldrb	r3, [r0, r3]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d069      	beq.n	800297e <HAL_TIM_PWM_ConfigChannel+0xe2>
 80028aa:	2101      	movs	r1, #1
 80028ac:	2338      	movs	r3, #56	; 0x38
 80028ae:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	3101      	adds	r1, #1
 80028b2:	3301      	adds	r3, #1
 80028b4:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 80028b6:	2a04      	cmp	r2, #4
 80028b8:	d037      	beq.n	800292a <HAL_TIM_PWM_ConfigChannel+0x8e>
 80028ba:	d919      	bls.n	80028f0 <HAL_TIM_PWM_ConfigChannel+0x54>
 80028bc:	2a08      	cmp	r2, #8
 80028be:	d04a      	beq.n	8002956 <HAL_TIM_PWM_ConfigChannel+0xba>
 80028c0:	2a0c      	cmp	r2, #12
 80028c2:	d12a      	bne.n	800291a <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028c4:	0029      	movs	r1, r5
 80028c6:	6800      	ldr	r0, [r0, #0]
 80028c8:	f7ff ff08 	bl	80026dc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028cc:	6822      	ldr	r2, [r4, #0]
 80028ce:	69d1      	ldr	r1, [r2, #28]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	430b      	orrs	r3, r1
 80028d6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028d8:	6822      	ldr	r2, [r4, #0]
 80028da:	69d3      	ldr	r3, [r2, #28]
 80028dc:	4929      	ldr	r1, [pc, #164]	; (8002984 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 80028de:	400b      	ands	r3, r1
 80028e0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028e2:	6821      	ldr	r1, [r4, #0]
 80028e4:	69cb      	ldr	r3, [r1, #28]
 80028e6:	68ea      	ldr	r2, [r5, #12]
 80028e8:	0212      	lsls	r2, r2, #8
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61cb      	str	r3, [r1, #28]
      break;
 80028ee:	e014      	b.n	800291a <HAL_TIM_PWM_ConfigChannel+0x7e>
  switch (Channel)
 80028f0:	2a00      	cmp	r2, #0
 80028f2:	d112      	bne.n	800291a <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028f4:	0029      	movs	r1, r5
 80028f6:	6800      	ldr	r0, [r0, #0]
 80028f8:	f7ff fea4 	bl	8002644 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028fc:	6822      	ldr	r2, [r4, #0]
 80028fe:	6993      	ldr	r3, [r2, #24]
 8002900:	2108      	movs	r1, #8
 8002902:	430b      	orrs	r3, r1
 8002904:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002906:	6822      	ldr	r2, [r4, #0]
 8002908:	6993      	ldr	r3, [r2, #24]
 800290a:	3904      	subs	r1, #4
 800290c:	438b      	bics	r3, r1
 800290e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002910:	6822      	ldr	r2, [r4, #0]
 8002912:	6993      	ldr	r3, [r2, #24]
 8002914:	68e9      	ldr	r1, [r5, #12]
 8002916:	430b      	orrs	r3, r1
 8002918:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800291a:	2201      	movs	r2, #1
 800291c:	2339      	movs	r3, #57	; 0x39
 800291e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8002920:	2200      	movs	r2, #0
 8002922:	3b01      	subs	r3, #1
 8002924:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002926:	2000      	movs	r0, #0
}
 8002928:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800292a:	0029      	movs	r1, r5
 800292c:	6800      	ldr	r0, [r0, #0]
 800292e:	f7ff fe9f 	bl	8002670 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002932:	6822      	ldr	r2, [r4, #0]
 8002934:	6991      	ldr	r1, [r2, #24]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	430b      	orrs	r3, r1
 800293c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800293e:	6822      	ldr	r2, [r4, #0]
 8002940:	6993      	ldr	r3, [r2, #24]
 8002942:	4910      	ldr	r1, [pc, #64]	; (8002984 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8002944:	400b      	ands	r3, r1
 8002946:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002948:	6821      	ldr	r1, [r4, #0]
 800294a:	698b      	ldr	r3, [r1, #24]
 800294c:	68ea      	ldr	r2, [r5, #12]
 800294e:	0212      	lsls	r2, r2, #8
 8002950:	4313      	orrs	r3, r2
 8002952:	618b      	str	r3, [r1, #24]
      break;
 8002954:	e7e1      	b.n	800291a <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002956:	0029      	movs	r1, r5
 8002958:	6800      	ldr	r0, [r0, #0]
 800295a:	f7ff fea3 	bl	80026a4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800295e:	6822      	ldr	r2, [r4, #0]
 8002960:	69d3      	ldr	r3, [r2, #28]
 8002962:	2108      	movs	r1, #8
 8002964:	430b      	orrs	r3, r1
 8002966:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002968:	6822      	ldr	r2, [r4, #0]
 800296a:	69d3      	ldr	r3, [r2, #28]
 800296c:	3904      	subs	r1, #4
 800296e:	438b      	bics	r3, r1
 8002970:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002972:	6822      	ldr	r2, [r4, #0]
 8002974:	69d3      	ldr	r3, [r2, #28]
 8002976:	68e9      	ldr	r1, [r5, #12]
 8002978:	430b      	orrs	r3, r1
 800297a:	61d3      	str	r3, [r2, #28]
      break;
 800297c:	e7cd      	b.n	800291a <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 800297e:	2002      	movs	r0, #2
 8002980:	e7d2      	b.n	8002928 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	fffffbff 	.word	0xfffffbff

08002988 <HAL_TIM_ConfigClockSource>:
{
 8002988:	b510      	push	{r4, lr}
 800298a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800298c:	2338      	movs	r3, #56	; 0x38
 800298e:	5cc3      	ldrb	r3, [r0, r3]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d066      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0xda>
 8002994:	2201      	movs	r2, #1
 8002996:	2338      	movs	r3, #56	; 0x38
 8002998:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 800299a:	3201      	adds	r2, #1
 800299c:	3301      	adds	r3, #1
 800299e:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80029a0:	6802      	ldr	r2, [r0, #0]
 80029a2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a4:	4830      	ldr	r0, [pc, #192]	; (8002a68 <HAL_TIM_ConfigClockSource+0xe0>)
 80029a6:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80029a8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80029aa:	680b      	ldr	r3, [r1, #0]
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d04e      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0xc6>
 80029b0:	d915      	bls.n	80029de <HAL_TIM_ConfigClockSource+0x56>
 80029b2:	2b60      	cmp	r3, #96	; 0x60
 80029b4:	d041      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0xb2>
 80029b6:	d921      	bls.n	80029fc <HAL_TIM_ConfigClockSource+0x74>
 80029b8:	2b70      	cmp	r3, #112	; 0x70
 80029ba:	d02b      	beq.n	8002a14 <HAL_TIM_ConfigClockSource+0x8c>
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	0192      	lsls	r2, r2, #6
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d132      	bne.n	8002a2a <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 80029c4:	68cb      	ldr	r3, [r1, #12]
 80029c6:	684a      	ldr	r2, [r1, #4]
 80029c8:	6889      	ldr	r1, [r1, #8]
 80029ca:	6820      	ldr	r0, [r4, #0]
 80029cc:	f7ff fed4 	bl	8002778 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029d0:	6822      	ldr	r2, [r4, #0]
 80029d2:	6891      	ldr	r1, [r2, #8]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	01db      	lsls	r3, r3, #7
 80029d8:	430b      	orrs	r3, r1
 80029da:	6093      	str	r3, [r2, #8]
      break;
 80029dc:	e025      	b.n	8002a2a <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 80029de:	2b10      	cmp	r3, #16
 80029e0:	d007      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x6a>
 80029e2:	d904      	bls.n	80029ee <HAL_TIM_ConfigClockSource+0x66>
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d004      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x6a>
 80029e8:	2b30      	cmp	r3, #48	; 0x30
 80029ea:	d002      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x6a>
 80029ec:	e01d      	b.n	8002a2a <HAL_TIM_ConfigClockSource+0xa2>
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11b      	bne.n	8002a2a <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f2:	0019      	movs	r1, r3
 80029f4:	6820      	ldr	r0, [r4, #0]
 80029f6:	f7ff feb5 	bl	8002764 <TIM_ITRx_SetConfig>
      break;
 80029fa:	e016      	b.n	8002a2a <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 80029fc:	2b50      	cmp	r3, #80	; 0x50
 80029fe:	d114      	bne.n	8002a2a <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a00:	68ca      	ldr	r2, [r1, #12]
 8002a02:	6849      	ldr	r1, [r1, #4]
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	f7ff fe87 	bl	8002718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a0a:	2150      	movs	r1, #80	; 0x50
 8002a0c:	6820      	ldr	r0, [r4, #0]
 8002a0e:	f7ff fea9 	bl	8002764 <TIM_ITRx_SetConfig>
      break;
 8002a12:	e00a      	b.n	8002a2a <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 8002a14:	68cb      	ldr	r3, [r1, #12]
 8002a16:	684a      	ldr	r2, [r1, #4]
 8002a18:	6889      	ldr	r1, [r1, #8]
 8002a1a:	6820      	ldr	r0, [r4, #0]
 8002a1c:	f7ff feac 	bl	8002778 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a20:	6822      	ldr	r2, [r4, #0]
 8002a22:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a24:	2177      	movs	r1, #119	; 0x77
 8002a26:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8002a28:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	2339      	movs	r3, #57	; 0x39
 8002a2e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8002a30:	2200      	movs	r2, #0
 8002a32:	3b01      	subs	r3, #1
 8002a34:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002a36:	2000      	movs	r0, #0
}
 8002a38:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a3a:	68ca      	ldr	r2, [r1, #12]
 8002a3c:	6849      	ldr	r1, [r1, #4]
 8002a3e:	6820      	ldr	r0, [r4, #0]
 8002a40:	f7ff fe7c 	bl	800273c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a44:	2160      	movs	r1, #96	; 0x60
 8002a46:	6820      	ldr	r0, [r4, #0]
 8002a48:	f7ff fe8c 	bl	8002764 <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e7ed      	b.n	8002a2a <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	68ca      	ldr	r2, [r1, #12]
 8002a50:	6849      	ldr	r1, [r1, #4]
 8002a52:	6820      	ldr	r0, [r4, #0]
 8002a54:	f7ff fe60 	bl	8002718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a58:	2140      	movs	r1, #64	; 0x40
 8002a5a:	6820      	ldr	r0, [r4, #0]
 8002a5c:	f7ff fe82 	bl	8002764 <TIM_ITRx_SetConfig>
      break;
 8002a60:	e7e3      	b.n	8002a2a <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8002a62:	2002      	movs	r0, #2
 8002a64:	e7e8      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0xb0>
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	ffff0088 	.word	0xffff0088

08002a6c <HAL_TIM_PeriodElapsedCallback>:
}
 8002a6c:	4770      	bx	lr

08002a6e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIM_IC_CaptureCallback>:
}
 8002a70:	4770      	bx	lr

08002a72 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIM_TriggerCallback>:
}
 8002a74:	4770      	bx	lr

08002a76 <HAL_TIM_IRQHandler>:
{
 8002a76:	b510      	push	{r4, lr}
 8002a78:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a7a:	6803      	ldr	r3, [r0, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	0792      	lsls	r2, r2, #30
 8002a80:	d50f      	bpl.n	8002aa2 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	0792      	lsls	r2, r2, #30
 8002a86:	d50c      	bpl.n	8002aa2 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a88:	2203      	movs	r2, #3
 8002a8a:	4252      	negs	r2, r2
 8002a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	7603      	strb	r3, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a92:	6803      	ldr	r3, [r0, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	079b      	lsls	r3, r3, #30
 8002a98:	d055      	beq.n	8002b46 <HAL_TIM_IRQHandler+0xd0>
          HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	f7ff ffe9 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	0752      	lsls	r2, r2, #29
 8002aa8:	d512      	bpl.n	8002ad0 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	0752      	lsls	r2, r2, #29
 8002aae:	d50f      	bpl.n	8002ad0 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab0:	2205      	movs	r2, #5
 8002ab2:	4252      	negs	r2, r2
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	23c0      	movs	r3, #192	; 0xc0
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	421a      	tst	r2, r3
 8002ac4:	d045      	beq.n	8002b52 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac6:	0020      	movs	r0, r4
 8002ac8:	f7ff ffd2 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002acc:	2300      	movs	r3, #0
 8002ace:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	0712      	lsls	r2, r2, #28
 8002ad6:	d510      	bpl.n	8002afa <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	0712      	lsls	r2, r2, #28
 8002adc:	d50d      	bpl.n	8002afa <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ade:	2209      	movs	r2, #9
 8002ae0:	4252      	negs	r2, r2
 8002ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	079b      	lsls	r3, r3, #30
 8002aee:	d037      	beq.n	8002b60 <HAL_TIM_IRQHandler+0xea>
        HAL_TIM_IC_CaptureCallback(htim);
 8002af0:	0020      	movs	r0, r4
 8002af2:	f7ff ffbd 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af6:	2300      	movs	r3, #0
 8002af8:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	06d2      	lsls	r2, r2, #27
 8002b00:	d512      	bpl.n	8002b28 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	06d2      	lsls	r2, r2, #27
 8002b06:	d50f      	bpl.n	8002b28 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b08:	2211      	movs	r2, #17
 8002b0a:	4252      	negs	r2, r2
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0e:	2308      	movs	r3, #8
 8002b10:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	23c0      	movs	r3, #192	; 0xc0
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	421a      	tst	r2, r3
 8002b1c:	d027      	beq.n	8002b6e <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	0020      	movs	r0, r4
 8002b20:	f7ff ffa6 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b24:	2300      	movs	r3, #0
 8002b26:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	07d2      	lsls	r2, r2, #31
 8002b2e:	d502      	bpl.n	8002b36 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	07d2      	lsls	r2, r2, #31
 8002b34:	d422      	bmi.n	8002b7c <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	0652      	lsls	r2, r2, #25
 8002b3c:	d502      	bpl.n	8002b44 <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	0652      	lsls	r2, r2, #25
 8002b42:	d422      	bmi.n	8002b8a <HAL_TIM_IRQHandler+0x114>
}
 8002b44:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	f7ff ff92 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4a:	0020      	movs	r0, r4
 8002b4c:	f7ff ff91 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
 8002b50:	e7a5      	b.n	8002a9e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	0020      	movs	r0, r4
 8002b54:	f7ff ff8b 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	0020      	movs	r0, r4
 8002b5a:	f7ff ff8a 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
 8002b5e:	e7b5      	b.n	8002acc <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b60:	0020      	movs	r0, r4
 8002b62:	f7ff ff84 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b66:	0020      	movs	r0, r4
 8002b68:	f7ff ff83 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
 8002b6c:	e7c3      	b.n	8002af6 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	0020      	movs	r0, r4
 8002b70:	f7ff ff7d 	bl	8002a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	0020      	movs	r0, r4
 8002b76:	f7ff ff7c 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
 8002b7a:	e7d3      	b.n	8002b24 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	4252      	negs	r2, r2
 8002b80:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b82:	0020      	movs	r0, r4
 8002b84:	f7ff ff72 	bl	8002a6c <HAL_TIM_PeriodElapsedCallback>
 8002b88:	e7d5      	b.n	8002b36 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b8a:	2241      	movs	r2, #65	; 0x41
 8002b8c:	4252      	negs	r2, r2
 8002b8e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b90:	0020      	movs	r0, r4
 8002b92:	f7ff ff6f 	bl	8002a74 <HAL_TIM_TriggerCallback>
}
 8002b96:	e7d5      	b.n	8002b44 <HAL_TIM_IRQHandler+0xce>

08002b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9a:	46ce      	mov	lr, r9
 8002b9c:	4647      	mov	r7, r8
 8002b9e:	b580      	push	{r7, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba0:	2338      	movs	r3, #56	; 0x38
 8002ba2:	5cc3      	ldrb	r3, [r0, r3]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d020      	beq.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8002ba8:	2538      	movs	r5, #56	; 0x38
 8002baa:	2701      	movs	r7, #1
 8002bac:	5547      	strb	r7, [r0, r5]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bae:	2639      	movs	r6, #57	; 0x39
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	5583      	strb	r3, [r0, r6]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bb4:	6804      	ldr	r4, [r0, #0]
 8002bb6:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb8:	68a3      	ldr	r3, [r4, #8]
 8002bba:	4698      	mov	r8, r3

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bbc:	2370      	movs	r3, #112	; 0x70
 8002bbe:	439a      	bics	r2, r3
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bc0:	680b      	ldr	r3, [r1, #0]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	4691      	mov	r9, r2

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	4642      	mov	r2, r8
 8002bca:	439a      	bics	r2, r3
 8002bcc:	0013      	movs	r3, r2
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bce:	6849      	ldr	r1, [r1, #4]
 8002bd0:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002bd6:	6802      	ldr	r2, [r0, #0]
 8002bd8:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bda:	5587      	strb	r7, [r0, r6]

  __HAL_UNLOCK(htim);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	5543      	strb	r3, [r0, r5]

  return HAL_OK;
 8002be0:	2000      	movs	r0, #0
}
 8002be2:	bc0c      	pop	{r2, r3}
 8002be4:	4690      	mov	r8, r2
 8002be6:	4699      	mov	r9, r3
 8002be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8002bea:	2002      	movs	r0, #2
 8002bec:	e7f9      	b.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
	...

08002bf0 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002bf0:	b500      	push	{lr}
 8002bf2:	b083      	sub	sp, #12
  ADC_ChannelConfTypeDef sConfig = {0};
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4668      	mov	r0, sp
 8002bfa:	f000 fb9f 	bl	800333c <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002bfe:	4823      	ldr	r0, [pc, #140]	; (8002c8c <MX_ADC_Init+0x9c>)
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <MX_ADC_Init+0xa0>)
 8002c02:	6003      	str	r3, [r0, #0]
  hadc.Init.OversamplingMode = ENABLE;
 8002c04:	2201      	movs	r2, #1
 8002c06:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8002c08:	2314      	movs	r3, #20
 8002c0a:	6403      	str	r3, [r0, #64]	; 0x40
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_5;
 8002c0c:	338c      	adds	r3, #140	; 0x8c
 8002c0e:	6443      	str	r3, [r0, #68]	; 0x44
  hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002c10:	2300      	movs	r3, #0
 8002c12:	6483      	str	r3, [r0, #72]	; 0x48
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	05c9      	lsls	r1, r1, #23
 8002c18:	6041      	str	r1, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002c1a:	6083      	str	r3, [r0, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002c1c:	6383      	str	r3, [r0, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002c1e:	6102      	str	r2, [r0, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c20:	60c3      	str	r3, [r0, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002c22:	2120      	movs	r1, #32
 8002c24:	5442      	strb	r2, [r0, r1]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002c26:	3101      	adds	r1, #1
 8002c28:	5443      	strb	r3, [r0, r1]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c2a:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c2c:	21c2      	movs	r1, #194	; 0xc2
 8002c2e:	31ff      	adds	r1, #255	; 0xff
 8002c30:	6241      	str	r1, [r0, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002c32:	3996      	subs	r1, #150	; 0x96
 8002c34:	39ff      	subs	r1, #255	; 0xff
 8002c36:	5442      	strb	r2, [r0, r1]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c38:	3203      	adds	r2, #3
 8002c3a:	6142      	str	r2, [r0, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	0152      	lsls	r2, r2, #5
 8002c40:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002c42:	6183      	str	r3, [r0, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002c44:	6343      	str	r3, [r0, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002c46:	61c3      	str	r3, [r0, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002c48:	f7fe fafc 	bl	8001244 <HAL_ADC_Init>
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d114      	bne.n	8002c7a <MX_ADC_Init+0x8a>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c50:	2301      	movs	r3, #1
 8002c52:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	015b      	lsls	r3, r3, #5
 8002c58:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002c5a:	4669      	mov	r1, sp
 8002c5c:	480b      	ldr	r0, [pc, #44]	; (8002c8c <MX_ADC_Init+0x9c>)
 8002c5e:	f7fe fc8f 	bl	8001580 <HAL_ADC_ConfigChannel>
 8002c62:	2800      	cmp	r0, #0
 8002c64:	d10c      	bne.n	8002c80 <MX_ADC_Init+0x90>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <MX_ADC_Init+0xa4>)
 8002c68:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002c6a:	4669      	mov	r1, sp
 8002c6c:	4807      	ldr	r0, [pc, #28]	; (8002c8c <MX_ADC_Init+0x9c>)
 8002c6e:	f7fe fc87 	bl	8001580 <HAL_ADC_ConfigChannel>
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d107      	bne.n	8002c86 <MX_ADC_Init+0x96>
  {
    Error_Handler();
  }

}
 8002c76:	b003      	add	sp, #12
 8002c78:	bd00      	pop	{pc}
    Error_Handler();
 8002c7a:	f000 f95f 	bl	8002f3c <Error_Handler>
 8002c7e:	e7e7      	b.n	8002c50 <MX_ADC_Init+0x60>
    Error_Handler();
 8002c80:	f000 f95c 	bl	8002f3c <Error_Handler>
 8002c84:	e7ef      	b.n	8002c66 <MX_ADC_Init+0x76>
    Error_Handler();
 8002c86:	f000 f959 	bl	8002f3c <Error_Handler>
}
 8002c8a:	e7f4      	b.n	8002c76 <MX_ADC_Init+0x86>
 8002c8c:	20000090 	.word	0x20000090
 8002c90:	40012400 	.word	0x40012400
 8002c94:	10000010 	.word	0x10000010

08002c98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c98:	b530      	push	{r4, r5, lr}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9e:	2214      	movs	r2, #20
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	a801      	add	r0, sp, #4
 8002ca4:	f000 fb4a 	bl	800333c <memset>
  if(adcHandle->Instance==ADC1)
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_ADC_MspInit+0x80>)
 8002caa:	6822      	ldr	r2, [r4, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002cb0:	b007      	add	sp, #28
 8002cb2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_ADC_MspInit+0x84>)
 8002cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb8:	2580      	movs	r5, #128	; 0x80
 8002cba:	00ad      	lsls	r5, r5, #2
 8002cbc:	432a      	orrs	r2, r5
 8002cbe:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	401a      	ands	r2, r3
 8002ccc:	9200      	str	r2, [sp, #0]
 8002cce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8002cd0:	2311      	movs	r3, #17
 8002cd2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cd4:	3b0e      	subs	r3, #14
 8002cd6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	a901      	add	r1, sp, #4
 8002cda:	20a0      	movs	r0, #160	; 0xa0
 8002cdc:	05c0      	lsls	r0, r0, #23
 8002cde:	f7fe fe5d 	bl	800199c <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8002ce2:	480f      	ldr	r0, [pc, #60]	; (8002d20 <HAL_ADC_MspInit+0x88>)
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <HAL_ADC_MspInit+0x8c>)
 8002ce6:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cec:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cee:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	6102      	str	r2, [r0, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cf4:	6145      	str	r5, [r0, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	0112      	lsls	r2, r2, #4
 8002cfa:	6182      	str	r2, [r0, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	61c2      	str	r2, [r0, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002d00:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002d02:	f7fe fd67 	bl	80017d4 <HAL_DMA_Init>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d103      	bne.n	8002d12 <HAL_ADC_MspInit+0x7a>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_ADC_MspInit+0x88>)
 8002d0c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002d0e:	629c      	str	r4, [r3, #40]	; 0x28
}
 8002d10:	e7ce      	b.n	8002cb0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8002d12:	f000 f913 	bl	8002f3c <Error_Handler>
 8002d16:	e7f8      	b.n	8002d0a <HAL_ADC_MspInit+0x72>
 8002d18:	40012400 	.word	0x40012400
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	20000048 	.word	0x20000048
 8002d24:	40020008 	.word	0x40020008

08002d28 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002d28:	b500      	push	{lr}
 8002d2a:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d2c:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <MX_DMA_Init+0x2c>)
 8002d2e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d30:	2301      	movs	r3, #1
 8002d32:	4319      	orrs	r1, r3
 8002d34:	6311      	str	r1, [r2, #48]	; 0x30
 8002d36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d38:	4013      	ands	r3, r2
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	2009      	movs	r0, #9
 8002d44:	f7fe fcd6 	bl	80016f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002d48:	2009      	movs	r0, #9
 8002d4a:	f7fe fd05 	bl	8001758 <HAL_NVIC_EnableIRQ>

}
 8002d4e:	b003      	add	sp, #12
 8002d50:	bd00      	pop	{pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	40021000 	.word	0x40021000

08002d58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	2214      	movs	r2, #20
 8002d5e:	2100      	movs	r1, #0
 8002d60:	a803      	add	r0, sp, #12
 8002d62:	f000 faeb 	bl	800333c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d66:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <MX_GPIO_Init+0x7c>)
 8002d68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	4311      	orrs	r1, r2
 8002d6e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002d70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d72:	400a      	ands	r2, r1
 8002d74:	9201      	str	r2, [sp, #4]
 8002d76:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7a:	2401      	movs	r4, #1
 8002d7c:	4322      	orrs	r2, r4
 8002d7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	4023      	ands	r3, r4
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLINK_Pin|GPIO_PIN_10, GPIO_PIN_SET);
 8002d88:	2690      	movs	r6, #144	; 0x90
 8002d8a:	00f6      	lsls	r6, r6, #3
 8002d8c:	25a0      	movs	r5, #160	; 0xa0
 8002d8e:	05ed      	lsls	r5, r5, #23
 8002d90:	2201      	movs	r2, #1
 8002d92:	0031      	movs	r1, r6
 8002d94:	0028      	movs	r0, r5
 8002d96:	f7fe febf 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PSC_SELECT_Pin;
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	01db      	lsls	r3, r3, #7
 8002d9e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002da0:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <MX_GPIO_Init+0x80>)
 8002da2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002da4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(PSC_SELECT_GPIO_Port, &GPIO_InitStruct);
 8002da6:	a903      	add	r1, sp, #12
 8002da8:	480c      	ldr	r0, [pc, #48]	; (8002ddc <MX_GPIO_Init+0x84>)
 8002daa:	f7fe fdf7 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA10 */
  GPIO_InitStruct.Pin = BLINK_Pin|GPIO_PIN_10;
 8002dae:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002db2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	a903      	add	r1, sp, #12
 8002dba:	0028      	movs	r0, r5
 8002dbc:	f7fe fdee 	bl	800199c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	2007      	movs	r0, #7
 8002dc6:	f7fe fc95 	bl	80016f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002dca:	2007      	movs	r0, #7
 8002dcc:	f7fe fcc4 	bl	8001758 <HAL_NVIC_EnableIRQ>

}
 8002dd0:	b008      	add	sp, #32
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	10210000 	.word	0x10210000
 8002ddc:	50000800 	.word	0x50000800

08002de0 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8002de0:	b510      	push	{r4, lr}

  hlptim1.Instance = LPTIM1;
 8002de2:	480b      	ldr	r0, [pc, #44]	; (8002e10 <MX_LPTIM1_Init+0x30>)
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <MX_LPTIM1_Init+0x34>)
 8002de6:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002de8:	2300      	movs	r3, #0
 8002dea:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8002dec:	22e0      	movs	r2, #224	; 0xe0
 8002dee:	0112      	lsls	r2, r2, #4
 8002df0:	6082      	str	r2, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <MX_LPTIM1_Init+0x38>)
 8002df4:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002df6:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	03d2      	lsls	r2, r2, #15
 8002dfc:	6242      	str	r2, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002dfe:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002e00:	f7fe fea4 	bl	8001b4c <HAL_LPTIM_Init>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	d100      	bne.n	8002e0a <MX_LPTIM1_Init+0x2a>
  {
    Error_Handler();
  }

}
 8002e08:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002e0a:	f000 f897 	bl	8002f3c <Error_Handler>
}
 8002e0e:	e7fb      	b.n	8002e08 <MX_LPTIM1_Init+0x28>
 8002e10:	200000ec 	.word	0x200000ec
 8002e14:	40007c00 	.word	0x40007c00
 8002e18:	0000ffff 	.word	0x0000ffff

08002e1c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8002e1c:	b510      	push	{r4, lr}

  if(lptimHandle->Instance==LPTIM1)
 8002e1e:	6802      	ldr	r2, [r0, #0]
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_LPTIM_MspInit+0x2c>)
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d000      	beq.n	8002e28 <HAL_LPTIM_MspInit+0xc>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8002e26:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <HAL_LPTIM_MspInit+0x30>)
 8002e2a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2100      	movs	r1, #0
 8002e38:	200d      	movs	r0, #13
 8002e3a:	f7fe fc5b 	bl	80016f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002e3e:	200d      	movs	r0, #13
 8002e40:	f7fe fc8a 	bl	8001758 <HAL_NVIC_EnableIRQ>
}
 8002e44:	e7ef      	b.n	8002e26 <HAL_LPTIM_MspInit+0xa>
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	40007c00 	.word	0x40007c00
 8002e4c:	40021000 	.word	0x40021000

08002e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e50:	b510      	push	{r4, lr}
 8002e52:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e54:	2234      	movs	r2, #52	; 0x34
 8002e56:	2100      	movs	r1, #0
 8002e58:	a80b      	add	r0, sp, #44	; 0x2c
 8002e5a:	f000 fa6f 	bl	800333c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e5e:	2214      	movs	r2, #20
 8002e60:	2100      	movs	r1, #0
 8002e62:	a806      	add	r0, sp, #24
 8002e64:	f000 fa6a 	bl	800333c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e68:	2218      	movs	r2, #24
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4668      	mov	r0, sp
 8002e6e:	f000 fa65 	bl	800333c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e72:	4916      	ldr	r1, [pc, #88]	; (8002ecc <SystemClock_Config+0x7c>)
 8002e74:	680b      	ldr	r3, [r1, #0]
 8002e76:	4a16      	ldr	r2, [pc, #88]	; (8002ed0 <SystemClock_Config+0x80>)
 8002e78:	401a      	ands	r2, r3
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e82:	2302      	movs	r3, #2
 8002e84:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e86:	2201      	movs	r2, #1
 8002e88:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e8a:	320f      	adds	r2, #15
 8002e8c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e8e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e90:	2400      	movs	r4, #0
 8002e92:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	02db      	lsls	r3, r3, #11
 8002e98:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	03db      	lsls	r3, r3, #15
 8002e9e:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ea0:	a80b      	add	r0, sp, #44	; 0x2c
 8002ea2:	f7fe ff79 	bl	8001d98 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ea6:	230f      	movs	r3, #15
 8002ea8:	9306      	str	r3, [sp, #24]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eaa:	3b0c      	subs	r3, #12
 8002eac:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eae:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002eb0:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002eb2:	940a      	str	r4, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	a806      	add	r0, sp, #24
 8002eb8:	f7ff f9f6 	bl	80022a8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	9300      	str	r3, [sp, #0]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8002ec0:	9405      	str	r4, [sp, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ec2:	4668      	mov	r0, sp
 8002ec4:	f7ff fac4 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002ec8:	b018      	add	sp, #96	; 0x60
 8002eca:	bd10      	pop	{r4, pc}
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	ffffe7ff 	.word	0xffffe7ff

08002ed4 <main>:
{
 8002ed4:	b510      	push	{r4, lr}
  HAL_Init();
 8002ed6:	f7fe f937 	bl	8001148 <HAL_Init>
  SystemClock_Config();
 8002eda:	f7ff ffb9 	bl	8002e50 <SystemClock_Config>
  MX_GPIO_Init();
 8002ede:	f7ff ff3b 	bl	8002d58 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ee2:	f7ff ff21 	bl	8002d28 <MX_DMA_Init>
  MX_TIM2_Init();
 8002ee6:	f000 f967 	bl	80031b8 <MX_TIM2_Init>
  MX_LPTIM1_Init();
 8002eea:	f7ff ff79 	bl	8002de0 <MX_LPTIM1_Init>
  MX_TIM21_Init();
 8002eee:	f000 f8df 	bl	80030b0 <MX_TIM21_Init>
  MX_ADC_Init();
 8002ef2:	f7ff fe7d 	bl	8002bf0 <MX_ADC_Init>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8002ef6:	2104      	movs	r1, #4
 8002ef8:	480b      	ldr	r0, [pc, #44]	; (8002f28 <main+0x54>)
 8002efa:	f7ff fc9c 	bl	8002836 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim21);
 8002efe:	480b      	ldr	r0, [pc, #44]	; (8002f2c <main+0x58>)
 8002f00:	f7ff fc6d 	bl	80027de <HAL_TIM_Base_Start_IT>
  HAL_LPTIM_TimeOut_Start_IT(&hlptim1, 8192, 8192);
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	0189      	lsls	r1, r1, #6
 8002f08:	000a      	movs	r2, r1
 8002f0a:	4809      	ldr	r0, [pc, #36]	; (8002f30 <main+0x5c>)
 8002f0c:	f7fe fe6e 	bl	8001bec <HAL_LPTIM_TimeOut_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8002f10:	4c08      	ldr	r4, [pc, #32]	; (8002f34 <main+0x60>)
 8002f12:	2100      	movs	r1, #0
 8002f14:	0020      	movs	r0, r4
 8002f16:	f7fe fb91 	bl	800163c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, input, 8);
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	4906      	ldr	r1, [pc, #24]	; (8002f38 <main+0x64>)
 8002f1e:	0020      	movs	r0, r4
 8002f20:	f7fe fa8a 	bl	8001438 <HAL_ADC_Start_DMA>
 8002f24:	e7fe      	b.n	8002f24 <main+0x50>
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	2000011c 	.word	0x2000011c
 8002f2c:	20000158 	.word	0x20000158
 8002f30:	200000ec 	.word	0x200000ec
 8002f34:	20000090 	.word	0x20000090
 8002f38:	20000020 	.word	0x20000020

08002f3c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f3c:	4770      	bx	lr
	...

08002f40 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_MspInit+0x18>)
 8002f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f44:	2101      	movs	r1, #1
 8002f46:	430a      	orrs	r2, r1
 8002f48:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f4a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f4c:	2280      	movs	r2, #128	; 0x80
 8002f4e:	0552      	lsls	r2, r2, #21
 8002f50:	430a      	orrs	r2, r1
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f54:	4770      	bx	lr
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	40021000 	.word	0x40021000

08002f5c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f5c:	4770      	bx	lr

08002f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f5e:	e7fe      	b.n	8002f5e <HardFault_Handler>

08002f60 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f60:	4770      	bx	lr

08002f62 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f62:	4770      	bx	lr

08002f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f66:	f7fe f903 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f6a:	bd10      	pop	{r4, pc}

08002f6c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002f6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */


	if(htim2.Instance->PSC >= 65535)
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <EXTI4_15_IRQHandler+0x34>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f74:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <EXTI4_15_IRQHandler+0x38>)
 8002f76:	4291      	cmp	r1, r2
 8002f78:	d808      	bhi.n	8002f8c <EXTI4_15_IRQHandler+0x20>
	{
		htim2.Instance->PSC = 1;
	}
	else
	{
		if(htim2.Instance->PSC * 2 >= 65535)
 8002f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7c:	0052      	lsls	r2, r2, #1
 8002f7e:	4909      	ldr	r1, [pc, #36]	; (8002fa4 <EXTI4_15_IRQHandler+0x38>)
 8002f80:	428a      	cmp	r2, r1
 8002f82:	d80a      	bhi.n	8002f9a <EXTI4_15_IRQHandler+0x2e>
		{
			htim2.Instance->PSC = 1;
		}
		else
		{
			htim2.Instance->PSC = htim2.Instance->PSC * 2;
 8002f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f86:	0052      	lsls	r2, r2, #1
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
 8002f8a:	e001      	b.n	8002f90 <EXTI4_15_IRQHandler+0x24>
		htim2.Instance->PSC = 1;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28

	}


  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002f90:	2080      	movs	r0, #128	; 0x80
 8002f92:	01c0      	lsls	r0, r0, #7
 8002f94:	f7fe fdcc 	bl	8001b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002f98:	bd10      	pop	{r4, pc}
			htim2.Instance->PSC = 1;
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f9e:	e7f7      	b.n	8002f90 <EXTI4_15_IRQHandler+0x24>
 8002fa0:	2000011c 	.word	0x2000011c
 8002fa4:	0000fffe 	.word	0x0000fffe

08002fa8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002fa8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002faa:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <DMA1_Channel1_IRQHandler+0xc>)
 8002fac:	f7fe fc99 	bl	80018e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002fb0:	bd10      	pop	{r4, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	20000048 	.word	0x20000048

08002fb8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8002fb8:	b5d0      	push	{r4, r6, r7, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
	//HAL_GPIO_TogglePin(BLINK_GPIO_Port, BLINK_Pin);
	htim2.Instance->ARR = input[1];
 8002fba:	4b19      	ldr	r3, [pc, #100]	; (8003020 <LPTIM1_IRQHandler+0x68>)
 8002fbc:	681c      	ldr	r4, [r3, #0]
 8002fbe:	4b19      	ldr	r3, [pc, #100]	; (8003024 <LPTIM1_IRQHandler+0x6c>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	62e3      	str	r3, [r4, #44]	; 0x2c

	if(pwm_value == 0) step = 10;
 8002fc4:	4b18      	ldr	r3, [pc, #96]	; (8003028 <LPTIM1_IRQHandler+0x70>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <LPTIM1_IRQHandler+0x1a>
 8002fcc:	210a      	movs	r1, #10
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <LPTIM1_IRQHandler+0x74>)
 8002fd0:	8011      	strh	r1, [r2, #0]
	if(pwm_value > htim2.Instance->ARR) step = -10;
 8002fd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d903      	bls.n	8002fe0 <LPTIM1_IRQHandler+0x28>
 8002fd8:	210a      	movs	r1, #10
 8002fda:	4249      	negs	r1, r1
 8002fdc:	4a13      	ldr	r2, [pc, #76]	; (800302c <LPTIM1_IRQHandler+0x74>)
 8002fde:	8011      	strh	r1, [r2, #0]
	pwm_value += step;
 8002fe0:	4a12      	ldr	r2, [pc, #72]	; (800302c <LPTIM1_IRQHandler+0x74>)
 8002fe2:	8812      	ldrh	r2, [r2, #0]
 8002fe4:	189b      	adds	r3, r3, r2
 8002fe6:	4a10      	ldr	r2, [pc, #64]	; (8003028 <LPTIM1_IRQHandler+0x70>)
 8002fe8:	8013      	strh	r3, [r2, #0]
	double newPulseWidth = (htim2.Instance->ARR / 8192.0) * input[0];
 8002fea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002fec:	f7fd ff00 	bl	8000df0 <__aeabi_ui2d>
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <LPTIM1_IRQHandler+0x78>)
 8002ff4:	f7fd f932 	bl	800025c <__aeabi_dmul>
 8002ff8:	0006      	movs	r6, r0
 8002ffa:	000f      	movs	r7, r1
 8002ffc:	4b09      	ldr	r3, [pc, #36]	; (8003024 <LPTIM1_IRQHandler+0x6c>)
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	f7fd fef6 	bl	8000df0 <__aeabi_ui2d>
 8003004:	0002      	movs	r2, r0
 8003006:	000b      	movs	r3, r1
 8003008:	0030      	movs	r0, r6
 800300a:	0039      	movs	r1, r7
 800300c:	f7fd f926 	bl	800025c <__aeabi_dmul>
	htim2.Instance->CCR2 = newPulseWidth;
 8003010:	f7fd f906 	bl	8000220 <__aeabi_d2uiz>
 8003014:	63a0      	str	r0, [r4, #56]	; 0x38

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003016:	4807      	ldr	r0, [pc, #28]	; (8003034 <LPTIM1_IRQHandler+0x7c>)
 8003018:	f7fe fe17 	bl	8001c4a <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800301c:	bdd0      	pop	{r4, r6, r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	2000011c 	.word	0x2000011c
 8003024:	20000020 	.word	0x20000020
 8003028:	20000040 	.word	0x20000040
 800302c:	20000042 	.word	0x20000042
 8003030:	3f200000 	.word	0x3f200000
 8003034:	200000ec 	.word	0x200000ec

08003038 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8003038:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	00c9      	lsls	r1, r1, #3
 800303e:	20a0      	movs	r0, #160	; 0xa0
 8003040:	05c0      	lsls	r0, r0, #23
 8003042:	f7fe fd6f 	bl	8001b24 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8003046:	4802      	ldr	r0, [pc, #8]	; (8003050 <TIM21_IRQHandler+0x18>)
 8003048:	f7ff fd15 	bl	8002a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800304c:	bd10      	pop	{r4, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	20000158 	.word	0x20000158

08003054 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <SystemInit+0x44>)
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	0052      	lsls	r2, r2, #1
 800305c:	430a      	orrs	r2, r1
 800305e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	490e      	ldr	r1, [pc, #56]	; (800309c <SystemInit+0x48>)
 8003064:	400a      	ands	r2, r1
 8003066:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	490d      	ldr	r1, [pc, #52]	; (80030a0 <SystemInit+0x4c>)
 800306c:	400a      	ands	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	2101      	movs	r1, #1
 8003074:	438a      	bics	r2, r1
 8003076:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	490a      	ldr	r1, [pc, #40]	; (80030a4 <SystemInit+0x50>)
 800307c:	400a      	ands	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	4909      	ldr	r1, [pc, #36]	; (80030a8 <SystemInit+0x54>)
 8003084:	400a      	ands	r2, r1
 8003086:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	0512      	lsls	r2, r2, #20
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <SystemInit+0x58>)
 8003092:	609a      	str	r2, [r3, #8]
#endif
}
 8003094:	4770      	bx	lr
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	40021000 	.word	0x40021000
 800309c:	88ff400c 	.word	0x88ff400c
 80030a0:	fef6fff6 	.word	0xfef6fff6
 80030a4:	fffbffff 	.word	0xfffbffff
 80030a8:	ff02ffff 	.word	0xff02ffff
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <MX_TIM21_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 80030b0:	b500      	push	{lr}
 80030b2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030b4:	2210      	movs	r2, #16
 80030b6:	2100      	movs	r1, #0
 80030b8:	a802      	add	r0, sp, #8
 80030ba:	f000 f93f 	bl	800333c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030be:	2208      	movs	r2, #8
 80030c0:	2100      	movs	r1, #0
 80030c2:	4668      	mov	r0, sp
 80030c4:	f000 f93a 	bl	800333c <memset>

  htim21.Instance = TIM21;
 80030c8:	4816      	ldr	r0, [pc, #88]	; (8003124 <MX_TIM21_Init+0x74>)
 80030ca:	4b17      	ldr	r3, [pc, #92]	; (8003128 <MX_TIM21_Init+0x78>)
 80030cc:	6003      	str	r3, [r0, #0]
  htim21.Init.Prescaler = 16;
 80030ce:	2310      	movs	r3, #16
 80030d0:	6043      	str	r3, [r0, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d2:	2300      	movs	r3, #0
 80030d4:	6083      	str	r3, [r0, #8]
  htim21.Init.Period = 1024;
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	00d2      	lsls	r2, r2, #3
 80030da:	60c2      	str	r2, [r0, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030dc:	6103      	str	r3, [r0, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030de:	3380      	adds	r3, #128	; 0x80
 80030e0:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80030e2:	f7ff fb62 	bl	80027aa <HAL_TIM_Base_Init>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d113      	bne.n	8003112 <MX_TIM21_Init+0x62>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	015b      	lsls	r3, r3, #5
 80030ee:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80030f0:	a902      	add	r1, sp, #8
 80030f2:	480c      	ldr	r0, [pc, #48]	; (8003124 <MX_TIM21_Init+0x74>)
 80030f4:	f7ff fc48 	bl	8002988 <HAL_TIM_ConfigClockSource>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d10d      	bne.n	8003118 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030fc:	2300      	movs	r3, #0
 80030fe:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003100:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003102:	4669      	mov	r1, sp
 8003104:	4807      	ldr	r0, [pc, #28]	; (8003124 <MX_TIM21_Init+0x74>)
 8003106:	f7ff fd47 	bl	8002b98 <HAL_TIMEx_MasterConfigSynchronization>
 800310a:	2800      	cmp	r0, #0
 800310c:	d107      	bne.n	800311e <MX_TIM21_Init+0x6e>
  {
    Error_Handler();
  }

}
 800310e:	b007      	add	sp, #28
 8003110:	bd00      	pop	{pc}
    Error_Handler();
 8003112:	f7ff ff13 	bl	8002f3c <Error_Handler>
 8003116:	e7e8      	b.n	80030ea <MX_TIM21_Init+0x3a>
    Error_Handler();
 8003118:	f7ff ff10 	bl	8002f3c <Error_Handler>
 800311c:	e7ee      	b.n	80030fc <MX_TIM21_Init+0x4c>
    Error_Handler();
 800311e:	f7ff ff0d 	bl	8002f3c <Error_Handler>
}
 8003122:	e7f4      	b.n	800310e <MX_TIM21_Init+0x5e>
 8003124:	20000158 	.word	0x20000158
 8003128:	40010800 	.word	0x40010800

0800312c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800312c:	b510      	push	{r4, lr}

  if(tim_baseHandle->Instance==TIM2)
 800312e:	6803      	ldr	r3, [r0, #0]
 8003130:	2280      	movs	r2, #128	; 0x80
 8003132:	05d2      	lsls	r2, r2, #23
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM21)
 8003138:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <HAL_TIM_Base_MspInit+0x3c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d006      	beq.n	800314c <HAL_TIM_Base_MspInit+0x20>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 800313e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003140:	4a0a      	ldr	r2, [pc, #40]	; (800316c <HAL_TIM_Base_MspInit+0x40>)
 8003142:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003144:	2101      	movs	r1, #1
 8003146:	430b      	orrs	r3, r1
 8003148:	6393      	str	r3, [r2, #56]	; 0x38
 800314a:	e7f8      	b.n	800313e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM21_CLK_ENABLE();
 800314c:	4a07      	ldr	r2, [pc, #28]	; (800316c <HAL_TIM_Base_MspInit+0x40>)
 800314e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003150:	2104      	movs	r1, #4
 8003152:	430b      	orrs	r3, r1
 8003154:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	2100      	movs	r1, #0
 800315a:	2014      	movs	r0, #20
 800315c:	f7fe faca 	bl	80016f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003160:	2014      	movs	r0, #20
 8003162:	f7fe faf9 	bl	8001758 <HAL_NVIC_EnableIRQ>
}
 8003166:	e7ea      	b.n	800313e <HAL_TIM_Base_MspInit+0x12>
 8003168:	40010800 	.word	0x40010800
 800316c:	40021000 	.word	0x40021000

08003170 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003170:	b510      	push	{r4, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003176:	2214      	movs	r2, #20
 8003178:	2100      	movs	r1, #0
 800317a:	a801      	add	r0, sp, #4
 800317c:	f000 f8de 	bl	800333c <memset>
  if(timHandle->Instance==TIM2)
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	05db      	lsls	r3, r3, #23
 8003186:	429a      	cmp	r2, r3
 8003188:	d001      	beq.n	800318e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800318a:	b006      	add	sp, #24
 800318c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <HAL_TIM_MspPostInit+0x44>)
 8003190:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003192:	2301      	movs	r3, #1
 8003194:	4319      	orrs	r1, r3
 8003196:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003198:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800319a:	4013      	ands	r3, r2
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80031a0:	2302      	movs	r3, #2
 80031a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80031a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a8:	a901      	add	r1, sp, #4
 80031aa:	20a0      	movs	r0, #160	; 0xa0
 80031ac:	05c0      	lsls	r0, r0, #23
 80031ae:	f7fe fbf5 	bl	800199c <HAL_GPIO_Init>
}
 80031b2:	e7ea      	b.n	800318a <HAL_TIM_MspPostInit+0x1a>
 80031b4:	40021000 	.word	0x40021000

080031b8 <MX_TIM2_Init>:
{
 80031b8:	b500      	push	{lr}
 80031ba:	b08b      	sub	sp, #44	; 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031bc:	2210      	movs	r2, #16
 80031be:	2100      	movs	r1, #0
 80031c0:	a806      	add	r0, sp, #24
 80031c2:	f000 f8bb 	bl	800333c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c6:	2208      	movs	r2, #8
 80031c8:	2100      	movs	r1, #0
 80031ca:	a804      	add	r0, sp, #16
 80031cc:	f000 f8b6 	bl	800333c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031d0:	2210      	movs	r2, #16
 80031d2:	2100      	movs	r1, #0
 80031d4:	4668      	mov	r0, sp
 80031d6:	f000 f8b1 	bl	800333c <memset>
  htim2.Instance = TIM2;
 80031da:	4826      	ldr	r0, [pc, #152]	; (8003274 <MX_TIM2_Init+0xbc>)
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	05db      	lsls	r3, r3, #23
 80031e0:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 16;
 80031e2:	2310      	movs	r3, #16
 80031e4:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80031e6:	3330      	adds	r3, #48	; 0x30
 80031e8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1023;
 80031ea:	4b23      	ldr	r3, [pc, #140]	; (8003278 <MX_TIM2_Init+0xc0>)
 80031ec:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ee:	2300      	movs	r3, #0
 80031f0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031f2:	3380      	adds	r3, #128	; 0x80
 80031f4:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031f6:	f7ff fad8 	bl	80027aa <HAL_TIM_Base_Init>
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d12a      	bne.n	8003254 <MX_TIM2_Init+0x9c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	015b      	lsls	r3, r3, #5
 8003202:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003204:	a906      	add	r1, sp, #24
 8003206:	481b      	ldr	r0, [pc, #108]	; (8003274 <MX_TIM2_Init+0xbc>)
 8003208:	f7ff fbbe 	bl	8002988 <HAL_TIM_ConfigClockSource>
 800320c:	2800      	cmp	r0, #0
 800320e:	d124      	bne.n	800325a <MX_TIM2_Init+0xa2>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003210:	4818      	ldr	r0, [pc, #96]	; (8003274 <MX_TIM2_Init+0xbc>)
 8003212:	f7ff faf6 	bl	8002802 <HAL_TIM_PWM_Init>
 8003216:	2800      	cmp	r0, #0
 8003218:	d122      	bne.n	8003260 <MX_TIM2_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800321a:	2320      	movs	r3, #32
 800321c:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800321e:	2300      	movs	r3, #0
 8003220:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003222:	a904      	add	r1, sp, #16
 8003224:	4813      	ldr	r0, [pc, #76]	; (8003274 <MX_TIM2_Init+0xbc>)
 8003226:	f7ff fcb7 	bl	8002b98 <HAL_TIMEx_MasterConfigSynchronization>
 800322a:	2800      	cmp	r0, #0
 800322c:	d11b      	bne.n	8003266 <MX_TIM2_Init+0xae>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800322e:	2360      	movs	r3, #96	; 0x60
 8003230:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 2047;
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <MX_TIM2_Init+0xc4>)
 8003234:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003236:	2300      	movs	r3, #0
 8003238:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800323a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800323c:	2204      	movs	r2, #4
 800323e:	4669      	mov	r1, sp
 8003240:	480c      	ldr	r0, [pc, #48]	; (8003274 <MX_TIM2_Init+0xbc>)
 8003242:	f7ff fb2b 	bl	800289c <HAL_TIM_PWM_ConfigChannel>
 8003246:	2800      	cmp	r0, #0
 8003248:	d110      	bne.n	800326c <MX_TIM2_Init+0xb4>
  HAL_TIM_MspPostInit(&htim2);
 800324a:	480a      	ldr	r0, [pc, #40]	; (8003274 <MX_TIM2_Init+0xbc>)
 800324c:	f7ff ff90 	bl	8003170 <HAL_TIM_MspPostInit>
}
 8003250:	b00b      	add	sp, #44	; 0x2c
 8003252:	bd00      	pop	{pc}
    Error_Handler();
 8003254:	f7ff fe72 	bl	8002f3c <Error_Handler>
 8003258:	e7d1      	b.n	80031fe <MX_TIM2_Init+0x46>
    Error_Handler();
 800325a:	f7ff fe6f 	bl	8002f3c <Error_Handler>
 800325e:	e7d7      	b.n	8003210 <MX_TIM2_Init+0x58>
    Error_Handler();
 8003260:	f7ff fe6c 	bl	8002f3c <Error_Handler>
 8003264:	e7d9      	b.n	800321a <MX_TIM2_Init+0x62>
    Error_Handler();
 8003266:	f7ff fe69 	bl	8002f3c <Error_Handler>
 800326a:	e7e0      	b.n	800322e <MX_TIM2_Init+0x76>
    Error_Handler();
 800326c:	f7ff fe66 	bl	8002f3c <Error_Handler>
 8003270:	e7eb      	b.n	800324a <MX_TIM2_Init+0x92>
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	2000011c 	.word	0x2000011c
 8003278:	000003ff 	.word	0x000003ff
 800327c:	000007ff 	.word	0x000007ff

08003280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003280:	4813      	ldr	r0, [pc, #76]	; (80032d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003282:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8003284:	2004      	movs	r0, #4
    LDR R1, [R0]
 8003286:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003288:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800328a:	221f      	movs	r2, #31
    CMP R1, R2
 800328c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800328e:	d105      	bne.n	800329c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8003290:	4810      	ldr	r0, [pc, #64]	; (80032d4 <LoopForever+0x6>)
    LDR R1,=0x00000001
 8003292:	2101      	movs	r1, #1
    STR R1, [R0]
 8003294:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8003296:	4810      	ldr	r0, [pc, #64]	; (80032d8 <LoopForever+0xa>)
    LDR R1,=0x00000000
 8003298:	2100      	movs	r1, #0
    STR R1, [R0]
 800329a:	6001      	str	r1, [r0, #0]

0800329c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800329c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800329e:	e003      	b.n	80032a8 <LoopCopyDataInit>

080032a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <LoopForever+0xe>)
  ldr  r3, [r3, r1]
 80032a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032a6:	3104      	adds	r1, #4

080032a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80032a8:	480d      	ldr	r0, [pc, #52]	; (80032e0 <LoopForever+0x12>)
  ldr  r3, =_edata
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <LoopForever+0x16>)
  adds  r2, r0, r1
 80032ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032b0:	d3f6      	bcc.n	80032a0 <CopyDataInit>
  ldr  r2, =_sbss
 80032b2:	4a0d      	ldr	r2, [pc, #52]	; (80032e8 <LoopForever+0x1a>)
  b  LoopFillZerobss
 80032b4:	e002      	b.n	80032bc <LoopFillZerobss>

080032b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80032b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80032b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ba:	3204      	adds	r2, #4

080032bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <LoopForever+0x1e>)
  cmp  r2, r3
 80032be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032c0:	d3f9      	bcc.n	80032b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032c2:	f7ff fec7 	bl	8003054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032c6:	f000 f815 	bl	80032f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ca:	f7ff fe03 	bl	8002ed4 <main>

080032ce <LoopForever>:

LoopForever:
    b LoopForever
 80032ce:	e7fe      	b.n	80032ce <LoopForever>
   ldr   r0, =_estack
 80032d0:	20000800 	.word	0x20000800
    LDR R0,=0x40021034
 80032d4:	40021034 	.word	0x40021034
    LDR R0,=0x40010000
 80032d8:	40010000 	.word	0x40010000
  ldr  r3, =_sidata
 80032dc:	080033c8 	.word	0x080033c8
  ldr  r0, =_sdata
 80032e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032e4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80032e8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80032ec:	20000194 	.word	0x20000194

080032f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f0:	e7fe      	b.n	80032f0 <ADC1_COMP_IRQHandler>
	...

080032f4 <__libc_init_array>:
 80032f4:	b570      	push	{r4, r5, r6, lr}
 80032f6:	2600      	movs	r6, #0
 80032f8:	4d0c      	ldr	r5, [pc, #48]	; (800332c <__libc_init_array+0x38>)
 80032fa:	4c0d      	ldr	r4, [pc, #52]	; (8003330 <__libc_init_array+0x3c>)
 80032fc:	1b64      	subs	r4, r4, r5
 80032fe:	10a4      	asrs	r4, r4, #2
 8003300:	42a6      	cmp	r6, r4
 8003302:	d109      	bne.n	8003318 <__libc_init_array+0x24>
 8003304:	2600      	movs	r6, #0
 8003306:	f000 f821 	bl	800334c <_init>
 800330a:	4d0a      	ldr	r5, [pc, #40]	; (8003334 <__libc_init_array+0x40>)
 800330c:	4c0a      	ldr	r4, [pc, #40]	; (8003338 <__libc_init_array+0x44>)
 800330e:	1b64      	subs	r4, r4, r5
 8003310:	10a4      	asrs	r4, r4, #2
 8003312:	42a6      	cmp	r6, r4
 8003314:	d105      	bne.n	8003322 <__libc_init_array+0x2e>
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	00b3      	lsls	r3, r6, #2
 800331a:	58eb      	ldr	r3, [r5, r3]
 800331c:	4798      	blx	r3
 800331e:	3601      	adds	r6, #1
 8003320:	e7ee      	b.n	8003300 <__libc_init_array+0xc>
 8003322:	00b3      	lsls	r3, r6, #2
 8003324:	58eb      	ldr	r3, [r5, r3]
 8003326:	4798      	blx	r3
 8003328:	3601      	adds	r6, #1
 800332a:	e7f2      	b.n	8003312 <__libc_init_array+0x1e>
 800332c:	080033c0 	.word	0x080033c0
 8003330:	080033c0 	.word	0x080033c0
 8003334:	080033c0 	.word	0x080033c0
 8003338:	080033c4 	.word	0x080033c4

0800333c <memset>:
 800333c:	0003      	movs	r3, r0
 800333e:	1882      	adds	r2, r0, r2
 8003340:	4293      	cmp	r3, r2
 8003342:	d100      	bne.n	8003346 <memset+0xa>
 8003344:	4770      	bx	lr
 8003346:	7019      	strb	r1, [r3, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	e7f9      	b.n	8003340 <memset+0x4>

0800334c <_init>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr

08003358 <_fini>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr
